
Street Line Detection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d4c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004fe4  08004fe4  00014fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004ffc  08004ffc  00014ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005000  08005000  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08005004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0004b0e8  24000010  08005014  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2404b0f8  08005014  0002b0f8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ad19  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001a98  00000000  00000000  0002ad57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000007e0  00000000  00000000  0002c7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000718  00000000  00000000  0002cfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00034c9f  00000000  00000000  0002d6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b8fb  00000000  00000000  00062387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014fd1f  00000000  00000000  0006dc82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001bd9a1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001e8c  00000000  00000000  001bd9f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004fcc 	.word	0x08004fcc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004fcc 	.word	0x08004fcc

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b0ba      	sub	sp, #232	; 0xe8
 80002dc:	af00      	add	r7, sp, #0
int main(void)
 80002de:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80002e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  /* USER CODE BEGIN 1 */
  // Enable the clock signals for the DCMI and DMA peripherals
	__HAL_RCC_DCMI_CLK_ENABLE();
 80002e6:	4b5f      	ldr	r3, [pc, #380]	; (8000464 <main+0x18c>)
 80002e8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80002ec:	4a5d      	ldr	r2, [pc, #372]	; (8000464 <main+0x18c>)
 80002ee:	f043 0301 	orr.w	r3, r3, #1
 80002f2:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80002f6:	4b5b      	ldr	r3, [pc, #364]	; (8000464 <main+0x18c>)
 80002f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80002fc:	f003 0301 	and.w	r3, r3, #1
 8000300:	607b      	str	r3, [r7, #4]
 8000302:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000304:	4b57      	ldr	r3, [pc, #348]	; (8000464 <main+0x18c>)
 8000306:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800030a:	4a56      	ldr	r2, [pc, #344]	; (8000464 <main+0x18c>)
 800030c:	f043 0302 	orr.w	r3, r3, #2
 8000310:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000314:	4b53      	ldr	r3, [pc, #332]	; (8000464 <main+0x18c>)
 8000316:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800031a:	f003 0302 	and.w	r3, r3, #2
 800031e:	603b      	str	r3, [r7, #0]
 8000320:	683b      	ldr	r3, [r7, #0]

	// Configure the DMA peripheral to transfer image data from the DCMI to the image buffer
	DMA_HandleTypeDef dma_handle;
	dma_handle.Instance = DMA2_Stream1;
 8000322:	4b51      	ldr	r3, [pc, #324]	; (8000468 <main+0x190>)
 8000324:	66fb      	str	r3, [r7, #108]	; 0x6c
	dma_handle.Init.Request = DMA_REQUEST_DCMI;
 8000326:	234b      	movs	r3, #75	; 0x4b
 8000328:	673b      	str	r3, [r7, #112]	; 0x70
	dma_handle.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800032a:	2300      	movs	r3, #0
 800032c:	677b      	str	r3, [r7, #116]	; 0x74
	dma_handle.Init.PeriphInc = DMA_PINC_DISABLE;
 800032e:	2300      	movs	r3, #0
 8000330:	67bb      	str	r3, [r7, #120]	; 0x78
	dma_handle.Init.MemInc = DMA_MINC_ENABLE;
 8000332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000336:	67fb      	str	r3, [r7, #124]	; 0x7c
	dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000338:	2300      	movs	r3, #0
 800033a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800033e:	2300      	movs	r3, #0
 8000340:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	dma_handle.Init.Mode = DMA_NORMAL;
 8000344:	2300      	movs	r3, #0
 8000346:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	dma_handle.Init.Priority = DMA_PRIORITY_HIGH;
 800034a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800034e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	dma_handle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000352:	2300      	movs	r3, #0
 8000354:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	HAL_DMA_Init(&dma_handle);
 8000358:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800035c:	4618      	mov	r0, r3
 800035e:	f000 ff39 	bl	80011d4 <HAL_DMA_Init>
	__HAL_LINKDMA(&hdcmi, DMA_Handle, dma_handle);
 8000362:	4a42      	ldr	r2, [pc, #264]	; (800046c <main+0x194>)
 8000364:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000368:	6493      	str	r3, [r2, #72]	; 0x48
 800036a:	4b40      	ldr	r3, [pc, #256]	; (800046c <main+0x194>)
 800036c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	  HAL_DMA_IRQHandler(&dma_handle);
	}

	// Configure the DCMI peripheral to capture image data from the camera module
	DCMI_HandleTypeDef dcmi_handle;
	dcmi_handle.Instance = DCMI;
 8000370:	4b3f      	ldr	r3, [pc, #252]	; (8000470 <main+0x198>)
 8000372:	61fb      	str	r3, [r7, #28]
	dcmi_handle.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000374:	2300      	movs	r3, #0
 8000376:	633b      	str	r3, [r7, #48]	; 0x30
	dcmi_handle.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8000378:	2340      	movs	r3, #64	; 0x40
 800037a:	62fb      	str	r3, [r7, #44]	; 0x2c
	dcmi_handle.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800037c:	2380      	movs	r3, #128	; 0x80
 800037e:	62bb      	str	r3, [r7, #40]	; 0x28
	dcmi_handle.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000380:	2300      	movs	r3, #0
 8000382:	623b      	str	r3, [r7, #32]
	dcmi_handle.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000384:	2320      	movs	r3, #32
 8000386:	627b      	str	r3, [r7, #36]	; 0x24
	dcmi_handle.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000388:	2300      	movs	r3, #0
 800038a:	637b      	str	r3, [r7, #52]	; 0x34
	dcmi_handle.Init.SyncroCode.FrameStartCode = 0xA5;
 800038c:	23a5      	movs	r3, #165	; 0xa5
 800038e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	dcmi_handle.Init.SyncroCode.LineStartCode = 0x01;
 8000392:	2301      	movs	r3, #1
 8000394:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	dcmi_handle.Init.SyncroCode.LineEndCode = 0xFE;
 8000398:	23fe      	movs	r3, #254	; 0xfe
 800039a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	dcmi_handle.Init.SyncroCode.FrameEndCode = 0x5A;
 800039e:	235a      	movs	r3, #90	; 0x5a
 80003a0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	HAL_DCMI_Init(&dcmi_handle);
 80003a4:	f107 031c 	add.w	r3, r7, #28
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 fd1d 	bl	8000de8 <HAL_DCMI_Init>

	// Configure the VS (vertical synchronization) pin as an input
	GPIO_InitTypeDef gpio_init;
	gpio_init.Pin = GPIO_PIN_9;
 80003ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003b2:	60bb      	str	r3, [r7, #8]
	gpio_init.Mode = GPIO_MODE_INPUT;
 80003b4:	2300      	movs	r3, #0
 80003b6:	60fb      	str	r3, [r7, #12]
	gpio_init.Pull = GPIO_NOPULL;
 80003b8:	2300      	movs	r3, #0
 80003ba:	613b      	str	r3, [r7, #16]
	gpio_init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003bc:	2303      	movs	r3, #3
 80003be:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOG, &gpio_init);
 80003c0:	f107 0308 	add.w	r3, r7, #8
 80003c4:	4619      	mov	r1, r3
 80003c6:	482b      	ldr	r0, [pc, #172]	; (8000474 <main+0x19c>)
 80003c8:	f003 fc8c 	bl	8003ce4 <HAL_GPIO_Init>

	// Configure the HS (horizontal synchronization) pin as an input
	gpio_init.Pin = GPIO_PIN_4;
 80003cc:	2310      	movs	r3, #16
 80003ce:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &gpio_init);
 80003d0:	f107 0308 	add.w	r3, r7, #8
 80003d4:	4619      	mov	r1, r3
 80003d6:	4828      	ldr	r0, [pc, #160]	; (8000478 <main+0x1a0>)
 80003d8:	f003 fc84 	bl	8003ce4 <HAL_GPIO_Init>

	// Configure the PCLK (pixel clock) pin as an input
	gpio_init.Pin = GPIO_PIN_6;
 80003dc:	2340      	movs	r3, #64	; 0x40
 80003de:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &gpio_init);
 80003e0:	f107 0308 	add.w	r3, r7, #8
 80003e4:	4619      	mov	r1, r3
 80003e6:	4824      	ldr	r0, [pc, #144]	; (8000478 <main+0x1a0>)
 80003e8:	f003 fc7c 	bl	8003ce4 <HAL_GPIO_Init>

	// Configure the D0-D7 (data) pins as inputs
	gpio_init.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 80003ec:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80003f0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOC, &gpio_init);
 80003f2:	f107 0308 	add.w	r3, r7, #8
 80003f6:	4619      	mov	r1, r3
 80003f8:	4820      	ldr	r0, [pc, #128]	; (800047c <main+0x1a4>)
 80003fa:	f003 fc73 	bl	8003ce4 <HAL_GPIO_Init>
	gpio_init.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 80003fe:	2370      	movs	r3, #112	; 0x70
 8000400:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOE, &gpio_init);
 8000402:	f107 0308 	add.w	r3, r7, #8
 8000406:	4619      	mov	r1, r3
 8000408:	481d      	ldr	r0, [pc, #116]	; (8000480 <main+0x1a8>)
 800040a:	f003 fc6b 	bl	8003ce4 <HAL_GPIO_Init>
	gpio_init.Pin = GPIO_PIN_3;
 800040e:	2308      	movs	r3, #8
 8000410:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOD, &gpio_init);
 8000412:	f107 0308 	add.w	r3, r7, #8
 8000416:	4619      	mov	r1, r3
 8000418:	481a      	ldr	r0, [pc, #104]	; (8000484 <main+0x1ac>)
 800041a:	f003 fc63 	bl	8003ce4 <HAL_GPIO_Init>

	// Enable the DMA transfer complete interrupt
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800041e:	2200      	movs	r2, #0
 8000420:	2100      	movs	r1, #0
 8000422:	2039      	movs	r0, #57	; 0x39
 8000424:	f000 fcab 	bl	8000d7e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000428:	2039      	movs	r0, #57	; 0x39
 800042a:	f000 fcc2 	bl	8000db2 <HAL_NVIC_EnableIRQ>

	// Start the DMA transfer
	HAL_DMA_Start_IT(&dma_handle, (uint32_t)&DCMI->DR, (uint32_t)image_buffer, CAMERA_WIDTH * CAMERA_HEIGHT);
 800042e:	4a16      	ldr	r2, [pc, #88]	; (8000488 <main+0x1b0>)
 8000430:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8000434:	f44f 2396 	mov.w	r3, #307200	; 0x4b000
 8000438:	4914      	ldr	r1, [pc, #80]	; (800048c <main+0x1b4>)
 800043a:	f001 fa27 	bl	800188c <HAL_DMA_Start_IT>

	// Start the image capture
	HAL_DCMI_Start_DMA(&dcmi_handle, DCMI_MODE_SNAPSHOT, (uint32_t)image_buffer, CAMERA_WIDTH * CAMERA_HEIGHT);
 800043e:	4a12      	ldr	r2, [pc, #72]	; (8000488 <main+0x1b0>)
 8000440:	f107 001c 	add.w	r0, r7, #28
 8000444:	f44f 2396 	mov.w	r3, #307200	; 0x4b000
 8000448:	2102      	movs	r1, #2
 800044a:	f000 fd47 	bl	8000edc <HAL_DCMI_Start_DMA>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044e:	f000 fb1d 	bl	8000a8c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000452:	f000 f81d 	bl	8000490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000456:	f000 f8df 	bl	8000618 <MX_GPIO_Init>
  MX_DCMI_Init();
 800045a:	f000 f883 	bl	8000564 <MX_DCMI_Init>
  MX_DMA_Init();
 800045e:	f000 f8bb 	bl	80005d8 <MX_DMA_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000462:	e7fe      	b.n	8000462 <main+0x18a>
 8000464:	58024400 	.word	0x58024400
 8000468:	40020428 	.word	0x40020428
 800046c:	2400002c 	.word	0x2400002c
 8000470:	48020000 	.word	0x48020000
 8000474:	58021800 	.word	0x58021800
 8000478:	58020000 	.word	0x58020000
 800047c:	58020800 	.word	0x58020800
 8000480:	58021000 	.word	0x58021000
 8000484:	58020c00 	.word	0x58020c00
 8000488:	240000f4 	.word	0x240000f4
 800048c:	48020028 	.word	0x48020028

08000490 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b09c      	sub	sp, #112	; 0x70
 8000494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800049a:	224c      	movs	r2, #76	; 0x4c
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f004 fd8c 	bl	8004fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	2220      	movs	r2, #32
 80004a8:	2100      	movs	r1, #0
 80004aa:	4618      	mov	r0, r3
 80004ac:	f004 fd86 	bl	8004fbc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004b0:	2002      	movs	r0, #2
 80004b2:	f003 fdc7 	bl	8004044 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004b6:	2300      	movs	r3, #0
 80004b8:	603b      	str	r3, [r7, #0]
 80004ba:	4b28      	ldr	r3, [pc, #160]	; (800055c <SystemClock_Config+0xcc>)
 80004bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004be:	4a27      	ldr	r2, [pc, #156]	; (800055c <SystemClock_Config+0xcc>)
 80004c0:	f023 0301 	bic.w	r3, r3, #1
 80004c4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004c6:	4b25      	ldr	r3, [pc, #148]	; (800055c <SystemClock_Config+0xcc>)
 80004c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	4b23      	ldr	r3, [pc, #140]	; (8000560 <SystemClock_Config+0xd0>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004d8:	4a21      	ldr	r2, [pc, #132]	; (8000560 <SystemClock_Config+0xd0>)
 80004da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b1f      	ldr	r3, [pc, #124]	; (8000560 <SystemClock_Config+0xd0>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004e8:	603b      	str	r3, [r7, #0]
 80004ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004ec:	bf00      	nop
 80004ee:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <SystemClock_Config+0xd0>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004fa:	d1f8      	bne.n	80004ee <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004fc:	2302      	movs	r3, #2
 80004fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000500:	2301      	movs	r3, #1
 8000502:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000504:	2340      	movs	r3, #64	; 0x40
 8000506:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000508:	2300      	movs	r3, #0
 800050a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000510:	4618      	mov	r0, r3
 8000512:	f003 fdd1 	bl	80040b8 <HAL_RCC_OscConfig>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800051c:	f000 f8c4 	bl	80006a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000520:	233f      	movs	r3, #63	; 0x3f
 8000522:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800052c:	2300      	movs	r3, #0
 800052e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000534:	2300      	movs	r3, #0
 8000536:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800053c:	2300      	movs	r3, #0
 800053e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	2101      	movs	r1, #1
 8000544:	4618      	mov	r0, r3
 8000546:	f004 f9e5 	bl	8004914 <HAL_RCC_ClockConfig>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000550:	f000 f8aa 	bl	80006a8 <Error_Handler>
  }
}
 8000554:	bf00      	nop
 8000556:	3770      	adds	r7, #112	; 0x70
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	58000400 	.word	0x58000400
 8000560:	58024800 	.word	0x58024800

08000564 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000568:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <MX_DCMI_Init+0x6c>)
 800056a:	4a1a      	ldr	r2, [pc, #104]	; (80005d4 <MX_DCMI_Init+0x70>)
 800056c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_EMBEDDED;
 800056e:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <MX_DCMI_Init+0x6c>)
 8000570:	2210      	movs	r2, #16
 8000572:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000574:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <MX_DCMI_Init+0x6c>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800057a:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <MX_DCMI_Init+0x6c>)
 800057c:	2200      	movs	r2, #0
 800057e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000580:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <MX_DCMI_Init+0x6c>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
  hdcmi.Init.SyncroCode.FrameEndCode = 0;
 8000586:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <MX_DCMI_Init+0x6c>)
 8000588:	2200      	movs	r2, #0
 800058a:	77da      	strb	r2, [r3, #31]
  hdcmi.Init.SyncroCode.FrameStartCode = 0;
 800058c:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <MX_DCMI_Init+0x6c>)
 800058e:	2200      	movs	r2, #0
 8000590:	771a      	strb	r2, [r3, #28]
  hdcmi.Init.SyncroCode.LineStartCode = 0;
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <MX_DCMI_Init+0x6c>)
 8000594:	2200      	movs	r2, #0
 8000596:	775a      	strb	r2, [r3, #29]
  hdcmi.Init.SyncroCode.LineEndCode = 0;
 8000598:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <MX_DCMI_Init+0x6c>)
 800059a:	2200      	movs	r2, #0
 800059c:	779a      	strb	r2, [r3, #30]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <MX_DCMI_Init+0x6c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80005a4:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <MX_DCMI_Init+0x6c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <MX_DCMI_Init+0x6c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80005b0:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <MX_DCMI_Init+0x6c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <MX_DCMI_Init+0x6c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <MX_DCMI_Init+0x6c>)
 80005be:	f000 fc13 	bl	8000de8 <HAL_DCMI_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_DCMI_Init+0x68>
  {
    Error_Handler();
 80005c8:	f000 f86e 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	2400002c 	.word	0x2400002c
 80005d4:	48020000 	.word	0x48020000

080005d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005de:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <MX_DMA_Init+0x3c>)
 80005e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80005e4:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <MX_DMA_Init+0x3c>)
 80005e6:	f043 0301 	orr.w	r3, r3, #1
 80005ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_DMA_Init+0x3c>)
 80005f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2100      	movs	r1, #0
 8000600:	200b      	movs	r0, #11
 8000602:	f000 fbbc 	bl	8000d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000606:	200b      	movs	r0, #11
 8000608:	f000 fbd3 	bl	8000db2 <HAL_NVIC_EnableIRQ>

}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	58024400 	.word	0x58024400

08000618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800061e:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <MX_GPIO_Init+0x8c>)
 8000620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000624:	4a1f      	ldr	r2, [pc, #124]	; (80006a4 <MX_GPIO_Init+0x8c>)
 8000626:	f043 0310 	orr.w	r3, r3, #16
 800062a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800062e:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <MX_GPIO_Init+0x8c>)
 8000630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000634:	f003 0310 	and.w	r3, r3, #16
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063c:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <MX_GPIO_Init+0x8c>)
 800063e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000642:	4a18      	ldr	r2, [pc, #96]	; (80006a4 <MX_GPIO_Init+0x8c>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_GPIO_Init+0x8c>)
 800064e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_GPIO_Init+0x8c>)
 800065c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000660:	4a10      	ldr	r2, [pc, #64]	; (80006a4 <MX_GPIO_Init+0x8c>)
 8000662:	f043 0304 	orr.w	r3, r3, #4
 8000666:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_GPIO_Init+0x8c>)
 800066c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <MX_GPIO_Init+0x8c>)
 800067a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800067e:	4a09      	ldr	r2, [pc, #36]	; (80006a4 <MX_GPIO_Init+0x8c>)
 8000680:	f043 0308 	orr.w	r3, r3, #8
 8000684:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_GPIO_Init+0x8c>)
 800068a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800068e:	f003 0308 	and.w	r3, r3, #8
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	683b      	ldr	r3, [r7, #0]

}
 8000696:	bf00      	nop
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	58024400 	.word	0x58024400

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>
	...

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <HAL_MspInit+0x30>)
 80006bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006c0:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <HAL_MspInit+0x30>)
 80006c2:	f043 0302 	orr.w	r3, r3, #2
 80006c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_MspInit+0x30>)
 80006cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006d0:	f003 0302 	and.w	r3, r3, #2
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	58024400 	.word	0x58024400

080006e8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	; 0x30
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a66      	ldr	r2, [pc, #408]	; (80008a0 <HAL_DCMI_MspInit+0x1b8>)
 8000706:	4293      	cmp	r3, r2
 8000708:	f040 80c5 	bne.w	8000896 <HAL_DCMI_MspInit+0x1ae>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800070c:	4b65      	ldr	r3, [pc, #404]	; (80008a4 <HAL_DCMI_MspInit+0x1bc>)
 800070e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000712:	4a64      	ldr	r2, [pc, #400]	; (80008a4 <HAL_DCMI_MspInit+0x1bc>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800071c:	4b61      	ldr	r3, [pc, #388]	; (80008a4 <HAL_DCMI_MspInit+0x1bc>)
 800071e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	61bb      	str	r3, [r7, #24]
 8000728:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800072a:	4b5e      	ldr	r3, [pc, #376]	; (80008a4 <HAL_DCMI_MspInit+0x1bc>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000730:	4a5c      	ldr	r2, [pc, #368]	; (80008a4 <HAL_DCMI_MspInit+0x1bc>)
 8000732:	f043 0310 	orr.w	r3, r3, #16
 8000736:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800073a:	4b5a      	ldr	r3, [pc, #360]	; (80008a4 <HAL_DCMI_MspInit+0x1bc>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000740:	f003 0310 	and.w	r3, r3, #16
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000748:	4b56      	ldr	r3, [pc, #344]	; (80008a4 <HAL_DCMI_MspInit+0x1bc>)
 800074a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074e:	4a55      	ldr	r2, [pc, #340]	; (80008a4 <HAL_DCMI_MspInit+0x1bc>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000758:	4b52      	ldr	r3, [pc, #328]	; (80008a4 <HAL_DCMI_MspInit+0x1bc>)
 800075a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	4b4f      	ldr	r3, [pc, #316]	; (80008a4 <HAL_DCMI_MspInit+0x1bc>)
 8000768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076c:	4a4d      	ldr	r2, [pc, #308]	; (80008a4 <HAL_DCMI_MspInit+0x1bc>)
 800076e:	f043 0304 	orr.w	r3, r3, #4
 8000772:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000776:	4b4b      	ldr	r3, [pc, #300]	; (80008a4 <HAL_DCMI_MspInit+0x1bc>)
 8000778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077c:	f003 0304 	and.w	r3, r3, #4
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000784:	4b47      	ldr	r3, [pc, #284]	; (80008a4 <HAL_DCMI_MspInit+0x1bc>)
 8000786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078a:	4a46      	ldr	r2, [pc, #280]	; (80008a4 <HAL_DCMI_MspInit+0x1bc>)
 800078c:	f043 0308 	orr.w	r3, r3, #8
 8000790:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000794:	4b43      	ldr	r3, [pc, #268]	; (80008a4 <HAL_DCMI_MspInit+0x1bc>)
 8000796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> DCMI_D1
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80007a2:	2370      	movs	r3, #112	; 0x70
 80007a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007b2:	230d      	movs	r3, #13
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	483a      	ldr	r0, [pc, #232]	; (80008a8 <HAL_DCMI_MspInit+0x1c0>)
 80007be:	f003 fa91 	bl	8003ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007c2:	2340      	movs	r3, #64	; 0x40
 80007c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007d2:	230d      	movs	r3, #13
 80007d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	4833      	ldr	r0, [pc, #204]	; (80008ac <HAL_DCMI_MspInit+0x1c4>)
 80007de:	f003 fa81 	bl	8003ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80007e2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80007e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007f4:	230d      	movs	r3, #13
 80007f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4619      	mov	r1, r3
 80007fe:	482c      	ldr	r0, [pc, #176]	; (80008b0 <HAL_DCMI_MspInit+0x1c8>)
 8000800:	f003 fa70 	bl	8003ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000804:	2308      	movs	r3, #8
 8000806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000814:	230d      	movs	r3, #13
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	4825      	ldr	r0, [pc, #148]	; (80008b4 <HAL_DCMI_MspInit+0x1cc>)
 8000820:	f003 fa60 	bl	8003ce4 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8000824:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <HAL_DCMI_MspInit+0x1d0>)
 8000826:	4a25      	ldr	r2, [pc, #148]	; (80008bc <HAL_DCMI_MspInit+0x1d4>)
 8000828:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 800082a:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <HAL_DCMI_MspInit+0x1d0>)
 800082c:	224b      	movs	r2, #75	; 0x4b
 800082e:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000830:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <HAL_DCMI_MspInit+0x1d0>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <HAL_DCMI_MspInit+0x1d0>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <HAL_DCMI_MspInit+0x1d0>)
 800083e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000842:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000844:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <HAL_DCMI_MspInit+0x1d0>)
 8000846:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800084a:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <HAL_DCMI_MspInit+0x1d0>)
 800084e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000852:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <HAL_DCMI_MspInit+0x1d0>)
 8000856:	f44f 7280 	mov.w	r2, #256	; 0x100
 800085a:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 800085c:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <HAL_DCMI_MspInit+0x1d0>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_DCMI_MspInit+0x1d0>)
 8000864:	2204      	movs	r2, #4
 8000866:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <HAL_DCMI_MspInit+0x1d0>)
 800086a:	2203      	movs	r2, #3
 800086c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_DCMI_MspInit+0x1d0>)
 8000870:	2200      	movs	r2, #0
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000874:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <HAL_DCMI_MspInit+0x1d0>)
 8000876:	2200      	movs	r2, #0
 8000878:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800087a:	480f      	ldr	r0, [pc, #60]	; (80008b8 <HAL_DCMI_MspInit+0x1d0>)
 800087c:	f000 fcaa 	bl	80011d4 <HAL_DMA_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_DCMI_MspInit+0x1a2>
    {
      Error_Handler();
 8000886:	f7ff ff0f 	bl	80006a8 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <HAL_DCMI_MspInit+0x1d0>)
 800088e:	649a      	str	r2, [r3, #72]	; 0x48
 8000890:	4a09      	ldr	r2, [pc, #36]	; (80008b8 <HAL_DCMI_MspInit+0x1d0>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8000896:	bf00      	nop
 8000898:	3730      	adds	r7, #48	; 0x30
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	48020000 	.word	0x48020000
 80008a4:	58024400 	.word	0x58024400
 80008a8:	58021000 	.word	0x58021000
 80008ac:	58020000 	.word	0x58020000
 80008b0:	58020800 	.word	0x58020800
 80008b4:	58020c00 	.word	0x58020c00
 80008b8:	2400007c 	.word	0x2400007c
 80008bc:	40020010 	.word	0x40020010

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <NMI_Handler+0x4>

080008c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <HardFault_Handler+0x4>

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <MemManage_Handler+0x4>

080008d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <BusFault_Handler+0x4>

080008d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <UsageFault_Handler+0x4>

080008de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090c:	f000 f930 	bl	8000b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}

08000914 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <DMA1_Stream0_IRQHandler+0x10>)
 800091a:	f001 fa21 	bl	8001d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	2400007c 	.word	0x2400007c

08000928 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800092c:	4b37      	ldr	r3, [pc, #220]	; (8000a0c <SystemInit+0xe4>)
 800092e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000932:	4a36      	ldr	r2, [pc, #216]	; (8000a0c <SystemInit+0xe4>)
 8000934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800093c:	4b34      	ldr	r3, [pc, #208]	; (8000a10 <SystemInit+0xe8>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f003 030f 	and.w	r3, r3, #15
 8000944:	2b06      	cmp	r3, #6
 8000946:	d807      	bhi.n	8000958 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000948:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <SystemInit+0xe8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f023 030f 	bic.w	r3, r3, #15
 8000950:	4a2f      	ldr	r2, [pc, #188]	; (8000a10 <SystemInit+0xe8>)
 8000952:	f043 0307 	orr.w	r3, r3, #7
 8000956:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000958:	4b2e      	ldr	r3, [pc, #184]	; (8000a14 <SystemInit+0xec>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a2d      	ldr	r2, [pc, #180]	; (8000a14 <SystemInit+0xec>)
 800095e:	f043 0301 	orr.w	r3, r3, #1
 8000962:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000964:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <SystemInit+0xec>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800096a:	4b2a      	ldr	r3, [pc, #168]	; (8000a14 <SystemInit+0xec>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	4929      	ldr	r1, [pc, #164]	; (8000a14 <SystemInit+0xec>)
 8000970:	4b29      	ldr	r3, [pc, #164]	; (8000a18 <SystemInit+0xf0>)
 8000972:	4013      	ands	r3, r2
 8000974:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000976:	4b26      	ldr	r3, [pc, #152]	; (8000a10 <SystemInit+0xe8>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f003 0308 	and.w	r3, r3, #8
 800097e:	2b00      	cmp	r3, #0
 8000980:	d007      	beq.n	8000992 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000982:	4b23      	ldr	r3, [pc, #140]	; (8000a10 <SystemInit+0xe8>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f023 030f 	bic.w	r3, r3, #15
 800098a:	4a21      	ldr	r2, [pc, #132]	; (8000a10 <SystemInit+0xe8>)
 800098c:	f043 0307 	orr.w	r3, r3, #7
 8000990:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000992:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <SystemInit+0xec>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000998:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <SystemInit+0xec>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800099e:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <SystemInit+0xec>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <SystemInit+0xec>)
 80009a6:	4a1d      	ldr	r2, [pc, #116]	; (8000a1c <SystemInit+0xf4>)
 80009a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009aa:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <SystemInit+0xec>)
 80009ac:	4a1c      	ldr	r2, [pc, #112]	; (8000a20 <SystemInit+0xf8>)
 80009ae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009b0:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <SystemInit+0xec>)
 80009b2:	4a1c      	ldr	r2, [pc, #112]	; (8000a24 <SystemInit+0xfc>)
 80009b4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009b6:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <SystemInit+0xec>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009bc:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <SystemInit+0xec>)
 80009be:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <SystemInit+0xfc>)
 80009c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <SystemInit+0xec>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <SystemInit+0xec>)
 80009ca:	4a16      	ldr	r2, [pc, #88]	; (8000a24 <SystemInit+0xfc>)
 80009cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <SystemInit+0xec>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <SystemInit+0xec>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <SystemInit+0xec>)
 80009da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <SystemInit+0xec>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <SystemInit+0x100>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <SystemInit+0x104>)
 80009ec:	4013      	ands	r3, r2
 80009ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80009f2:	d202      	bcs.n	80009fa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <SystemInit+0x108>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <SystemInit+0x10c>)
 80009fc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a00:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed00 	.word	0xe000ed00
 8000a10:	52002000 	.word	0x52002000
 8000a14:	58024400 	.word	0x58024400
 8000a18:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a1c:	02020200 	.word	0x02020200
 8000a20:	01ff0000 	.word	0x01ff0000
 8000a24:	01010280 	.word	0x01010280
 8000a28:	5c001000 	.word	0x5c001000
 8000a2c:	ffff0000 	.word	0xffff0000
 8000a30:	51008108 	.word	0x51008108
 8000a34:	52004000 	.word	0x52004000

08000a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a3c:	f7ff ff74 	bl	8000928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a42:	490d      	ldr	r1, [pc, #52]	; (8000a78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a44:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a48:	e002      	b.n	8000a50 <LoopCopyDataInit>

08000a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4e:	3304      	adds	r3, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a54:	d3f9      	bcc.n	8000a4a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a56:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a58:	4c0a      	ldr	r4, [pc, #40]	; (8000a84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a5c:	e001      	b.n	8000a62 <LoopFillZerobss>

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a60:	3204      	adds	r2, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a66:	f004 fa85 	bl	8004f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a6a:	f7ff fc35 	bl	80002d8 <main>
  bx  lr
 8000a6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a70:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000a74:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a78:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000a7c:	08005004 	.word	0x08005004
  ldr r2, =_sbss
 8000a80:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000a84:	2404b0f8 	.word	0x2404b0f8

08000a88 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC3_IRQHandler>
	...

08000a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a92:	2003      	movs	r0, #3
 8000a94:	f000 f968 	bl	8000d68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000a98:	f004 f8f2 	bl	8004c80 <HAL_RCC_GetSysClockFreq>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_Init+0x68>)
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	0a1b      	lsrs	r3, r3, #8
 8000aa4:	f003 030f 	and.w	r3, r3, #15
 8000aa8:	4913      	ldr	r1, [pc, #76]	; (8000af8 <HAL_Init+0x6c>)
 8000aaa:	5ccb      	ldrb	r3, [r1, r3]
 8000aac:	f003 031f 	and.w	r3, r3, #31
 8000ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <HAL_Init+0x68>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	f003 030f 	and.w	r3, r3, #15
 8000abe:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <HAL_Init+0x6c>)
 8000ac0:	5cd3      	ldrb	r3, [r2, r3]
 8000ac2:	f003 031f 	and.w	r3, r3, #31
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8000acc:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <HAL_Init+0x70>)
 8000ace:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ad0:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <HAL_Init+0x74>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ad6:	200f      	movs	r0, #15
 8000ad8:	f000 f814 	bl	8000b04 <HAL_InitTick>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e002      	b.n	8000aec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae6:	f7ff fde5 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aea:	2300      	movs	r3, #0
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	58024400 	.word	0x58024400
 8000af8:	08004fe4 	.word	0x08004fe4
 8000afc:	24000004 	.word	0x24000004
 8000b00:	24000000 	.word	0x24000000

08000b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_InitTick+0x60>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d101      	bne.n	8000b18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b14:	2301      	movs	r3, #1
 8000b16:	e021      	b.n	8000b5c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <HAL_InitTick+0x64>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <HAL_InitTick+0x60>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4619      	mov	r1, r3
 8000b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f94d 	bl	8000dce <HAL_SYSTICK_Config>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e00e      	b.n	8000b5c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b0f      	cmp	r3, #15
 8000b42:	d80a      	bhi.n	8000b5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b44:	2200      	movs	r2, #0
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b4c:	f000 f917 	bl	8000d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b50:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <HAL_InitTick+0x68>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b56:	2300      	movs	r3, #0
 8000b58:	e000      	b.n	8000b5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	2400000c 	.word	0x2400000c
 8000b68:	24000000 	.word	0x24000000
 8000b6c:	24000008 	.word	0x24000008

08000b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_IncTick+0x20>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_IncTick+0x24>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <HAL_IncTick+0x24>)
 8000b82:	6013      	str	r3, [r2, #0]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	2400000c 	.word	0x2400000c
 8000b94:	2404b0f4 	.word	0x2404b0f4

08000b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <HAL_GetTick+0x14>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	2404b0f4 	.word	0x2404b0f4

08000bb0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <HAL_GetREVID+0x14>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	0c1b      	lsrs	r3, r3, #16
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	5c001000 	.word	0x5c001000

08000bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <__NVIC_SetPriorityGrouping+0x40>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be4:	4013      	ands	r3, r2
 8000be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <__NVIC_SetPriorityGrouping+0x44>)
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <__NVIC_SetPriorityGrouping+0x40>)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	60d3      	str	r3, [r2, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00
 8000c0c:	05fa0000 	.word	0x05fa0000

08000c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <__NVIC_GetPriorityGrouping+0x18>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	0a1b      	lsrs	r3, r3, #8
 8000c1a:	f003 0307 	and.w	r3, r3, #7
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	db0b      	blt.n	8000c56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3e:	88fb      	ldrh	r3, [r7, #6]
 8000c40:	f003 021f 	and.w	r2, r3, #31
 8000c44:	4907      	ldr	r1, [pc, #28]	; (8000c64 <__NVIC_EnableIRQ+0x38>)
 8000c46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c4a:	095b      	lsrs	r3, r3, #5
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000e100 	.word	0xe000e100

08000c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	db0a      	blt.n	8000c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	490c      	ldr	r1, [pc, #48]	; (8000cb4 <__NVIC_SetPriority+0x4c>)
 8000c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c86:	0112      	lsls	r2, r2, #4
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c90:	e00a      	b.n	8000ca8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4908      	ldr	r1, [pc, #32]	; (8000cb8 <__NVIC_SetPriority+0x50>)
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	3b04      	subs	r3, #4
 8000ca0:	0112      	lsls	r2, r2, #4
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	761a      	strb	r2, [r3, #24]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000e100 	.word	0xe000e100
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	; 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f1c3 0307 	rsb	r3, r3, #7
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	bf28      	it	cs
 8000cda:	2304      	movcs	r3, #4
 8000cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	2b06      	cmp	r3, #6
 8000ce4:	d902      	bls.n	8000cec <NVIC_EncodePriority+0x30>
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3b03      	subs	r3, #3
 8000cea:	e000      	b.n	8000cee <NVIC_EncodePriority+0x32>
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	401a      	ands	r2, r3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43d9      	mvns	r1, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	4313      	orrs	r3, r2
         );
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3724      	adds	r7, #36	; 0x24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
	...

08000d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d34:	d301      	bcc.n	8000d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d36:	2301      	movs	r3, #1
 8000d38:	e00f      	b.n	8000d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <SysTick_Config+0x40>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d42:	210f      	movs	r1, #15
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d48:	f7ff ff8e 	bl	8000c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <SysTick_Config+0x40>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d52:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <SysTick_Config+0x40>)
 8000d54:	2207      	movs	r2, #7
 8000d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	e000e010 	.word	0xe000e010

08000d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff ff29 	bl	8000bc8 <__NVIC_SetPriorityGrouping>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b086      	sub	sp, #24
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
 8000d8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d8c:	f7ff ff40 	bl	8000c10 <__NVIC_GetPriorityGrouping>
 8000d90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	68b9      	ldr	r1, [r7, #8]
 8000d96:	6978      	ldr	r0, [r7, #20]
 8000d98:	f7ff ff90 	bl	8000cbc <NVIC_EncodePriority>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000da2:	4611      	mov	r1, r2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff5f 	bl	8000c68 <__NVIC_SetPriority>
}
 8000daa:	bf00      	nop
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff33 	bl	8000c2c <__NVIC_EnableIRQ>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ffa4 	bl	8000d24 <SysTick_Config>
 8000ddc:	4603      	mov	r3, r0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d101      	bne.n	8000dfa <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e069      	b.n	8000ece <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d102      	bne.n	8000e0c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff fc6e 	bl	80006e8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2202      	movs	r2, #2
 8000e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d002      	beq.n	8000e22 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	6819      	ldr	r1, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b2a      	ldr	r3, [pc, #168]	; (8000ed8 <HAL_DCMI_Init+0xf0>)
 8000e2e:	400b      	ands	r3, r1
 8000e30:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	6819      	ldr	r1, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8000e46:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	691b      	ldr	r3, [r3, #16]
 8000e4c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8000e52:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8000e5e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e64:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8000e6a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e70:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8000e76:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2b10      	cmp	r3, #16
 8000e86:	d112      	bne.n	8000eae <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7f1b      	ldrb	r3, [r3, #28]
 8000e8c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	7f5b      	ldrb	r3, [r3, #29]
 8000e92:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8000e94:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	7f9b      	ldrb	r3, [r3, #30]
 8000e9a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8000e9c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	7fdb      	ldrb	r3, [r3, #31]
 8000ea4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8000eaa:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8000eac:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	68da      	ldr	r2, [r3, #12]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f042 021e 	orr.w	r2, r2, #30
 8000ebc:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	ffe0f007 	.word	0xffe0f007

08000edc <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af02      	add	r7, sp, #8
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d101      	bne.n	8000ef8 <HAL_DCMI_Start_DMA+0x1c>
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	e0ab      	b.n	8001050 <HAL_DCMI_Start_DMA+0x174>
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2201      	movs	r2, #1
 8000efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2202      	movs	r2, #2
 8000f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f16:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0202 	bic.w	r2, r2, #2
 8000f26:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6819      	ldr	r1, [r3, #0]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	430a      	orrs	r2, r1
 8000f36:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f3c:	4a46      	ldr	r2, [pc, #280]	; (8001058 <HAL_DCMI_Start_DMA+0x17c>)
 8000f3e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f44:	4a45      	ldr	r2, [pc, #276]	; (800105c <HAL_DCMI_Start_DMA+0x180>)
 8000f46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2200      	movs	r2, #0
 8000f54:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2200      	movs	r2, #0
 8000f66:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f6e:	d219      	bcs.n	8000fa4 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3328      	adds	r3, #40	; 0x28
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	f000 fc84 	bl	800188c <HAL_DMA_Start_IT>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d055      	beq.n	8001036 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2240      	movs	r2, #64	; 0x40
 8000f8e:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2201      	movs	r2, #1
 8000f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e055      	b.n	8001050 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fa8:	4a2b      	ldr	r2, [pc, #172]	; (8001058 <HAL_DCMI_Start_DMA+0x17c>)
 8000faa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2201      	movs	r2, #1
 8000fb0:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8000fbe:	e009      	b.n	8000fd4 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc4:	085a      	lsrs	r2, r3, #1
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fce:	005a      	lsls	r2, r3, #1
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fdc:	d2f0      	bcs.n	8000fc0 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe2:	1e9a      	subs	r2, r3, #2
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	3328      	adds	r3, #40	; 0x28
 8001006:	4619      	mov	r1, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	f002 f9b7 	bl	8003384 <HAL_DMAEx_MultiBufferStart_IT>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00c      	beq.n	8001036 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2240      	movs	r2, #64	; 0x40
 8001020:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2201      	movs	r2, #1
 8001026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e00c      	b.n	8001050 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f042 0201 	orr.w	r2, r2, #1
 8001044:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	08001075 	.word	0x08001075
 800105c:	0800119b 	.word	0x0800119b

08001060 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001080:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001086:	2b00      	cmp	r3, #0
 8001088:	d043      	beq.n	8001112 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001096:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d118      	bne.n	80010d6 <DCMI_DMAXferCplt+0x62>
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d015      	beq.n	80010d6 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010bc:	00da      	lsls	r2, r3, #3
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	4413      	add	r3, r2
 80010c2:	2200      	movs	r2, #0
 80010c4:	4619      	mov	r1, r3
 80010c6:	f002 fcbb 	bl	8003a40 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ce:	1e5a      	subs	r2, r3, #1
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	639a      	str	r2, [r3, #56]	; 0x38
 80010d4:	e044      	b.n	8001160 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d13c      	bne.n	8001160 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010f8:	00da      	lsls	r2, r3, #3
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	4413      	add	r3, r2
 80010fe:	2201      	movs	r2, #1
 8001100:	4619      	mov	r1, r3
 8001102:	f002 fc9d 	bl	8003a40 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800110a:	1e5a      	subs	r2, r3, #1
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	639a      	str	r2, [r3, #56]	; 0x38
 8001110:	e026      	b.n	8001160 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	e017      	b.n	8001160 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d10f      	bne.n	8001160 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001144:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800114a:	0099      	lsls	r1, r3, #2
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	440a      	add	r2, r1
 8001156:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	429a      	cmp	r2, r3
 800116a:	d112      	bne.n	8001192 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	68da      	ldr	r2, [r3, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f042 0201 	orr.w	r2, r2, #1
 800117a:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b02      	cmp	r3, #2
 8001188:	d103      	bne.n	8001192 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b084      	sub	sp, #16
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a6:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d009      	beq.n	80011c6 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2201      	movs	r2, #1
 80011b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff ff4a 	bl	8001060 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80011dc:	f7ff fcdc 	bl	8000b98 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e316      	b.n	800181a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a66      	ldr	r2, [pc, #408]	; (800138c <HAL_DMA_Init+0x1b8>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d04a      	beq.n	800128c <HAL_DMA_Init+0xb8>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a65      	ldr	r2, [pc, #404]	; (8001390 <HAL_DMA_Init+0x1bc>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d045      	beq.n	800128c <HAL_DMA_Init+0xb8>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a63      	ldr	r2, [pc, #396]	; (8001394 <HAL_DMA_Init+0x1c0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d040      	beq.n	800128c <HAL_DMA_Init+0xb8>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a62      	ldr	r2, [pc, #392]	; (8001398 <HAL_DMA_Init+0x1c4>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d03b      	beq.n	800128c <HAL_DMA_Init+0xb8>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a60      	ldr	r2, [pc, #384]	; (800139c <HAL_DMA_Init+0x1c8>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d036      	beq.n	800128c <HAL_DMA_Init+0xb8>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a5f      	ldr	r2, [pc, #380]	; (80013a0 <HAL_DMA_Init+0x1cc>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d031      	beq.n	800128c <HAL_DMA_Init+0xb8>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a5d      	ldr	r2, [pc, #372]	; (80013a4 <HAL_DMA_Init+0x1d0>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d02c      	beq.n	800128c <HAL_DMA_Init+0xb8>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a5c      	ldr	r2, [pc, #368]	; (80013a8 <HAL_DMA_Init+0x1d4>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d027      	beq.n	800128c <HAL_DMA_Init+0xb8>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a5a      	ldr	r2, [pc, #360]	; (80013ac <HAL_DMA_Init+0x1d8>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d022      	beq.n	800128c <HAL_DMA_Init+0xb8>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a59      	ldr	r2, [pc, #356]	; (80013b0 <HAL_DMA_Init+0x1dc>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d01d      	beq.n	800128c <HAL_DMA_Init+0xb8>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a57      	ldr	r2, [pc, #348]	; (80013b4 <HAL_DMA_Init+0x1e0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d018      	beq.n	800128c <HAL_DMA_Init+0xb8>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a56      	ldr	r2, [pc, #344]	; (80013b8 <HAL_DMA_Init+0x1e4>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d013      	beq.n	800128c <HAL_DMA_Init+0xb8>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a54      	ldr	r2, [pc, #336]	; (80013bc <HAL_DMA_Init+0x1e8>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d00e      	beq.n	800128c <HAL_DMA_Init+0xb8>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a53      	ldr	r2, [pc, #332]	; (80013c0 <HAL_DMA_Init+0x1ec>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d009      	beq.n	800128c <HAL_DMA_Init+0xb8>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a51      	ldr	r2, [pc, #324]	; (80013c4 <HAL_DMA_Init+0x1f0>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d004      	beq.n	800128c <HAL_DMA_Init+0xb8>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a50      	ldr	r2, [pc, #320]	; (80013c8 <HAL_DMA_Init+0x1f4>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d101      	bne.n	8001290 <HAL_DMA_Init+0xbc>
 800128c:	2301      	movs	r3, #1
 800128e:	e000      	b.n	8001292 <HAL_DMA_Init+0xbe>
 8001290:	2300      	movs	r3, #0
 8001292:	2b00      	cmp	r3, #0
 8001294:	f000 813b 	beq.w	800150e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2202      	movs	r2, #2
 800129c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a37      	ldr	r2, [pc, #220]	; (800138c <HAL_DMA_Init+0x1b8>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d04a      	beq.n	8001348 <HAL_DMA_Init+0x174>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a36      	ldr	r2, [pc, #216]	; (8001390 <HAL_DMA_Init+0x1bc>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d045      	beq.n	8001348 <HAL_DMA_Init+0x174>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a34      	ldr	r2, [pc, #208]	; (8001394 <HAL_DMA_Init+0x1c0>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d040      	beq.n	8001348 <HAL_DMA_Init+0x174>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a33      	ldr	r2, [pc, #204]	; (8001398 <HAL_DMA_Init+0x1c4>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d03b      	beq.n	8001348 <HAL_DMA_Init+0x174>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a31      	ldr	r2, [pc, #196]	; (800139c <HAL_DMA_Init+0x1c8>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d036      	beq.n	8001348 <HAL_DMA_Init+0x174>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a30      	ldr	r2, [pc, #192]	; (80013a0 <HAL_DMA_Init+0x1cc>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d031      	beq.n	8001348 <HAL_DMA_Init+0x174>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a2e      	ldr	r2, [pc, #184]	; (80013a4 <HAL_DMA_Init+0x1d0>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d02c      	beq.n	8001348 <HAL_DMA_Init+0x174>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a2d      	ldr	r2, [pc, #180]	; (80013a8 <HAL_DMA_Init+0x1d4>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d027      	beq.n	8001348 <HAL_DMA_Init+0x174>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a2b      	ldr	r2, [pc, #172]	; (80013ac <HAL_DMA_Init+0x1d8>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d022      	beq.n	8001348 <HAL_DMA_Init+0x174>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a2a      	ldr	r2, [pc, #168]	; (80013b0 <HAL_DMA_Init+0x1dc>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d01d      	beq.n	8001348 <HAL_DMA_Init+0x174>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a28      	ldr	r2, [pc, #160]	; (80013b4 <HAL_DMA_Init+0x1e0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d018      	beq.n	8001348 <HAL_DMA_Init+0x174>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a27      	ldr	r2, [pc, #156]	; (80013b8 <HAL_DMA_Init+0x1e4>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d013      	beq.n	8001348 <HAL_DMA_Init+0x174>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a25      	ldr	r2, [pc, #148]	; (80013bc <HAL_DMA_Init+0x1e8>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d00e      	beq.n	8001348 <HAL_DMA_Init+0x174>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a24      	ldr	r2, [pc, #144]	; (80013c0 <HAL_DMA_Init+0x1ec>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d009      	beq.n	8001348 <HAL_DMA_Init+0x174>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a22      	ldr	r2, [pc, #136]	; (80013c4 <HAL_DMA_Init+0x1f0>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d004      	beq.n	8001348 <HAL_DMA_Init+0x174>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a21      	ldr	r2, [pc, #132]	; (80013c8 <HAL_DMA_Init+0x1f4>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d108      	bne.n	800135a <HAL_DMA_Init+0x186>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0201 	bic.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	e007      	b.n	800136a <HAL_DMA_Init+0x196>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0201 	bic.w	r2, r2, #1
 8001368:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800136a:	e02f      	b.n	80013cc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800136c:	f7ff fc14 	bl	8000b98 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b05      	cmp	r3, #5
 8001378:	d928      	bls.n	80013cc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2220      	movs	r2, #32
 800137e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2203      	movs	r2, #3
 8001384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e246      	b.n	800181a <HAL_DMA_Init+0x646>
 800138c:	40020010 	.word	0x40020010
 8001390:	40020028 	.word	0x40020028
 8001394:	40020040 	.word	0x40020040
 8001398:	40020058 	.word	0x40020058
 800139c:	40020070 	.word	0x40020070
 80013a0:	40020088 	.word	0x40020088
 80013a4:	400200a0 	.word	0x400200a0
 80013a8:	400200b8 	.word	0x400200b8
 80013ac:	40020410 	.word	0x40020410
 80013b0:	40020428 	.word	0x40020428
 80013b4:	40020440 	.word	0x40020440
 80013b8:	40020458 	.word	0x40020458
 80013bc:	40020470 	.word	0x40020470
 80013c0:	40020488 	.word	0x40020488
 80013c4:	400204a0 	.word	0x400204a0
 80013c8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1c8      	bne.n	800136c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	4b83      	ldr	r3, [pc, #524]	; (80015f4 <HAL_DMA_Init+0x420>)
 80013e6:	4013      	ands	r3, r2
 80013e8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80013f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800140a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	4313      	orrs	r3, r2
 8001416:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141c:	2b04      	cmp	r3, #4
 800141e:	d107      	bne.n	8001430 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	4313      	orrs	r3, r2
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4313      	orrs	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001430:	4b71      	ldr	r3, [pc, #452]	; (80015f8 <HAL_DMA_Init+0x424>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b71      	ldr	r3, [pc, #452]	; (80015fc <HAL_DMA_Init+0x428>)
 8001436:	4013      	ands	r3, r2
 8001438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800143c:	d328      	bcc.n	8001490 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b28      	cmp	r3, #40	; 0x28
 8001444:	d903      	bls.n	800144e <HAL_DMA_Init+0x27a>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b2e      	cmp	r3, #46	; 0x2e
 800144c:	d917      	bls.n	800147e <HAL_DMA_Init+0x2aa>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b3e      	cmp	r3, #62	; 0x3e
 8001454:	d903      	bls.n	800145e <HAL_DMA_Init+0x28a>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b42      	cmp	r3, #66	; 0x42
 800145c:	d90f      	bls.n	800147e <HAL_DMA_Init+0x2aa>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b46      	cmp	r3, #70	; 0x46
 8001464:	d903      	bls.n	800146e <HAL_DMA_Init+0x29a>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b48      	cmp	r3, #72	; 0x48
 800146c:	d907      	bls.n	800147e <HAL_DMA_Init+0x2aa>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b4e      	cmp	r3, #78	; 0x4e
 8001474:	d905      	bls.n	8001482 <HAL_DMA_Init+0x2ae>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b52      	cmp	r3, #82	; 0x52
 800147c:	d801      	bhi.n	8001482 <HAL_DMA_Init+0x2ae>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <HAL_DMA_Init+0x2b0>
 8001482:	2300      	movs	r3, #0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800148e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	f023 0307 	bic.w	r3, r3, #7
 80014a6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d117      	bne.n	80014ea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00e      	beq.n	80014ea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f001 fdcf 	bl	8003070 <DMA_CheckFifoParam>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d008      	beq.n	80014ea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2240      	movs	r2, #64	; 0x40
 80014dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e197      	b.n	800181a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f001 fd0a 	bl	8002f0c <DMA_CalcBaseAndBitshift>
 80014f8:	4603      	mov	r3, r0
 80014fa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001500:	f003 031f 	and.w	r3, r3, #31
 8001504:	223f      	movs	r2, #63	; 0x3f
 8001506:	409a      	lsls	r2, r3
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	e0cd      	b.n	80016aa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a3b      	ldr	r2, [pc, #236]	; (8001600 <HAL_DMA_Init+0x42c>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d022      	beq.n	800155e <HAL_DMA_Init+0x38a>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a39      	ldr	r2, [pc, #228]	; (8001604 <HAL_DMA_Init+0x430>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d01d      	beq.n	800155e <HAL_DMA_Init+0x38a>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a38      	ldr	r2, [pc, #224]	; (8001608 <HAL_DMA_Init+0x434>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d018      	beq.n	800155e <HAL_DMA_Init+0x38a>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a36      	ldr	r2, [pc, #216]	; (800160c <HAL_DMA_Init+0x438>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d013      	beq.n	800155e <HAL_DMA_Init+0x38a>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a35      	ldr	r2, [pc, #212]	; (8001610 <HAL_DMA_Init+0x43c>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d00e      	beq.n	800155e <HAL_DMA_Init+0x38a>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a33      	ldr	r2, [pc, #204]	; (8001614 <HAL_DMA_Init+0x440>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d009      	beq.n	800155e <HAL_DMA_Init+0x38a>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a32      	ldr	r2, [pc, #200]	; (8001618 <HAL_DMA_Init+0x444>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d004      	beq.n	800155e <HAL_DMA_Init+0x38a>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a30      	ldr	r2, [pc, #192]	; (800161c <HAL_DMA_Init+0x448>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d101      	bne.n	8001562 <HAL_DMA_Init+0x38e>
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <HAL_DMA_Init+0x390>
 8001562:	2300      	movs	r3, #0
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 8097 	beq.w	8001698 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a24      	ldr	r2, [pc, #144]	; (8001600 <HAL_DMA_Init+0x42c>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d021      	beq.n	80015b8 <HAL_DMA_Init+0x3e4>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a22      	ldr	r2, [pc, #136]	; (8001604 <HAL_DMA_Init+0x430>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d01c      	beq.n	80015b8 <HAL_DMA_Init+0x3e4>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a21      	ldr	r2, [pc, #132]	; (8001608 <HAL_DMA_Init+0x434>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d017      	beq.n	80015b8 <HAL_DMA_Init+0x3e4>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a1f      	ldr	r2, [pc, #124]	; (800160c <HAL_DMA_Init+0x438>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d012      	beq.n	80015b8 <HAL_DMA_Init+0x3e4>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1e      	ldr	r2, [pc, #120]	; (8001610 <HAL_DMA_Init+0x43c>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d00d      	beq.n	80015b8 <HAL_DMA_Init+0x3e4>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a1c      	ldr	r2, [pc, #112]	; (8001614 <HAL_DMA_Init+0x440>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d008      	beq.n	80015b8 <HAL_DMA_Init+0x3e4>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a1b      	ldr	r2, [pc, #108]	; (8001618 <HAL_DMA_Init+0x444>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d003      	beq.n	80015b8 <HAL_DMA_Init+0x3e4>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a19      	ldr	r2, [pc, #100]	; (800161c <HAL_DMA_Init+0x448>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2202      	movs	r2, #2
 80015be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_DMA_Init+0x44c>)
 80015d6:	4013      	ands	r3, r2
 80015d8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b40      	cmp	r3, #64	; 0x40
 80015e0:	d020      	beq.n	8001624 <HAL_DMA_Init+0x450>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b80      	cmp	r3, #128	; 0x80
 80015e8:	d102      	bne.n	80015f0 <HAL_DMA_Init+0x41c>
 80015ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015ee:	e01a      	b.n	8001626 <HAL_DMA_Init+0x452>
 80015f0:	2300      	movs	r3, #0
 80015f2:	e018      	b.n	8001626 <HAL_DMA_Init+0x452>
 80015f4:	fe10803f 	.word	0xfe10803f
 80015f8:	5c001000 	.word	0x5c001000
 80015fc:	ffff0000 	.word	0xffff0000
 8001600:	58025408 	.word	0x58025408
 8001604:	5802541c 	.word	0x5802541c
 8001608:	58025430 	.word	0x58025430
 800160c:	58025444 	.word	0x58025444
 8001610:	58025458 	.word	0x58025458
 8001614:	5802546c 	.word	0x5802546c
 8001618:	58025480 	.word	0x58025480
 800161c:	58025494 	.word	0x58025494
 8001620:	fffe000f 	.word	0xfffe000f
 8001624:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	68d2      	ldr	r2, [r2, #12]
 800162a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800162c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001634:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800163c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001644:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800164c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001654:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	4313      	orrs	r3, r2
 800165a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4b6e      	ldr	r3, [pc, #440]	; (8001824 <HAL_DMA_Init+0x650>)
 800166c:	4413      	add	r3, r2
 800166e:	4a6e      	ldr	r2, [pc, #440]	; (8001828 <HAL_DMA_Init+0x654>)
 8001670:	fba2 2303 	umull	r2, r3, r2, r3
 8001674:	091b      	lsrs	r3, r3, #4
 8001676:	009a      	lsls	r2, r3, #2
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f001 fc45 	bl	8002f0c <DMA_CalcBaseAndBitshift>
 8001682:	4603      	mov	r3, r0
 8001684:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168a:	f003 031f 	and.w	r3, r3, #31
 800168e:	2201      	movs	r2, #1
 8001690:	409a      	lsls	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	e008      	b.n	80016aa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2240      	movs	r2, #64	; 0x40
 800169c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2203      	movs	r2, #3
 80016a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e0b7      	b.n	800181a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a5f      	ldr	r2, [pc, #380]	; (800182c <HAL_DMA_Init+0x658>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d072      	beq.n	800179a <HAL_DMA_Init+0x5c6>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a5d      	ldr	r2, [pc, #372]	; (8001830 <HAL_DMA_Init+0x65c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d06d      	beq.n	800179a <HAL_DMA_Init+0x5c6>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a5c      	ldr	r2, [pc, #368]	; (8001834 <HAL_DMA_Init+0x660>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d068      	beq.n	800179a <HAL_DMA_Init+0x5c6>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a5a      	ldr	r2, [pc, #360]	; (8001838 <HAL_DMA_Init+0x664>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d063      	beq.n	800179a <HAL_DMA_Init+0x5c6>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a59      	ldr	r2, [pc, #356]	; (800183c <HAL_DMA_Init+0x668>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d05e      	beq.n	800179a <HAL_DMA_Init+0x5c6>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a57      	ldr	r2, [pc, #348]	; (8001840 <HAL_DMA_Init+0x66c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d059      	beq.n	800179a <HAL_DMA_Init+0x5c6>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a56      	ldr	r2, [pc, #344]	; (8001844 <HAL_DMA_Init+0x670>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d054      	beq.n	800179a <HAL_DMA_Init+0x5c6>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a54      	ldr	r2, [pc, #336]	; (8001848 <HAL_DMA_Init+0x674>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d04f      	beq.n	800179a <HAL_DMA_Init+0x5c6>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a53      	ldr	r2, [pc, #332]	; (800184c <HAL_DMA_Init+0x678>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d04a      	beq.n	800179a <HAL_DMA_Init+0x5c6>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a51      	ldr	r2, [pc, #324]	; (8001850 <HAL_DMA_Init+0x67c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d045      	beq.n	800179a <HAL_DMA_Init+0x5c6>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a50      	ldr	r2, [pc, #320]	; (8001854 <HAL_DMA_Init+0x680>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d040      	beq.n	800179a <HAL_DMA_Init+0x5c6>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a4e      	ldr	r2, [pc, #312]	; (8001858 <HAL_DMA_Init+0x684>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d03b      	beq.n	800179a <HAL_DMA_Init+0x5c6>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a4d      	ldr	r2, [pc, #308]	; (800185c <HAL_DMA_Init+0x688>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d036      	beq.n	800179a <HAL_DMA_Init+0x5c6>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a4b      	ldr	r2, [pc, #300]	; (8001860 <HAL_DMA_Init+0x68c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d031      	beq.n	800179a <HAL_DMA_Init+0x5c6>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a4a      	ldr	r2, [pc, #296]	; (8001864 <HAL_DMA_Init+0x690>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d02c      	beq.n	800179a <HAL_DMA_Init+0x5c6>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a48      	ldr	r2, [pc, #288]	; (8001868 <HAL_DMA_Init+0x694>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d027      	beq.n	800179a <HAL_DMA_Init+0x5c6>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a47      	ldr	r2, [pc, #284]	; (800186c <HAL_DMA_Init+0x698>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d022      	beq.n	800179a <HAL_DMA_Init+0x5c6>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a45      	ldr	r2, [pc, #276]	; (8001870 <HAL_DMA_Init+0x69c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d01d      	beq.n	800179a <HAL_DMA_Init+0x5c6>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a44      	ldr	r2, [pc, #272]	; (8001874 <HAL_DMA_Init+0x6a0>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d018      	beq.n	800179a <HAL_DMA_Init+0x5c6>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a42      	ldr	r2, [pc, #264]	; (8001878 <HAL_DMA_Init+0x6a4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d013      	beq.n	800179a <HAL_DMA_Init+0x5c6>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a41      	ldr	r2, [pc, #260]	; (800187c <HAL_DMA_Init+0x6a8>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d00e      	beq.n	800179a <HAL_DMA_Init+0x5c6>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a3f      	ldr	r2, [pc, #252]	; (8001880 <HAL_DMA_Init+0x6ac>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d009      	beq.n	800179a <HAL_DMA_Init+0x5c6>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a3e      	ldr	r2, [pc, #248]	; (8001884 <HAL_DMA_Init+0x6b0>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d004      	beq.n	800179a <HAL_DMA_Init+0x5c6>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a3c      	ldr	r2, [pc, #240]	; (8001888 <HAL_DMA_Init+0x6b4>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d101      	bne.n	800179e <HAL_DMA_Init+0x5ca>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <HAL_DMA_Init+0x5cc>
 800179e:	2300      	movs	r3, #0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d032      	beq.n	800180a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f001 fcdf 	bl	8003168 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b80      	cmp	r3, #128	; 0x80
 80017b0:	d102      	bne.n	80017b8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80017cc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d010      	beq.n	80017f8 <HAL_DMA_Init+0x624>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d80c      	bhi.n	80017f8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f001 fd5c 	bl	800329c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	e008      	b.n	800180a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	a7fdabf8 	.word	0xa7fdabf8
 8001828:	cccccccd 	.word	0xcccccccd
 800182c:	40020010 	.word	0x40020010
 8001830:	40020028 	.word	0x40020028
 8001834:	40020040 	.word	0x40020040
 8001838:	40020058 	.word	0x40020058
 800183c:	40020070 	.word	0x40020070
 8001840:	40020088 	.word	0x40020088
 8001844:	400200a0 	.word	0x400200a0
 8001848:	400200b8 	.word	0x400200b8
 800184c:	40020410 	.word	0x40020410
 8001850:	40020428 	.word	0x40020428
 8001854:	40020440 	.word	0x40020440
 8001858:	40020458 	.word	0x40020458
 800185c:	40020470 	.word	0x40020470
 8001860:	40020488 	.word	0x40020488
 8001864:	400204a0 	.word	0x400204a0
 8001868:	400204b8 	.word	0x400204b8
 800186c:	58025408 	.word	0x58025408
 8001870:	5802541c 	.word	0x5802541c
 8001874:	58025430 	.word	0x58025430
 8001878:	58025444 	.word	0x58025444
 800187c:	58025458 	.word	0x58025458
 8001880:	5802546c 	.word	0x5802546c
 8001884:	58025480 	.word	0x58025480
 8001888:	58025494 	.word	0x58025494

0800188c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
 8001898:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e226      	b.n	8001cf6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_DMA_Start_IT+0x2a>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e21f      	b.n	8001cf6 <HAL_DMA_Start_IT+0x46a>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	f040 820a 	bne.w	8001ce0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2202      	movs	r2, #2
 80018d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a68      	ldr	r2, [pc, #416]	; (8001a80 <HAL_DMA_Start_IT+0x1f4>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d04a      	beq.n	800197a <HAL_DMA_Start_IT+0xee>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a66      	ldr	r2, [pc, #408]	; (8001a84 <HAL_DMA_Start_IT+0x1f8>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d045      	beq.n	800197a <HAL_DMA_Start_IT+0xee>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a65      	ldr	r2, [pc, #404]	; (8001a88 <HAL_DMA_Start_IT+0x1fc>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d040      	beq.n	800197a <HAL_DMA_Start_IT+0xee>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a63      	ldr	r2, [pc, #396]	; (8001a8c <HAL_DMA_Start_IT+0x200>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d03b      	beq.n	800197a <HAL_DMA_Start_IT+0xee>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a62      	ldr	r2, [pc, #392]	; (8001a90 <HAL_DMA_Start_IT+0x204>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d036      	beq.n	800197a <HAL_DMA_Start_IT+0xee>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a60      	ldr	r2, [pc, #384]	; (8001a94 <HAL_DMA_Start_IT+0x208>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d031      	beq.n	800197a <HAL_DMA_Start_IT+0xee>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a5f      	ldr	r2, [pc, #380]	; (8001a98 <HAL_DMA_Start_IT+0x20c>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d02c      	beq.n	800197a <HAL_DMA_Start_IT+0xee>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a5d      	ldr	r2, [pc, #372]	; (8001a9c <HAL_DMA_Start_IT+0x210>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d027      	beq.n	800197a <HAL_DMA_Start_IT+0xee>
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a5c      	ldr	r2, [pc, #368]	; (8001aa0 <HAL_DMA_Start_IT+0x214>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d022      	beq.n	800197a <HAL_DMA_Start_IT+0xee>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a5a      	ldr	r2, [pc, #360]	; (8001aa4 <HAL_DMA_Start_IT+0x218>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d01d      	beq.n	800197a <HAL_DMA_Start_IT+0xee>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a59      	ldr	r2, [pc, #356]	; (8001aa8 <HAL_DMA_Start_IT+0x21c>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d018      	beq.n	800197a <HAL_DMA_Start_IT+0xee>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a57      	ldr	r2, [pc, #348]	; (8001aac <HAL_DMA_Start_IT+0x220>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d013      	beq.n	800197a <HAL_DMA_Start_IT+0xee>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a56      	ldr	r2, [pc, #344]	; (8001ab0 <HAL_DMA_Start_IT+0x224>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d00e      	beq.n	800197a <HAL_DMA_Start_IT+0xee>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a54      	ldr	r2, [pc, #336]	; (8001ab4 <HAL_DMA_Start_IT+0x228>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d009      	beq.n	800197a <HAL_DMA_Start_IT+0xee>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a53      	ldr	r2, [pc, #332]	; (8001ab8 <HAL_DMA_Start_IT+0x22c>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d004      	beq.n	800197a <HAL_DMA_Start_IT+0xee>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a51      	ldr	r2, [pc, #324]	; (8001abc <HAL_DMA_Start_IT+0x230>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d108      	bne.n	800198c <HAL_DMA_Start_IT+0x100>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0201 	bic.w	r2, r2, #1
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	e007      	b.n	800199c <HAL_DMA_Start_IT+0x110>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0201 	bic.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f001 f906 	bl	8002bb4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a34      	ldr	r2, [pc, #208]	; (8001a80 <HAL_DMA_Start_IT+0x1f4>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d04a      	beq.n	8001a48 <HAL_DMA_Start_IT+0x1bc>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a33      	ldr	r2, [pc, #204]	; (8001a84 <HAL_DMA_Start_IT+0x1f8>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d045      	beq.n	8001a48 <HAL_DMA_Start_IT+0x1bc>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a31      	ldr	r2, [pc, #196]	; (8001a88 <HAL_DMA_Start_IT+0x1fc>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d040      	beq.n	8001a48 <HAL_DMA_Start_IT+0x1bc>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a30      	ldr	r2, [pc, #192]	; (8001a8c <HAL_DMA_Start_IT+0x200>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d03b      	beq.n	8001a48 <HAL_DMA_Start_IT+0x1bc>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a2e      	ldr	r2, [pc, #184]	; (8001a90 <HAL_DMA_Start_IT+0x204>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d036      	beq.n	8001a48 <HAL_DMA_Start_IT+0x1bc>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a2d      	ldr	r2, [pc, #180]	; (8001a94 <HAL_DMA_Start_IT+0x208>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d031      	beq.n	8001a48 <HAL_DMA_Start_IT+0x1bc>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a2b      	ldr	r2, [pc, #172]	; (8001a98 <HAL_DMA_Start_IT+0x20c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d02c      	beq.n	8001a48 <HAL_DMA_Start_IT+0x1bc>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a2a      	ldr	r2, [pc, #168]	; (8001a9c <HAL_DMA_Start_IT+0x210>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d027      	beq.n	8001a48 <HAL_DMA_Start_IT+0x1bc>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a28      	ldr	r2, [pc, #160]	; (8001aa0 <HAL_DMA_Start_IT+0x214>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d022      	beq.n	8001a48 <HAL_DMA_Start_IT+0x1bc>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a27      	ldr	r2, [pc, #156]	; (8001aa4 <HAL_DMA_Start_IT+0x218>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d01d      	beq.n	8001a48 <HAL_DMA_Start_IT+0x1bc>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a25      	ldr	r2, [pc, #148]	; (8001aa8 <HAL_DMA_Start_IT+0x21c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d018      	beq.n	8001a48 <HAL_DMA_Start_IT+0x1bc>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a24      	ldr	r2, [pc, #144]	; (8001aac <HAL_DMA_Start_IT+0x220>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d013      	beq.n	8001a48 <HAL_DMA_Start_IT+0x1bc>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a22      	ldr	r2, [pc, #136]	; (8001ab0 <HAL_DMA_Start_IT+0x224>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d00e      	beq.n	8001a48 <HAL_DMA_Start_IT+0x1bc>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a21      	ldr	r2, [pc, #132]	; (8001ab4 <HAL_DMA_Start_IT+0x228>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d009      	beq.n	8001a48 <HAL_DMA_Start_IT+0x1bc>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a1f      	ldr	r2, [pc, #124]	; (8001ab8 <HAL_DMA_Start_IT+0x22c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d004      	beq.n	8001a48 <HAL_DMA_Start_IT+0x1bc>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a1e      	ldr	r2, [pc, #120]	; (8001abc <HAL_DMA_Start_IT+0x230>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d101      	bne.n	8001a4c <HAL_DMA_Start_IT+0x1c0>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <HAL_DMA_Start_IT+0x1c2>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d036      	beq.n	8001ac0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 021e 	bic.w	r2, r3, #30
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f042 0216 	orr.w	r2, r2, #22
 8001a64:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d03e      	beq.n	8001aec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0208 	orr.w	r2, r2, #8
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	e035      	b.n	8001aec <HAL_DMA_Start_IT+0x260>
 8001a80:	40020010 	.word	0x40020010
 8001a84:	40020028 	.word	0x40020028
 8001a88:	40020040 	.word	0x40020040
 8001a8c:	40020058 	.word	0x40020058
 8001a90:	40020070 	.word	0x40020070
 8001a94:	40020088 	.word	0x40020088
 8001a98:	400200a0 	.word	0x400200a0
 8001a9c:	400200b8 	.word	0x400200b8
 8001aa0:	40020410 	.word	0x40020410
 8001aa4:	40020428 	.word	0x40020428
 8001aa8:	40020440 	.word	0x40020440
 8001aac:	40020458 	.word	0x40020458
 8001ab0:	40020470 	.word	0x40020470
 8001ab4:	40020488 	.word	0x40020488
 8001ab8:	400204a0 	.word	0x400204a0
 8001abc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 020e 	bic.w	r2, r3, #14
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 020a 	orr.w	r2, r2, #10
 8001ad2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d007      	beq.n	8001aec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0204 	orr.w	r2, r2, #4
 8001aea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a83      	ldr	r2, [pc, #524]	; (8001d00 <HAL_DMA_Start_IT+0x474>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d072      	beq.n	8001bdc <HAL_DMA_Start_IT+0x350>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a82      	ldr	r2, [pc, #520]	; (8001d04 <HAL_DMA_Start_IT+0x478>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d06d      	beq.n	8001bdc <HAL_DMA_Start_IT+0x350>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a80      	ldr	r2, [pc, #512]	; (8001d08 <HAL_DMA_Start_IT+0x47c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d068      	beq.n	8001bdc <HAL_DMA_Start_IT+0x350>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a7f      	ldr	r2, [pc, #508]	; (8001d0c <HAL_DMA_Start_IT+0x480>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d063      	beq.n	8001bdc <HAL_DMA_Start_IT+0x350>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a7d      	ldr	r2, [pc, #500]	; (8001d10 <HAL_DMA_Start_IT+0x484>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d05e      	beq.n	8001bdc <HAL_DMA_Start_IT+0x350>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a7c      	ldr	r2, [pc, #496]	; (8001d14 <HAL_DMA_Start_IT+0x488>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d059      	beq.n	8001bdc <HAL_DMA_Start_IT+0x350>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a7a      	ldr	r2, [pc, #488]	; (8001d18 <HAL_DMA_Start_IT+0x48c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d054      	beq.n	8001bdc <HAL_DMA_Start_IT+0x350>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a79      	ldr	r2, [pc, #484]	; (8001d1c <HAL_DMA_Start_IT+0x490>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d04f      	beq.n	8001bdc <HAL_DMA_Start_IT+0x350>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a77      	ldr	r2, [pc, #476]	; (8001d20 <HAL_DMA_Start_IT+0x494>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d04a      	beq.n	8001bdc <HAL_DMA_Start_IT+0x350>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a76      	ldr	r2, [pc, #472]	; (8001d24 <HAL_DMA_Start_IT+0x498>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d045      	beq.n	8001bdc <HAL_DMA_Start_IT+0x350>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a74      	ldr	r2, [pc, #464]	; (8001d28 <HAL_DMA_Start_IT+0x49c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d040      	beq.n	8001bdc <HAL_DMA_Start_IT+0x350>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a73      	ldr	r2, [pc, #460]	; (8001d2c <HAL_DMA_Start_IT+0x4a0>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d03b      	beq.n	8001bdc <HAL_DMA_Start_IT+0x350>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a71      	ldr	r2, [pc, #452]	; (8001d30 <HAL_DMA_Start_IT+0x4a4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d036      	beq.n	8001bdc <HAL_DMA_Start_IT+0x350>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a70      	ldr	r2, [pc, #448]	; (8001d34 <HAL_DMA_Start_IT+0x4a8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d031      	beq.n	8001bdc <HAL_DMA_Start_IT+0x350>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a6e      	ldr	r2, [pc, #440]	; (8001d38 <HAL_DMA_Start_IT+0x4ac>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d02c      	beq.n	8001bdc <HAL_DMA_Start_IT+0x350>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a6d      	ldr	r2, [pc, #436]	; (8001d3c <HAL_DMA_Start_IT+0x4b0>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d027      	beq.n	8001bdc <HAL_DMA_Start_IT+0x350>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a6b      	ldr	r2, [pc, #428]	; (8001d40 <HAL_DMA_Start_IT+0x4b4>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d022      	beq.n	8001bdc <HAL_DMA_Start_IT+0x350>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a6a      	ldr	r2, [pc, #424]	; (8001d44 <HAL_DMA_Start_IT+0x4b8>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d01d      	beq.n	8001bdc <HAL_DMA_Start_IT+0x350>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a68      	ldr	r2, [pc, #416]	; (8001d48 <HAL_DMA_Start_IT+0x4bc>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d018      	beq.n	8001bdc <HAL_DMA_Start_IT+0x350>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a67      	ldr	r2, [pc, #412]	; (8001d4c <HAL_DMA_Start_IT+0x4c0>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d013      	beq.n	8001bdc <HAL_DMA_Start_IT+0x350>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a65      	ldr	r2, [pc, #404]	; (8001d50 <HAL_DMA_Start_IT+0x4c4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00e      	beq.n	8001bdc <HAL_DMA_Start_IT+0x350>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a64      	ldr	r2, [pc, #400]	; (8001d54 <HAL_DMA_Start_IT+0x4c8>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d009      	beq.n	8001bdc <HAL_DMA_Start_IT+0x350>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a62      	ldr	r2, [pc, #392]	; (8001d58 <HAL_DMA_Start_IT+0x4cc>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d004      	beq.n	8001bdc <HAL_DMA_Start_IT+0x350>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a61      	ldr	r2, [pc, #388]	; (8001d5c <HAL_DMA_Start_IT+0x4d0>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d101      	bne.n	8001be0 <HAL_DMA_Start_IT+0x354>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <HAL_DMA_Start_IT+0x356>
 8001be0:	2300      	movs	r3, #0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d01a      	beq.n	8001c1c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d007      	beq.n	8001c04 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c02:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d007      	beq.n	8001c1c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c1a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a37      	ldr	r2, [pc, #220]	; (8001d00 <HAL_DMA_Start_IT+0x474>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d04a      	beq.n	8001cbc <HAL_DMA_Start_IT+0x430>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a36      	ldr	r2, [pc, #216]	; (8001d04 <HAL_DMA_Start_IT+0x478>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d045      	beq.n	8001cbc <HAL_DMA_Start_IT+0x430>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a34      	ldr	r2, [pc, #208]	; (8001d08 <HAL_DMA_Start_IT+0x47c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d040      	beq.n	8001cbc <HAL_DMA_Start_IT+0x430>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a33      	ldr	r2, [pc, #204]	; (8001d0c <HAL_DMA_Start_IT+0x480>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d03b      	beq.n	8001cbc <HAL_DMA_Start_IT+0x430>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a31      	ldr	r2, [pc, #196]	; (8001d10 <HAL_DMA_Start_IT+0x484>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d036      	beq.n	8001cbc <HAL_DMA_Start_IT+0x430>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a30      	ldr	r2, [pc, #192]	; (8001d14 <HAL_DMA_Start_IT+0x488>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d031      	beq.n	8001cbc <HAL_DMA_Start_IT+0x430>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a2e      	ldr	r2, [pc, #184]	; (8001d18 <HAL_DMA_Start_IT+0x48c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d02c      	beq.n	8001cbc <HAL_DMA_Start_IT+0x430>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a2d      	ldr	r2, [pc, #180]	; (8001d1c <HAL_DMA_Start_IT+0x490>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d027      	beq.n	8001cbc <HAL_DMA_Start_IT+0x430>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a2b      	ldr	r2, [pc, #172]	; (8001d20 <HAL_DMA_Start_IT+0x494>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d022      	beq.n	8001cbc <HAL_DMA_Start_IT+0x430>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a2a      	ldr	r2, [pc, #168]	; (8001d24 <HAL_DMA_Start_IT+0x498>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d01d      	beq.n	8001cbc <HAL_DMA_Start_IT+0x430>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a28      	ldr	r2, [pc, #160]	; (8001d28 <HAL_DMA_Start_IT+0x49c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d018      	beq.n	8001cbc <HAL_DMA_Start_IT+0x430>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a27      	ldr	r2, [pc, #156]	; (8001d2c <HAL_DMA_Start_IT+0x4a0>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d013      	beq.n	8001cbc <HAL_DMA_Start_IT+0x430>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a25      	ldr	r2, [pc, #148]	; (8001d30 <HAL_DMA_Start_IT+0x4a4>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d00e      	beq.n	8001cbc <HAL_DMA_Start_IT+0x430>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a24      	ldr	r2, [pc, #144]	; (8001d34 <HAL_DMA_Start_IT+0x4a8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d009      	beq.n	8001cbc <HAL_DMA_Start_IT+0x430>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a22      	ldr	r2, [pc, #136]	; (8001d38 <HAL_DMA_Start_IT+0x4ac>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d004      	beq.n	8001cbc <HAL_DMA_Start_IT+0x430>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a21      	ldr	r2, [pc, #132]	; (8001d3c <HAL_DMA_Start_IT+0x4b0>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d108      	bne.n	8001cce <HAL_DMA_Start_IT+0x442>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	e012      	b.n	8001cf4 <HAL_DMA_Start_IT+0x468>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f042 0201 	orr.w	r2, r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	e009      	b.n	8001cf4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ce6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40020010 	.word	0x40020010
 8001d04:	40020028 	.word	0x40020028
 8001d08:	40020040 	.word	0x40020040
 8001d0c:	40020058 	.word	0x40020058
 8001d10:	40020070 	.word	0x40020070
 8001d14:	40020088 	.word	0x40020088
 8001d18:	400200a0 	.word	0x400200a0
 8001d1c:	400200b8 	.word	0x400200b8
 8001d20:	40020410 	.word	0x40020410
 8001d24:	40020428 	.word	0x40020428
 8001d28:	40020440 	.word	0x40020440
 8001d2c:	40020458 	.word	0x40020458
 8001d30:	40020470 	.word	0x40020470
 8001d34:	40020488 	.word	0x40020488
 8001d38:	400204a0 	.word	0x400204a0
 8001d3c:	400204b8 	.word	0x400204b8
 8001d40:	58025408 	.word	0x58025408
 8001d44:	5802541c 	.word	0x5802541c
 8001d48:	58025430 	.word	0x58025430
 8001d4c:	58025444 	.word	0x58025444
 8001d50:	58025458 	.word	0x58025458
 8001d54:	5802546c 	.word	0x5802546c
 8001d58:	58025480 	.word	0x58025480
 8001d5c:	58025494 	.word	0x58025494

08001d60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	; 0x28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d6c:	4b67      	ldr	r3, [pc, #412]	; (8001f0c <HAL_DMA_IRQHandler+0x1ac>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a67      	ldr	r2, [pc, #412]	; (8001f10 <HAL_DMA_IRQHandler+0x1b0>)
 8001d72:	fba2 2303 	umull	r2, r3, r2, r3
 8001d76:	0a9b      	lsrs	r3, r3, #10
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d84:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a5f      	ldr	r2, [pc, #380]	; (8001f14 <HAL_DMA_IRQHandler+0x1b4>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d04a      	beq.n	8001e32 <HAL_DMA_IRQHandler+0xd2>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a5d      	ldr	r2, [pc, #372]	; (8001f18 <HAL_DMA_IRQHandler+0x1b8>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d045      	beq.n	8001e32 <HAL_DMA_IRQHandler+0xd2>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a5c      	ldr	r2, [pc, #368]	; (8001f1c <HAL_DMA_IRQHandler+0x1bc>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d040      	beq.n	8001e32 <HAL_DMA_IRQHandler+0xd2>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a5a      	ldr	r2, [pc, #360]	; (8001f20 <HAL_DMA_IRQHandler+0x1c0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d03b      	beq.n	8001e32 <HAL_DMA_IRQHandler+0xd2>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a59      	ldr	r2, [pc, #356]	; (8001f24 <HAL_DMA_IRQHandler+0x1c4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d036      	beq.n	8001e32 <HAL_DMA_IRQHandler+0xd2>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a57      	ldr	r2, [pc, #348]	; (8001f28 <HAL_DMA_IRQHandler+0x1c8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d031      	beq.n	8001e32 <HAL_DMA_IRQHandler+0xd2>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a56      	ldr	r2, [pc, #344]	; (8001f2c <HAL_DMA_IRQHandler+0x1cc>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d02c      	beq.n	8001e32 <HAL_DMA_IRQHandler+0xd2>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a54      	ldr	r2, [pc, #336]	; (8001f30 <HAL_DMA_IRQHandler+0x1d0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d027      	beq.n	8001e32 <HAL_DMA_IRQHandler+0xd2>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a53      	ldr	r2, [pc, #332]	; (8001f34 <HAL_DMA_IRQHandler+0x1d4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d022      	beq.n	8001e32 <HAL_DMA_IRQHandler+0xd2>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a51      	ldr	r2, [pc, #324]	; (8001f38 <HAL_DMA_IRQHandler+0x1d8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d01d      	beq.n	8001e32 <HAL_DMA_IRQHandler+0xd2>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a50      	ldr	r2, [pc, #320]	; (8001f3c <HAL_DMA_IRQHandler+0x1dc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d018      	beq.n	8001e32 <HAL_DMA_IRQHandler+0xd2>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a4e      	ldr	r2, [pc, #312]	; (8001f40 <HAL_DMA_IRQHandler+0x1e0>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <HAL_DMA_IRQHandler+0xd2>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a4d      	ldr	r2, [pc, #308]	; (8001f44 <HAL_DMA_IRQHandler+0x1e4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d00e      	beq.n	8001e32 <HAL_DMA_IRQHandler+0xd2>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a4b      	ldr	r2, [pc, #300]	; (8001f48 <HAL_DMA_IRQHandler+0x1e8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d009      	beq.n	8001e32 <HAL_DMA_IRQHandler+0xd2>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a4a      	ldr	r2, [pc, #296]	; (8001f4c <HAL_DMA_IRQHandler+0x1ec>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d004      	beq.n	8001e32 <HAL_DMA_IRQHandler+0xd2>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a48      	ldr	r2, [pc, #288]	; (8001f50 <HAL_DMA_IRQHandler+0x1f0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d101      	bne.n	8001e36 <HAL_DMA_IRQHandler+0xd6>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_DMA_IRQHandler+0xd8>
 8001e36:	2300      	movs	r3, #0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 842b 	beq.w	8002694 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	2208      	movs	r2, #8
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 80a2 	beq.w	8001f98 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a2e      	ldr	r2, [pc, #184]	; (8001f14 <HAL_DMA_IRQHandler+0x1b4>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d04a      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x194>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a2d      	ldr	r2, [pc, #180]	; (8001f18 <HAL_DMA_IRQHandler+0x1b8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d045      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x194>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a2b      	ldr	r2, [pc, #172]	; (8001f1c <HAL_DMA_IRQHandler+0x1bc>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d040      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x194>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a2a      	ldr	r2, [pc, #168]	; (8001f20 <HAL_DMA_IRQHandler+0x1c0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d03b      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x194>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a28      	ldr	r2, [pc, #160]	; (8001f24 <HAL_DMA_IRQHandler+0x1c4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d036      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x194>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a27      	ldr	r2, [pc, #156]	; (8001f28 <HAL_DMA_IRQHandler+0x1c8>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d031      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x194>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a25      	ldr	r2, [pc, #148]	; (8001f2c <HAL_DMA_IRQHandler+0x1cc>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d02c      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x194>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a24      	ldr	r2, [pc, #144]	; (8001f30 <HAL_DMA_IRQHandler+0x1d0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d027      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x194>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a22      	ldr	r2, [pc, #136]	; (8001f34 <HAL_DMA_IRQHandler+0x1d4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d022      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x194>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a21      	ldr	r2, [pc, #132]	; (8001f38 <HAL_DMA_IRQHandler+0x1d8>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d01d      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x194>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a1f      	ldr	r2, [pc, #124]	; (8001f3c <HAL_DMA_IRQHandler+0x1dc>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d018      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x194>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a1e      	ldr	r2, [pc, #120]	; (8001f40 <HAL_DMA_IRQHandler+0x1e0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d013      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x194>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a1c      	ldr	r2, [pc, #112]	; (8001f44 <HAL_DMA_IRQHandler+0x1e4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d00e      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x194>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a1b      	ldr	r2, [pc, #108]	; (8001f48 <HAL_DMA_IRQHandler+0x1e8>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d009      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x194>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a19      	ldr	r2, [pc, #100]	; (8001f4c <HAL_DMA_IRQHandler+0x1ec>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d004      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x194>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a18      	ldr	r2, [pc, #96]	; (8001f50 <HAL_DMA_IRQHandler+0x1f0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d12f      	bne.n	8001f54 <HAL_DMA_IRQHandler+0x1f4>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	bf14      	ite	ne
 8001f02:	2301      	movne	r3, #1
 8001f04:	2300      	moveq	r3, #0
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	e02e      	b.n	8001f68 <HAL_DMA_IRQHandler+0x208>
 8001f0a:	bf00      	nop
 8001f0c:	24000000 	.word	0x24000000
 8001f10:	1b4e81b5 	.word	0x1b4e81b5
 8001f14:	40020010 	.word	0x40020010
 8001f18:	40020028 	.word	0x40020028
 8001f1c:	40020040 	.word	0x40020040
 8001f20:	40020058 	.word	0x40020058
 8001f24:	40020070 	.word	0x40020070
 8001f28:	40020088 	.word	0x40020088
 8001f2c:	400200a0 	.word	0x400200a0
 8001f30:	400200b8 	.word	0x400200b8
 8001f34:	40020410 	.word	0x40020410
 8001f38:	40020428 	.word	0x40020428
 8001f3c:	40020440 	.word	0x40020440
 8001f40:	40020458 	.word	0x40020458
 8001f44:	40020470 	.word	0x40020470
 8001f48:	40020488 	.word	0x40020488
 8001f4c:	400204a0 	.word	0x400204a0
 8001f50:	400204b8 	.word	0x400204b8
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	bf14      	ite	ne
 8001f62:	2301      	movne	r3, #1
 8001f64:	2300      	moveq	r3, #0
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d015      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0204 	bic.w	r2, r2, #4
 8001f7a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f80:	f003 031f 	and.w	r3, r3, #31
 8001f84:	2208      	movs	r2, #8
 8001f86:	409a      	lsls	r2, r3
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f90:	f043 0201 	orr.w	r2, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9c:	f003 031f 	and.w	r3, r3, #31
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d06e      	beq.n	800208c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a69      	ldr	r2, [pc, #420]	; (8002158 <HAL_DMA_IRQHandler+0x3f8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d04a      	beq.n	800204e <HAL_DMA_IRQHandler+0x2ee>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a67      	ldr	r2, [pc, #412]	; (800215c <HAL_DMA_IRQHandler+0x3fc>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d045      	beq.n	800204e <HAL_DMA_IRQHandler+0x2ee>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a66      	ldr	r2, [pc, #408]	; (8002160 <HAL_DMA_IRQHandler+0x400>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d040      	beq.n	800204e <HAL_DMA_IRQHandler+0x2ee>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a64      	ldr	r2, [pc, #400]	; (8002164 <HAL_DMA_IRQHandler+0x404>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d03b      	beq.n	800204e <HAL_DMA_IRQHandler+0x2ee>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a63      	ldr	r2, [pc, #396]	; (8002168 <HAL_DMA_IRQHandler+0x408>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d036      	beq.n	800204e <HAL_DMA_IRQHandler+0x2ee>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a61      	ldr	r2, [pc, #388]	; (800216c <HAL_DMA_IRQHandler+0x40c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d031      	beq.n	800204e <HAL_DMA_IRQHandler+0x2ee>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a60      	ldr	r2, [pc, #384]	; (8002170 <HAL_DMA_IRQHandler+0x410>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d02c      	beq.n	800204e <HAL_DMA_IRQHandler+0x2ee>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a5e      	ldr	r2, [pc, #376]	; (8002174 <HAL_DMA_IRQHandler+0x414>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d027      	beq.n	800204e <HAL_DMA_IRQHandler+0x2ee>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a5d      	ldr	r2, [pc, #372]	; (8002178 <HAL_DMA_IRQHandler+0x418>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d022      	beq.n	800204e <HAL_DMA_IRQHandler+0x2ee>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a5b      	ldr	r2, [pc, #364]	; (800217c <HAL_DMA_IRQHandler+0x41c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d01d      	beq.n	800204e <HAL_DMA_IRQHandler+0x2ee>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a5a      	ldr	r2, [pc, #360]	; (8002180 <HAL_DMA_IRQHandler+0x420>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d018      	beq.n	800204e <HAL_DMA_IRQHandler+0x2ee>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a58      	ldr	r2, [pc, #352]	; (8002184 <HAL_DMA_IRQHandler+0x424>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d013      	beq.n	800204e <HAL_DMA_IRQHandler+0x2ee>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a57      	ldr	r2, [pc, #348]	; (8002188 <HAL_DMA_IRQHandler+0x428>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d00e      	beq.n	800204e <HAL_DMA_IRQHandler+0x2ee>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a55      	ldr	r2, [pc, #340]	; (800218c <HAL_DMA_IRQHandler+0x42c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d009      	beq.n	800204e <HAL_DMA_IRQHandler+0x2ee>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a54      	ldr	r2, [pc, #336]	; (8002190 <HAL_DMA_IRQHandler+0x430>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d004      	beq.n	800204e <HAL_DMA_IRQHandler+0x2ee>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a52      	ldr	r2, [pc, #328]	; (8002194 <HAL_DMA_IRQHandler+0x434>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d10a      	bne.n	8002064 <HAL_DMA_IRQHandler+0x304>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002058:	2b00      	cmp	r3, #0
 800205a:	bf14      	ite	ne
 800205c:	2301      	movne	r3, #1
 800205e:	2300      	moveq	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	e003      	b.n	800206c <HAL_DMA_IRQHandler+0x30c>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2300      	movs	r3, #0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00d      	beq.n	800208c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002074:	f003 031f 	and.w	r3, r3, #31
 8002078:	2201      	movs	r2, #1
 800207a:	409a      	lsls	r2, r3
 800207c:	6a3b      	ldr	r3, [r7, #32]
 800207e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002084:	f043 0202 	orr.w	r2, r3, #2
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002090:	f003 031f 	and.w	r3, r3, #31
 8002094:	2204      	movs	r2, #4
 8002096:	409a      	lsls	r2, r3
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 808f 	beq.w	80021c0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a2c      	ldr	r2, [pc, #176]	; (8002158 <HAL_DMA_IRQHandler+0x3f8>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d04a      	beq.n	8002142 <HAL_DMA_IRQHandler+0x3e2>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a2a      	ldr	r2, [pc, #168]	; (800215c <HAL_DMA_IRQHandler+0x3fc>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d045      	beq.n	8002142 <HAL_DMA_IRQHandler+0x3e2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a29      	ldr	r2, [pc, #164]	; (8002160 <HAL_DMA_IRQHandler+0x400>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d040      	beq.n	8002142 <HAL_DMA_IRQHandler+0x3e2>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a27      	ldr	r2, [pc, #156]	; (8002164 <HAL_DMA_IRQHandler+0x404>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d03b      	beq.n	8002142 <HAL_DMA_IRQHandler+0x3e2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a26      	ldr	r2, [pc, #152]	; (8002168 <HAL_DMA_IRQHandler+0x408>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d036      	beq.n	8002142 <HAL_DMA_IRQHandler+0x3e2>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a24      	ldr	r2, [pc, #144]	; (800216c <HAL_DMA_IRQHandler+0x40c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d031      	beq.n	8002142 <HAL_DMA_IRQHandler+0x3e2>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a23      	ldr	r2, [pc, #140]	; (8002170 <HAL_DMA_IRQHandler+0x410>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d02c      	beq.n	8002142 <HAL_DMA_IRQHandler+0x3e2>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a21      	ldr	r2, [pc, #132]	; (8002174 <HAL_DMA_IRQHandler+0x414>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d027      	beq.n	8002142 <HAL_DMA_IRQHandler+0x3e2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a20      	ldr	r2, [pc, #128]	; (8002178 <HAL_DMA_IRQHandler+0x418>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d022      	beq.n	8002142 <HAL_DMA_IRQHandler+0x3e2>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a1e      	ldr	r2, [pc, #120]	; (800217c <HAL_DMA_IRQHandler+0x41c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d01d      	beq.n	8002142 <HAL_DMA_IRQHandler+0x3e2>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a1d      	ldr	r2, [pc, #116]	; (8002180 <HAL_DMA_IRQHandler+0x420>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d018      	beq.n	8002142 <HAL_DMA_IRQHandler+0x3e2>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a1b      	ldr	r2, [pc, #108]	; (8002184 <HAL_DMA_IRQHandler+0x424>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d013      	beq.n	8002142 <HAL_DMA_IRQHandler+0x3e2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a1a      	ldr	r2, [pc, #104]	; (8002188 <HAL_DMA_IRQHandler+0x428>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d00e      	beq.n	8002142 <HAL_DMA_IRQHandler+0x3e2>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a18      	ldr	r2, [pc, #96]	; (800218c <HAL_DMA_IRQHandler+0x42c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d009      	beq.n	8002142 <HAL_DMA_IRQHandler+0x3e2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a17      	ldr	r2, [pc, #92]	; (8002190 <HAL_DMA_IRQHandler+0x430>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d004      	beq.n	8002142 <HAL_DMA_IRQHandler+0x3e2>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a15      	ldr	r2, [pc, #84]	; (8002194 <HAL_DMA_IRQHandler+0x434>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d12a      	bne.n	8002198 <HAL_DMA_IRQHandler+0x438>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	bf14      	ite	ne
 8002150:	2301      	movne	r3, #1
 8002152:	2300      	moveq	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	e023      	b.n	80021a0 <HAL_DMA_IRQHandler+0x440>
 8002158:	40020010 	.word	0x40020010
 800215c:	40020028 	.word	0x40020028
 8002160:	40020040 	.word	0x40020040
 8002164:	40020058 	.word	0x40020058
 8002168:	40020070 	.word	0x40020070
 800216c:	40020088 	.word	0x40020088
 8002170:	400200a0 	.word	0x400200a0
 8002174:	400200b8 	.word	0x400200b8
 8002178:	40020410 	.word	0x40020410
 800217c:	40020428 	.word	0x40020428
 8002180:	40020440 	.word	0x40020440
 8002184:	40020458 	.word	0x40020458
 8002188:	40020470 	.word	0x40020470
 800218c:	40020488 	.word	0x40020488
 8002190:	400204a0 	.word	0x400204a0
 8002194:	400204b8 	.word	0x400204b8
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2300      	movs	r3, #0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00d      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a8:	f003 031f 	and.w	r3, r3, #31
 80021ac:	2204      	movs	r2, #4
 80021ae:	409a      	lsls	r2, r3
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b8:	f043 0204 	orr.w	r2, r3, #4
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c4:	f003 031f 	and.w	r3, r3, #31
 80021c8:	2210      	movs	r2, #16
 80021ca:	409a      	lsls	r2, r3
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 80a6 	beq.w	8002322 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a85      	ldr	r2, [pc, #532]	; (80023f0 <HAL_DMA_IRQHandler+0x690>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d04a      	beq.n	8002276 <HAL_DMA_IRQHandler+0x516>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a83      	ldr	r2, [pc, #524]	; (80023f4 <HAL_DMA_IRQHandler+0x694>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d045      	beq.n	8002276 <HAL_DMA_IRQHandler+0x516>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a82      	ldr	r2, [pc, #520]	; (80023f8 <HAL_DMA_IRQHandler+0x698>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d040      	beq.n	8002276 <HAL_DMA_IRQHandler+0x516>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a80      	ldr	r2, [pc, #512]	; (80023fc <HAL_DMA_IRQHandler+0x69c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d03b      	beq.n	8002276 <HAL_DMA_IRQHandler+0x516>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a7f      	ldr	r2, [pc, #508]	; (8002400 <HAL_DMA_IRQHandler+0x6a0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d036      	beq.n	8002276 <HAL_DMA_IRQHandler+0x516>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a7d      	ldr	r2, [pc, #500]	; (8002404 <HAL_DMA_IRQHandler+0x6a4>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d031      	beq.n	8002276 <HAL_DMA_IRQHandler+0x516>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a7c      	ldr	r2, [pc, #496]	; (8002408 <HAL_DMA_IRQHandler+0x6a8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d02c      	beq.n	8002276 <HAL_DMA_IRQHandler+0x516>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a7a      	ldr	r2, [pc, #488]	; (800240c <HAL_DMA_IRQHandler+0x6ac>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d027      	beq.n	8002276 <HAL_DMA_IRQHandler+0x516>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a79      	ldr	r2, [pc, #484]	; (8002410 <HAL_DMA_IRQHandler+0x6b0>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d022      	beq.n	8002276 <HAL_DMA_IRQHandler+0x516>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a77      	ldr	r2, [pc, #476]	; (8002414 <HAL_DMA_IRQHandler+0x6b4>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d01d      	beq.n	8002276 <HAL_DMA_IRQHandler+0x516>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a76      	ldr	r2, [pc, #472]	; (8002418 <HAL_DMA_IRQHandler+0x6b8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d018      	beq.n	8002276 <HAL_DMA_IRQHandler+0x516>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a74      	ldr	r2, [pc, #464]	; (800241c <HAL_DMA_IRQHandler+0x6bc>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d013      	beq.n	8002276 <HAL_DMA_IRQHandler+0x516>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a73      	ldr	r2, [pc, #460]	; (8002420 <HAL_DMA_IRQHandler+0x6c0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d00e      	beq.n	8002276 <HAL_DMA_IRQHandler+0x516>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a71      	ldr	r2, [pc, #452]	; (8002424 <HAL_DMA_IRQHandler+0x6c4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d009      	beq.n	8002276 <HAL_DMA_IRQHandler+0x516>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a70      	ldr	r2, [pc, #448]	; (8002428 <HAL_DMA_IRQHandler+0x6c8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d004      	beq.n	8002276 <HAL_DMA_IRQHandler+0x516>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a6e      	ldr	r2, [pc, #440]	; (800242c <HAL_DMA_IRQHandler+0x6cc>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d10a      	bne.n	800228c <HAL_DMA_IRQHandler+0x52c>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	bf14      	ite	ne
 8002284:	2301      	movne	r3, #1
 8002286:	2300      	moveq	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	e009      	b.n	80022a0 <HAL_DMA_IRQHandler+0x540>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0304 	and.w	r3, r3, #4
 8002296:	2b00      	cmp	r3, #0
 8002298:	bf14      	ite	ne
 800229a:	2301      	movne	r3, #1
 800229c:	2300      	moveq	r3, #0
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d03e      	beq.n	8002322 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	2210      	movs	r2, #16
 80022ae:	409a      	lsls	r2, r3
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d018      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d108      	bne.n	80022e2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d024      	beq.n	8002322 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	4798      	blx	r3
 80022e0:	e01f      	b.n	8002322 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d01b      	beq.n	8002322 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	4798      	blx	r3
 80022f2:	e016      	b.n	8002322 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d107      	bne.n	8002312 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 0208 	bic.w	r2, r2, #8
 8002310:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	f003 031f 	and.w	r3, r3, #31
 800232a:	2220      	movs	r2, #32
 800232c:	409a      	lsls	r2, r3
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 8110 	beq.w	8002558 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a2c      	ldr	r2, [pc, #176]	; (80023f0 <HAL_DMA_IRQHandler+0x690>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d04a      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x678>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a2b      	ldr	r2, [pc, #172]	; (80023f4 <HAL_DMA_IRQHandler+0x694>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d045      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x678>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a29      	ldr	r2, [pc, #164]	; (80023f8 <HAL_DMA_IRQHandler+0x698>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d040      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x678>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a28      	ldr	r2, [pc, #160]	; (80023fc <HAL_DMA_IRQHandler+0x69c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d03b      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x678>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a26      	ldr	r2, [pc, #152]	; (8002400 <HAL_DMA_IRQHandler+0x6a0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d036      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x678>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a25      	ldr	r2, [pc, #148]	; (8002404 <HAL_DMA_IRQHandler+0x6a4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d031      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x678>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a23      	ldr	r2, [pc, #140]	; (8002408 <HAL_DMA_IRQHandler+0x6a8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d02c      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x678>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a22      	ldr	r2, [pc, #136]	; (800240c <HAL_DMA_IRQHandler+0x6ac>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d027      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x678>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a20      	ldr	r2, [pc, #128]	; (8002410 <HAL_DMA_IRQHandler+0x6b0>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d022      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x678>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a1f      	ldr	r2, [pc, #124]	; (8002414 <HAL_DMA_IRQHandler+0x6b4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d01d      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x678>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a1d      	ldr	r2, [pc, #116]	; (8002418 <HAL_DMA_IRQHandler+0x6b8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d018      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x678>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a1c      	ldr	r2, [pc, #112]	; (800241c <HAL_DMA_IRQHandler+0x6bc>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d013      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x678>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a1a      	ldr	r2, [pc, #104]	; (8002420 <HAL_DMA_IRQHandler+0x6c0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00e      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x678>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a19      	ldr	r2, [pc, #100]	; (8002424 <HAL_DMA_IRQHandler+0x6c4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d009      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x678>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a17      	ldr	r2, [pc, #92]	; (8002428 <HAL_DMA_IRQHandler+0x6c8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d004      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x678>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a16      	ldr	r2, [pc, #88]	; (800242c <HAL_DMA_IRQHandler+0x6cc>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d12b      	bne.n	8002430 <HAL_DMA_IRQHandler+0x6d0>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	bf14      	ite	ne
 80023e6:	2301      	movne	r3, #1
 80023e8:	2300      	moveq	r3, #0
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	e02a      	b.n	8002444 <HAL_DMA_IRQHandler+0x6e4>
 80023ee:	bf00      	nop
 80023f0:	40020010 	.word	0x40020010
 80023f4:	40020028 	.word	0x40020028
 80023f8:	40020040 	.word	0x40020040
 80023fc:	40020058 	.word	0x40020058
 8002400:	40020070 	.word	0x40020070
 8002404:	40020088 	.word	0x40020088
 8002408:	400200a0 	.word	0x400200a0
 800240c:	400200b8 	.word	0x400200b8
 8002410:	40020410 	.word	0x40020410
 8002414:	40020428 	.word	0x40020428
 8002418:	40020440 	.word	0x40020440
 800241c:	40020458 	.word	0x40020458
 8002420:	40020470 	.word	0x40020470
 8002424:	40020488 	.word	0x40020488
 8002428:	400204a0 	.word	0x400204a0
 800242c:	400204b8 	.word	0x400204b8
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	bf14      	ite	ne
 800243e:	2301      	movne	r3, #1
 8002440:	2300      	moveq	r3, #0
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 8087 	beq.w	8002558 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244e:	f003 031f 	and.w	r3, r3, #31
 8002452:	2220      	movs	r2, #32
 8002454:	409a      	lsls	r2, r3
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b04      	cmp	r3, #4
 8002464:	d139      	bne.n	80024da <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0216 	bic.w	r2, r2, #22
 8002474:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695a      	ldr	r2, [r3, #20]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002484:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	2b00      	cmp	r3, #0
 800248c:	d103      	bne.n	8002496 <HAL_DMA_IRQHandler+0x736>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0208 	bic.w	r2, r2, #8
 80024a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024aa:	f003 031f 	and.w	r3, r3, #31
 80024ae:	223f      	movs	r2, #63	; 0x3f
 80024b0:	409a      	lsls	r2, r3
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 834a 	beq.w	8002b64 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	4798      	blx	r3
          }
          return;
 80024d8:	e344      	b.n	8002b64 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d018      	beq.n	800251a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d108      	bne.n	8002508 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d02c      	beq.n	8002558 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	4798      	blx	r3
 8002506:	e027      	b.n	8002558 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250c:	2b00      	cmp	r3, #0
 800250e:	d023      	beq.n	8002558 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	4798      	blx	r3
 8002518:	e01e      	b.n	8002558 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10f      	bne.n	8002548 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0210 	bic.w	r2, r2, #16
 8002536:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 8306 	beq.w	8002b6e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 8088 	beq.w	8002680 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2204      	movs	r2, #4
 8002574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a7a      	ldr	r2, [pc, #488]	; (8002768 <HAL_DMA_IRQHandler+0xa08>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d04a      	beq.n	8002618 <HAL_DMA_IRQHandler+0x8b8>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a79      	ldr	r2, [pc, #484]	; (800276c <HAL_DMA_IRQHandler+0xa0c>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d045      	beq.n	8002618 <HAL_DMA_IRQHandler+0x8b8>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a77      	ldr	r2, [pc, #476]	; (8002770 <HAL_DMA_IRQHandler+0xa10>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d040      	beq.n	8002618 <HAL_DMA_IRQHandler+0x8b8>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a76      	ldr	r2, [pc, #472]	; (8002774 <HAL_DMA_IRQHandler+0xa14>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d03b      	beq.n	8002618 <HAL_DMA_IRQHandler+0x8b8>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a74      	ldr	r2, [pc, #464]	; (8002778 <HAL_DMA_IRQHandler+0xa18>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d036      	beq.n	8002618 <HAL_DMA_IRQHandler+0x8b8>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a73      	ldr	r2, [pc, #460]	; (800277c <HAL_DMA_IRQHandler+0xa1c>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d031      	beq.n	8002618 <HAL_DMA_IRQHandler+0x8b8>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a71      	ldr	r2, [pc, #452]	; (8002780 <HAL_DMA_IRQHandler+0xa20>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d02c      	beq.n	8002618 <HAL_DMA_IRQHandler+0x8b8>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a70      	ldr	r2, [pc, #448]	; (8002784 <HAL_DMA_IRQHandler+0xa24>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d027      	beq.n	8002618 <HAL_DMA_IRQHandler+0x8b8>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a6e      	ldr	r2, [pc, #440]	; (8002788 <HAL_DMA_IRQHandler+0xa28>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d022      	beq.n	8002618 <HAL_DMA_IRQHandler+0x8b8>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a6d      	ldr	r2, [pc, #436]	; (800278c <HAL_DMA_IRQHandler+0xa2c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d01d      	beq.n	8002618 <HAL_DMA_IRQHandler+0x8b8>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a6b      	ldr	r2, [pc, #428]	; (8002790 <HAL_DMA_IRQHandler+0xa30>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d018      	beq.n	8002618 <HAL_DMA_IRQHandler+0x8b8>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a6a      	ldr	r2, [pc, #424]	; (8002794 <HAL_DMA_IRQHandler+0xa34>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d013      	beq.n	8002618 <HAL_DMA_IRQHandler+0x8b8>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a68      	ldr	r2, [pc, #416]	; (8002798 <HAL_DMA_IRQHandler+0xa38>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d00e      	beq.n	8002618 <HAL_DMA_IRQHandler+0x8b8>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a67      	ldr	r2, [pc, #412]	; (800279c <HAL_DMA_IRQHandler+0xa3c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d009      	beq.n	8002618 <HAL_DMA_IRQHandler+0x8b8>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a65      	ldr	r2, [pc, #404]	; (80027a0 <HAL_DMA_IRQHandler+0xa40>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d004      	beq.n	8002618 <HAL_DMA_IRQHandler+0x8b8>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a64      	ldr	r2, [pc, #400]	; (80027a4 <HAL_DMA_IRQHandler+0xa44>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d108      	bne.n	800262a <HAL_DMA_IRQHandler+0x8ca>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0201 	bic.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	e007      	b.n	800263a <HAL_DMA_IRQHandler+0x8da>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0201 	bic.w	r2, r2, #1
 8002638:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	3301      	adds	r3, #1
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002642:	429a      	cmp	r2, r3
 8002644:	d307      	bcc.n	8002656 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f2      	bne.n	800263a <HAL_DMA_IRQHandler+0x8da>
 8002654:	e000      	b.n	8002658 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002656:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d004      	beq.n	8002670 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2203      	movs	r2, #3
 800266a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800266e:	e003      	b.n	8002678 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 8272 	beq.w	8002b6e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	4798      	blx	r3
 8002692:	e26c      	b.n	8002b6e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a43      	ldr	r2, [pc, #268]	; (80027a8 <HAL_DMA_IRQHandler+0xa48>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d022      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x984>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a42      	ldr	r2, [pc, #264]	; (80027ac <HAL_DMA_IRQHandler+0xa4c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d01d      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x984>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a40      	ldr	r2, [pc, #256]	; (80027b0 <HAL_DMA_IRQHandler+0xa50>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d018      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x984>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a3f      	ldr	r2, [pc, #252]	; (80027b4 <HAL_DMA_IRQHandler+0xa54>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d013      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x984>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a3d      	ldr	r2, [pc, #244]	; (80027b8 <HAL_DMA_IRQHandler+0xa58>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00e      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x984>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a3c      	ldr	r2, [pc, #240]	; (80027bc <HAL_DMA_IRQHandler+0xa5c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d009      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x984>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a3a      	ldr	r2, [pc, #232]	; (80027c0 <HAL_DMA_IRQHandler+0xa60>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d004      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x984>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a39      	ldr	r2, [pc, #228]	; (80027c4 <HAL_DMA_IRQHandler+0xa64>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d101      	bne.n	80026e8 <HAL_DMA_IRQHandler+0x988>
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <HAL_DMA_IRQHandler+0x98a>
 80026e8:	2300      	movs	r3, #0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 823f 	beq.w	8002b6e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	2204      	movs	r2, #4
 8002702:	409a      	lsls	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80cd 	beq.w	80028a8 <HAL_DMA_IRQHandler+0xb48>
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80c7 	beq.w	80028a8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271e:	f003 031f 	and.w	r3, r3, #31
 8002722:	2204      	movs	r2, #4
 8002724:	409a      	lsls	r2, r3
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d049      	beq.n	80027c8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d109      	bne.n	8002752 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 8210 	beq.w	8002b68 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002750:	e20a      	b.n	8002b68 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 8206 	beq.w	8002b68 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002764:	e200      	b.n	8002b68 <HAL_DMA_IRQHandler+0xe08>
 8002766:	bf00      	nop
 8002768:	40020010 	.word	0x40020010
 800276c:	40020028 	.word	0x40020028
 8002770:	40020040 	.word	0x40020040
 8002774:	40020058 	.word	0x40020058
 8002778:	40020070 	.word	0x40020070
 800277c:	40020088 	.word	0x40020088
 8002780:	400200a0 	.word	0x400200a0
 8002784:	400200b8 	.word	0x400200b8
 8002788:	40020410 	.word	0x40020410
 800278c:	40020428 	.word	0x40020428
 8002790:	40020440 	.word	0x40020440
 8002794:	40020458 	.word	0x40020458
 8002798:	40020470 	.word	0x40020470
 800279c:	40020488 	.word	0x40020488
 80027a0:	400204a0 	.word	0x400204a0
 80027a4:	400204b8 	.word	0x400204b8
 80027a8:	58025408 	.word	0x58025408
 80027ac:	5802541c 	.word	0x5802541c
 80027b0:	58025430 	.word	0x58025430
 80027b4:	58025444 	.word	0x58025444
 80027b8:	58025458 	.word	0x58025458
 80027bc:	5802546c 	.word	0x5802546c
 80027c0:	58025480 	.word	0x58025480
 80027c4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	f003 0320 	and.w	r3, r3, #32
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d160      	bne.n	8002894 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a7f      	ldr	r2, [pc, #508]	; (80029d4 <HAL_DMA_IRQHandler+0xc74>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d04a      	beq.n	8002872 <HAL_DMA_IRQHandler+0xb12>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a7d      	ldr	r2, [pc, #500]	; (80029d8 <HAL_DMA_IRQHandler+0xc78>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d045      	beq.n	8002872 <HAL_DMA_IRQHandler+0xb12>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a7c      	ldr	r2, [pc, #496]	; (80029dc <HAL_DMA_IRQHandler+0xc7c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d040      	beq.n	8002872 <HAL_DMA_IRQHandler+0xb12>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a7a      	ldr	r2, [pc, #488]	; (80029e0 <HAL_DMA_IRQHandler+0xc80>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d03b      	beq.n	8002872 <HAL_DMA_IRQHandler+0xb12>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a79      	ldr	r2, [pc, #484]	; (80029e4 <HAL_DMA_IRQHandler+0xc84>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d036      	beq.n	8002872 <HAL_DMA_IRQHandler+0xb12>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a77      	ldr	r2, [pc, #476]	; (80029e8 <HAL_DMA_IRQHandler+0xc88>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d031      	beq.n	8002872 <HAL_DMA_IRQHandler+0xb12>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a76      	ldr	r2, [pc, #472]	; (80029ec <HAL_DMA_IRQHandler+0xc8c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d02c      	beq.n	8002872 <HAL_DMA_IRQHandler+0xb12>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a74      	ldr	r2, [pc, #464]	; (80029f0 <HAL_DMA_IRQHandler+0xc90>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d027      	beq.n	8002872 <HAL_DMA_IRQHandler+0xb12>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a73      	ldr	r2, [pc, #460]	; (80029f4 <HAL_DMA_IRQHandler+0xc94>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d022      	beq.n	8002872 <HAL_DMA_IRQHandler+0xb12>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a71      	ldr	r2, [pc, #452]	; (80029f8 <HAL_DMA_IRQHandler+0xc98>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d01d      	beq.n	8002872 <HAL_DMA_IRQHandler+0xb12>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a70      	ldr	r2, [pc, #448]	; (80029fc <HAL_DMA_IRQHandler+0xc9c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d018      	beq.n	8002872 <HAL_DMA_IRQHandler+0xb12>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a6e      	ldr	r2, [pc, #440]	; (8002a00 <HAL_DMA_IRQHandler+0xca0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d013      	beq.n	8002872 <HAL_DMA_IRQHandler+0xb12>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a6d      	ldr	r2, [pc, #436]	; (8002a04 <HAL_DMA_IRQHandler+0xca4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00e      	beq.n	8002872 <HAL_DMA_IRQHandler+0xb12>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a6b      	ldr	r2, [pc, #428]	; (8002a08 <HAL_DMA_IRQHandler+0xca8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d009      	beq.n	8002872 <HAL_DMA_IRQHandler+0xb12>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a6a      	ldr	r2, [pc, #424]	; (8002a0c <HAL_DMA_IRQHandler+0xcac>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d004      	beq.n	8002872 <HAL_DMA_IRQHandler+0xb12>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a68      	ldr	r2, [pc, #416]	; (8002a10 <HAL_DMA_IRQHandler+0xcb0>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d108      	bne.n	8002884 <HAL_DMA_IRQHandler+0xb24>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0208 	bic.w	r2, r2, #8
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	e007      	b.n	8002894 <HAL_DMA_IRQHandler+0xb34>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0204 	bic.w	r2, r2, #4
 8002892:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 8165 	beq.w	8002b68 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028a6:	e15f      	b.n	8002b68 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ac:	f003 031f 	and.w	r3, r3, #31
 80028b0:	2202      	movs	r2, #2
 80028b2:	409a      	lsls	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 80c5 	beq.w	8002a48 <HAL_DMA_IRQHandler+0xce8>
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80bf 	beq.w	8002a48 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ce:	f003 031f 	and.w	r3, r3, #31
 80028d2:	2202      	movs	r2, #2
 80028d4:	409a      	lsls	r2, r3
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d018      	beq.n	8002916 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d109      	bne.n	8002902 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 813a 	beq.w	8002b6c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002900:	e134      	b.n	8002b6c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 8130 	beq.w	8002b6c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002914:	e12a      	b.n	8002b6c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b00      	cmp	r3, #0
 800291e:	f040 8089 	bne.w	8002a34 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a2b      	ldr	r2, [pc, #172]	; (80029d4 <HAL_DMA_IRQHandler+0xc74>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d04a      	beq.n	80029c2 <HAL_DMA_IRQHandler+0xc62>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a29      	ldr	r2, [pc, #164]	; (80029d8 <HAL_DMA_IRQHandler+0xc78>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d045      	beq.n	80029c2 <HAL_DMA_IRQHandler+0xc62>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a28      	ldr	r2, [pc, #160]	; (80029dc <HAL_DMA_IRQHandler+0xc7c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d040      	beq.n	80029c2 <HAL_DMA_IRQHandler+0xc62>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a26      	ldr	r2, [pc, #152]	; (80029e0 <HAL_DMA_IRQHandler+0xc80>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d03b      	beq.n	80029c2 <HAL_DMA_IRQHandler+0xc62>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a25      	ldr	r2, [pc, #148]	; (80029e4 <HAL_DMA_IRQHandler+0xc84>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d036      	beq.n	80029c2 <HAL_DMA_IRQHandler+0xc62>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a23      	ldr	r2, [pc, #140]	; (80029e8 <HAL_DMA_IRQHandler+0xc88>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d031      	beq.n	80029c2 <HAL_DMA_IRQHandler+0xc62>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a22      	ldr	r2, [pc, #136]	; (80029ec <HAL_DMA_IRQHandler+0xc8c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d02c      	beq.n	80029c2 <HAL_DMA_IRQHandler+0xc62>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a20      	ldr	r2, [pc, #128]	; (80029f0 <HAL_DMA_IRQHandler+0xc90>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d027      	beq.n	80029c2 <HAL_DMA_IRQHandler+0xc62>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1f      	ldr	r2, [pc, #124]	; (80029f4 <HAL_DMA_IRQHandler+0xc94>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d022      	beq.n	80029c2 <HAL_DMA_IRQHandler+0xc62>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a1d      	ldr	r2, [pc, #116]	; (80029f8 <HAL_DMA_IRQHandler+0xc98>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d01d      	beq.n	80029c2 <HAL_DMA_IRQHandler+0xc62>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1c      	ldr	r2, [pc, #112]	; (80029fc <HAL_DMA_IRQHandler+0xc9c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d018      	beq.n	80029c2 <HAL_DMA_IRQHandler+0xc62>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a1a      	ldr	r2, [pc, #104]	; (8002a00 <HAL_DMA_IRQHandler+0xca0>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d013      	beq.n	80029c2 <HAL_DMA_IRQHandler+0xc62>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a19      	ldr	r2, [pc, #100]	; (8002a04 <HAL_DMA_IRQHandler+0xca4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d00e      	beq.n	80029c2 <HAL_DMA_IRQHandler+0xc62>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a17      	ldr	r2, [pc, #92]	; (8002a08 <HAL_DMA_IRQHandler+0xca8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d009      	beq.n	80029c2 <HAL_DMA_IRQHandler+0xc62>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a16      	ldr	r2, [pc, #88]	; (8002a0c <HAL_DMA_IRQHandler+0xcac>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d004      	beq.n	80029c2 <HAL_DMA_IRQHandler+0xc62>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a14      	ldr	r2, [pc, #80]	; (8002a10 <HAL_DMA_IRQHandler+0xcb0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d128      	bne.n	8002a14 <HAL_DMA_IRQHandler+0xcb4>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0214 	bic.w	r2, r2, #20
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	e027      	b.n	8002a24 <HAL_DMA_IRQHandler+0xcc4>
 80029d4:	40020010 	.word	0x40020010
 80029d8:	40020028 	.word	0x40020028
 80029dc:	40020040 	.word	0x40020040
 80029e0:	40020058 	.word	0x40020058
 80029e4:	40020070 	.word	0x40020070
 80029e8:	40020088 	.word	0x40020088
 80029ec:	400200a0 	.word	0x400200a0
 80029f0:	400200b8 	.word	0x400200b8
 80029f4:	40020410 	.word	0x40020410
 80029f8:	40020428 	.word	0x40020428
 80029fc:	40020440 	.word	0x40020440
 8002a00:	40020458 	.word	0x40020458
 8002a04:	40020470 	.word	0x40020470
 8002a08:	40020488 	.word	0x40020488
 8002a0c:	400204a0 	.word	0x400204a0
 8002a10:	400204b8 	.word	0x400204b8
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 020a 	bic.w	r2, r2, #10
 8002a22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 8097 	beq.w	8002b6c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a46:	e091      	b.n	8002b6c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	2208      	movs	r2, #8
 8002a52:	409a      	lsls	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 8088 	beq.w	8002b6e <HAL_DMA_IRQHandler+0xe0e>
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 8082 	beq.w	8002b6e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a41      	ldr	r2, [pc, #260]	; (8002b74 <HAL_DMA_IRQHandler+0xe14>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d04a      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xdaa>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a3f      	ldr	r2, [pc, #252]	; (8002b78 <HAL_DMA_IRQHandler+0xe18>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d045      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xdaa>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a3e      	ldr	r2, [pc, #248]	; (8002b7c <HAL_DMA_IRQHandler+0xe1c>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d040      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xdaa>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a3c      	ldr	r2, [pc, #240]	; (8002b80 <HAL_DMA_IRQHandler+0xe20>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d03b      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xdaa>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a3b      	ldr	r2, [pc, #236]	; (8002b84 <HAL_DMA_IRQHandler+0xe24>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d036      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xdaa>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a39      	ldr	r2, [pc, #228]	; (8002b88 <HAL_DMA_IRQHandler+0xe28>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d031      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xdaa>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a38      	ldr	r2, [pc, #224]	; (8002b8c <HAL_DMA_IRQHandler+0xe2c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d02c      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xdaa>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a36      	ldr	r2, [pc, #216]	; (8002b90 <HAL_DMA_IRQHandler+0xe30>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d027      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xdaa>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a35      	ldr	r2, [pc, #212]	; (8002b94 <HAL_DMA_IRQHandler+0xe34>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d022      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xdaa>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a33      	ldr	r2, [pc, #204]	; (8002b98 <HAL_DMA_IRQHandler+0xe38>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d01d      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xdaa>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a32      	ldr	r2, [pc, #200]	; (8002b9c <HAL_DMA_IRQHandler+0xe3c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d018      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xdaa>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a30      	ldr	r2, [pc, #192]	; (8002ba0 <HAL_DMA_IRQHandler+0xe40>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d013      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xdaa>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a2f      	ldr	r2, [pc, #188]	; (8002ba4 <HAL_DMA_IRQHandler+0xe44>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d00e      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xdaa>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a2d      	ldr	r2, [pc, #180]	; (8002ba8 <HAL_DMA_IRQHandler+0xe48>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d009      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xdaa>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a2c      	ldr	r2, [pc, #176]	; (8002bac <HAL_DMA_IRQHandler+0xe4c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d004      	beq.n	8002b0a <HAL_DMA_IRQHandler+0xdaa>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a2a      	ldr	r2, [pc, #168]	; (8002bb0 <HAL_DMA_IRQHandler+0xe50>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d108      	bne.n	8002b1c <HAL_DMA_IRQHandler+0xdbc>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 021c 	bic.w	r2, r2, #28
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	e007      	b.n	8002b2c <HAL_DMA_IRQHandler+0xdcc>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 020e 	bic.w	r2, r2, #14
 8002b2a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	2201      	movs	r2, #1
 8002b36:	409a      	lsls	r2, r3
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d009      	beq.n	8002b6e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	4798      	blx	r3
 8002b62:	e004      	b.n	8002b6e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002b64:	bf00      	nop
 8002b66:	e002      	b.n	8002b6e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b68:	bf00      	nop
 8002b6a:	e000      	b.n	8002b6e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b6c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002b6e:	3728      	adds	r7, #40	; 0x28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40020010 	.word	0x40020010
 8002b78:	40020028 	.word	0x40020028
 8002b7c:	40020040 	.word	0x40020040
 8002b80:	40020058 	.word	0x40020058
 8002b84:	40020070 	.word	0x40020070
 8002b88:	40020088 	.word	0x40020088
 8002b8c:	400200a0 	.word	0x400200a0
 8002b90:	400200b8 	.word	0x400200b8
 8002b94:	40020410 	.word	0x40020410
 8002b98:	40020428 	.word	0x40020428
 8002b9c:	40020440 	.word	0x40020440
 8002ba0:	40020458 	.word	0x40020458
 8002ba4:	40020470 	.word	0x40020470
 8002ba8:	40020488 	.word	0x40020488
 8002bac:	400204a0 	.word	0x400204a0
 8002bb0:	400204b8 	.word	0x400204b8

08002bb4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bcc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a7f      	ldr	r2, [pc, #508]	; (8002dd0 <DMA_SetConfig+0x21c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d072      	beq.n	8002cbe <DMA_SetConfig+0x10a>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a7d      	ldr	r2, [pc, #500]	; (8002dd4 <DMA_SetConfig+0x220>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d06d      	beq.n	8002cbe <DMA_SetConfig+0x10a>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a7c      	ldr	r2, [pc, #496]	; (8002dd8 <DMA_SetConfig+0x224>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d068      	beq.n	8002cbe <DMA_SetConfig+0x10a>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a7a      	ldr	r2, [pc, #488]	; (8002ddc <DMA_SetConfig+0x228>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d063      	beq.n	8002cbe <DMA_SetConfig+0x10a>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a79      	ldr	r2, [pc, #484]	; (8002de0 <DMA_SetConfig+0x22c>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d05e      	beq.n	8002cbe <DMA_SetConfig+0x10a>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a77      	ldr	r2, [pc, #476]	; (8002de4 <DMA_SetConfig+0x230>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d059      	beq.n	8002cbe <DMA_SetConfig+0x10a>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a76      	ldr	r2, [pc, #472]	; (8002de8 <DMA_SetConfig+0x234>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d054      	beq.n	8002cbe <DMA_SetConfig+0x10a>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a74      	ldr	r2, [pc, #464]	; (8002dec <DMA_SetConfig+0x238>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d04f      	beq.n	8002cbe <DMA_SetConfig+0x10a>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a73      	ldr	r2, [pc, #460]	; (8002df0 <DMA_SetConfig+0x23c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d04a      	beq.n	8002cbe <DMA_SetConfig+0x10a>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a71      	ldr	r2, [pc, #452]	; (8002df4 <DMA_SetConfig+0x240>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d045      	beq.n	8002cbe <DMA_SetConfig+0x10a>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a70      	ldr	r2, [pc, #448]	; (8002df8 <DMA_SetConfig+0x244>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d040      	beq.n	8002cbe <DMA_SetConfig+0x10a>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a6e      	ldr	r2, [pc, #440]	; (8002dfc <DMA_SetConfig+0x248>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d03b      	beq.n	8002cbe <DMA_SetConfig+0x10a>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a6d      	ldr	r2, [pc, #436]	; (8002e00 <DMA_SetConfig+0x24c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d036      	beq.n	8002cbe <DMA_SetConfig+0x10a>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a6b      	ldr	r2, [pc, #428]	; (8002e04 <DMA_SetConfig+0x250>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d031      	beq.n	8002cbe <DMA_SetConfig+0x10a>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a6a      	ldr	r2, [pc, #424]	; (8002e08 <DMA_SetConfig+0x254>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d02c      	beq.n	8002cbe <DMA_SetConfig+0x10a>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a68      	ldr	r2, [pc, #416]	; (8002e0c <DMA_SetConfig+0x258>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d027      	beq.n	8002cbe <DMA_SetConfig+0x10a>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a67      	ldr	r2, [pc, #412]	; (8002e10 <DMA_SetConfig+0x25c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d022      	beq.n	8002cbe <DMA_SetConfig+0x10a>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a65      	ldr	r2, [pc, #404]	; (8002e14 <DMA_SetConfig+0x260>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01d      	beq.n	8002cbe <DMA_SetConfig+0x10a>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a64      	ldr	r2, [pc, #400]	; (8002e18 <DMA_SetConfig+0x264>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d018      	beq.n	8002cbe <DMA_SetConfig+0x10a>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a62      	ldr	r2, [pc, #392]	; (8002e1c <DMA_SetConfig+0x268>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d013      	beq.n	8002cbe <DMA_SetConfig+0x10a>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a61      	ldr	r2, [pc, #388]	; (8002e20 <DMA_SetConfig+0x26c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d00e      	beq.n	8002cbe <DMA_SetConfig+0x10a>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a5f      	ldr	r2, [pc, #380]	; (8002e24 <DMA_SetConfig+0x270>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d009      	beq.n	8002cbe <DMA_SetConfig+0x10a>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a5e      	ldr	r2, [pc, #376]	; (8002e28 <DMA_SetConfig+0x274>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d004      	beq.n	8002cbe <DMA_SetConfig+0x10a>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a5c      	ldr	r2, [pc, #368]	; (8002e2c <DMA_SetConfig+0x278>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d101      	bne.n	8002cc2 <DMA_SetConfig+0x10e>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <DMA_SetConfig+0x110>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00d      	beq.n	8002ce4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002cd0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d004      	beq.n	8002ce4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002ce2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a39      	ldr	r2, [pc, #228]	; (8002dd0 <DMA_SetConfig+0x21c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d04a      	beq.n	8002d84 <DMA_SetConfig+0x1d0>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a38      	ldr	r2, [pc, #224]	; (8002dd4 <DMA_SetConfig+0x220>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d045      	beq.n	8002d84 <DMA_SetConfig+0x1d0>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a36      	ldr	r2, [pc, #216]	; (8002dd8 <DMA_SetConfig+0x224>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d040      	beq.n	8002d84 <DMA_SetConfig+0x1d0>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a35      	ldr	r2, [pc, #212]	; (8002ddc <DMA_SetConfig+0x228>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d03b      	beq.n	8002d84 <DMA_SetConfig+0x1d0>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a33      	ldr	r2, [pc, #204]	; (8002de0 <DMA_SetConfig+0x22c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d036      	beq.n	8002d84 <DMA_SetConfig+0x1d0>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a32      	ldr	r2, [pc, #200]	; (8002de4 <DMA_SetConfig+0x230>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d031      	beq.n	8002d84 <DMA_SetConfig+0x1d0>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a30      	ldr	r2, [pc, #192]	; (8002de8 <DMA_SetConfig+0x234>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d02c      	beq.n	8002d84 <DMA_SetConfig+0x1d0>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a2f      	ldr	r2, [pc, #188]	; (8002dec <DMA_SetConfig+0x238>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d027      	beq.n	8002d84 <DMA_SetConfig+0x1d0>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a2d      	ldr	r2, [pc, #180]	; (8002df0 <DMA_SetConfig+0x23c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d022      	beq.n	8002d84 <DMA_SetConfig+0x1d0>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a2c      	ldr	r2, [pc, #176]	; (8002df4 <DMA_SetConfig+0x240>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d01d      	beq.n	8002d84 <DMA_SetConfig+0x1d0>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a2a      	ldr	r2, [pc, #168]	; (8002df8 <DMA_SetConfig+0x244>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d018      	beq.n	8002d84 <DMA_SetConfig+0x1d0>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a29      	ldr	r2, [pc, #164]	; (8002dfc <DMA_SetConfig+0x248>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d013      	beq.n	8002d84 <DMA_SetConfig+0x1d0>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a27      	ldr	r2, [pc, #156]	; (8002e00 <DMA_SetConfig+0x24c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00e      	beq.n	8002d84 <DMA_SetConfig+0x1d0>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a26      	ldr	r2, [pc, #152]	; (8002e04 <DMA_SetConfig+0x250>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d009      	beq.n	8002d84 <DMA_SetConfig+0x1d0>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a24      	ldr	r2, [pc, #144]	; (8002e08 <DMA_SetConfig+0x254>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d004      	beq.n	8002d84 <DMA_SetConfig+0x1d0>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a23      	ldr	r2, [pc, #140]	; (8002e0c <DMA_SetConfig+0x258>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d101      	bne.n	8002d88 <DMA_SetConfig+0x1d4>
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <DMA_SetConfig+0x1d6>
 8002d88:	2300      	movs	r3, #0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d059      	beq.n	8002e42 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d92:	f003 031f 	and.w	r3, r3, #31
 8002d96:	223f      	movs	r2, #63	; 0x3f
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dac:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b40      	cmp	r3, #64	; 0x40
 8002dbc:	d138      	bne.n	8002e30 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002dce:	e086      	b.n	8002ede <DMA_SetConfig+0x32a>
 8002dd0:	40020010 	.word	0x40020010
 8002dd4:	40020028 	.word	0x40020028
 8002dd8:	40020040 	.word	0x40020040
 8002ddc:	40020058 	.word	0x40020058
 8002de0:	40020070 	.word	0x40020070
 8002de4:	40020088 	.word	0x40020088
 8002de8:	400200a0 	.word	0x400200a0
 8002dec:	400200b8 	.word	0x400200b8
 8002df0:	40020410 	.word	0x40020410
 8002df4:	40020428 	.word	0x40020428
 8002df8:	40020440 	.word	0x40020440
 8002dfc:	40020458 	.word	0x40020458
 8002e00:	40020470 	.word	0x40020470
 8002e04:	40020488 	.word	0x40020488
 8002e08:	400204a0 	.word	0x400204a0
 8002e0c:	400204b8 	.word	0x400204b8
 8002e10:	58025408 	.word	0x58025408
 8002e14:	5802541c 	.word	0x5802541c
 8002e18:	58025430 	.word	0x58025430
 8002e1c:	58025444 	.word	0x58025444
 8002e20:	58025458 	.word	0x58025458
 8002e24:	5802546c 	.word	0x5802546c
 8002e28:	58025480 	.word	0x58025480
 8002e2c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	60da      	str	r2, [r3, #12]
}
 8002e40:	e04d      	b.n	8002ede <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a29      	ldr	r2, [pc, #164]	; (8002eec <DMA_SetConfig+0x338>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d022      	beq.n	8002e92 <DMA_SetConfig+0x2de>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a27      	ldr	r2, [pc, #156]	; (8002ef0 <DMA_SetConfig+0x33c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d01d      	beq.n	8002e92 <DMA_SetConfig+0x2de>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a26      	ldr	r2, [pc, #152]	; (8002ef4 <DMA_SetConfig+0x340>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d018      	beq.n	8002e92 <DMA_SetConfig+0x2de>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a24      	ldr	r2, [pc, #144]	; (8002ef8 <DMA_SetConfig+0x344>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d013      	beq.n	8002e92 <DMA_SetConfig+0x2de>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a23      	ldr	r2, [pc, #140]	; (8002efc <DMA_SetConfig+0x348>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00e      	beq.n	8002e92 <DMA_SetConfig+0x2de>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a21      	ldr	r2, [pc, #132]	; (8002f00 <DMA_SetConfig+0x34c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d009      	beq.n	8002e92 <DMA_SetConfig+0x2de>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a20      	ldr	r2, [pc, #128]	; (8002f04 <DMA_SetConfig+0x350>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d004      	beq.n	8002e92 <DMA_SetConfig+0x2de>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a1e      	ldr	r2, [pc, #120]	; (8002f08 <DMA_SetConfig+0x354>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d101      	bne.n	8002e96 <DMA_SetConfig+0x2e2>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <DMA_SetConfig+0x2e4>
 8002e96:	2300      	movs	r3, #0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d020      	beq.n	8002ede <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea0:	f003 031f 	and.w	r3, r3, #31
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	409a      	lsls	r2, r3
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2b40      	cmp	r3, #64	; 0x40
 8002eba:	d108      	bne.n	8002ece <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	60da      	str	r2, [r3, #12]
}
 8002ecc:	e007      	b.n	8002ede <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	60da      	str	r2, [r3, #12]
}
 8002ede:	bf00      	nop
 8002ee0:	371c      	adds	r7, #28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	58025408 	.word	0x58025408
 8002ef0:	5802541c 	.word	0x5802541c
 8002ef4:	58025430 	.word	0x58025430
 8002ef8:	58025444 	.word	0x58025444
 8002efc:	58025458 	.word	0x58025458
 8002f00:	5802546c 	.word	0x5802546c
 8002f04:	58025480 	.word	0x58025480
 8002f08:	58025494 	.word	0x58025494

08002f0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a42      	ldr	r2, [pc, #264]	; (8003024 <DMA_CalcBaseAndBitshift+0x118>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d04a      	beq.n	8002fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a41      	ldr	r2, [pc, #260]	; (8003028 <DMA_CalcBaseAndBitshift+0x11c>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d045      	beq.n	8002fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a3f      	ldr	r2, [pc, #252]	; (800302c <DMA_CalcBaseAndBitshift+0x120>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d040      	beq.n	8002fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a3e      	ldr	r2, [pc, #248]	; (8003030 <DMA_CalcBaseAndBitshift+0x124>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d03b      	beq.n	8002fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a3c      	ldr	r2, [pc, #240]	; (8003034 <DMA_CalcBaseAndBitshift+0x128>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d036      	beq.n	8002fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a3b      	ldr	r2, [pc, #236]	; (8003038 <DMA_CalcBaseAndBitshift+0x12c>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d031      	beq.n	8002fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a39      	ldr	r2, [pc, #228]	; (800303c <DMA_CalcBaseAndBitshift+0x130>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d02c      	beq.n	8002fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a38      	ldr	r2, [pc, #224]	; (8003040 <DMA_CalcBaseAndBitshift+0x134>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d027      	beq.n	8002fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a36      	ldr	r2, [pc, #216]	; (8003044 <DMA_CalcBaseAndBitshift+0x138>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d022      	beq.n	8002fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a35      	ldr	r2, [pc, #212]	; (8003048 <DMA_CalcBaseAndBitshift+0x13c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d01d      	beq.n	8002fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a33      	ldr	r2, [pc, #204]	; (800304c <DMA_CalcBaseAndBitshift+0x140>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d018      	beq.n	8002fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a32      	ldr	r2, [pc, #200]	; (8003050 <DMA_CalcBaseAndBitshift+0x144>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d013      	beq.n	8002fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a30      	ldr	r2, [pc, #192]	; (8003054 <DMA_CalcBaseAndBitshift+0x148>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d00e      	beq.n	8002fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a2f      	ldr	r2, [pc, #188]	; (8003058 <DMA_CalcBaseAndBitshift+0x14c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d009      	beq.n	8002fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a2d      	ldr	r2, [pc, #180]	; (800305c <DMA_CalcBaseAndBitshift+0x150>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d004      	beq.n	8002fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a2c      	ldr	r2, [pc, #176]	; (8003060 <DMA_CalcBaseAndBitshift+0x154>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d101      	bne.n	8002fb8 <DMA_CalcBaseAndBitshift+0xac>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <DMA_CalcBaseAndBitshift+0xae>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d024      	beq.n	8003008 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	3b10      	subs	r3, #16
 8002fc6:	4a27      	ldr	r2, [pc, #156]	; (8003064 <DMA_CalcBaseAndBitshift+0x158>)
 8002fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	4a24      	ldr	r2, [pc, #144]	; (8003068 <DMA_CalcBaseAndBitshift+0x15c>)
 8002fd8:	5cd3      	ldrb	r3, [r2, r3]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d908      	bls.n	8002ff8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	4b1f      	ldr	r3, [pc, #124]	; (800306c <DMA_CalcBaseAndBitshift+0x160>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	1d1a      	adds	r2, r3, #4
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	659a      	str	r2, [r3, #88]	; 0x58
 8002ff6:	e00d      	b.n	8003014 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4b1b      	ldr	r3, [pc, #108]	; (800306c <DMA_CalcBaseAndBitshift+0x160>)
 8003000:	4013      	ands	r3, r2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6593      	str	r3, [r2, #88]	; 0x58
 8003006:	e005      	b.n	8003014 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003018:	4618      	mov	r0, r3
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	40020010 	.word	0x40020010
 8003028:	40020028 	.word	0x40020028
 800302c:	40020040 	.word	0x40020040
 8003030:	40020058 	.word	0x40020058
 8003034:	40020070 	.word	0x40020070
 8003038:	40020088 	.word	0x40020088
 800303c:	400200a0 	.word	0x400200a0
 8003040:	400200b8 	.word	0x400200b8
 8003044:	40020410 	.word	0x40020410
 8003048:	40020428 	.word	0x40020428
 800304c:	40020440 	.word	0x40020440
 8003050:	40020458 	.word	0x40020458
 8003054:	40020470 	.word	0x40020470
 8003058:	40020488 	.word	0x40020488
 800305c:	400204a0 	.word	0x400204a0
 8003060:	400204b8 	.word	0x400204b8
 8003064:	aaaaaaab 	.word	0xaaaaaaab
 8003068:	08004ff4 	.word	0x08004ff4
 800306c:	fffffc00 	.word	0xfffffc00

08003070 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d120      	bne.n	80030c6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003088:	2b03      	cmp	r3, #3
 800308a:	d858      	bhi.n	800313e <DMA_CheckFifoParam+0xce>
 800308c:	a201      	add	r2, pc, #4	; (adr r2, 8003094 <DMA_CheckFifoParam+0x24>)
 800308e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003092:	bf00      	nop
 8003094:	080030a5 	.word	0x080030a5
 8003098:	080030b7 	.word	0x080030b7
 800309c:	080030a5 	.word	0x080030a5
 80030a0:	0800313f 	.word	0x0800313f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d048      	beq.n	8003142 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80030b4:	e045      	b.n	8003142 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030be:	d142      	bne.n	8003146 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80030c4:	e03f      	b.n	8003146 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ce:	d123      	bne.n	8003118 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d838      	bhi.n	800314a <DMA_CheckFifoParam+0xda>
 80030d8:	a201      	add	r2, pc, #4	; (adr r2, 80030e0 <DMA_CheckFifoParam+0x70>)
 80030da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030de:	bf00      	nop
 80030e0:	080030f1 	.word	0x080030f1
 80030e4:	080030f7 	.word	0x080030f7
 80030e8:	080030f1 	.word	0x080030f1
 80030ec:	08003109 	.word	0x08003109
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
        break;
 80030f4:	e030      	b.n	8003158 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d025      	beq.n	800314e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003106:	e022      	b.n	800314e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003110:	d11f      	bne.n	8003152 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003116:	e01c      	b.n	8003152 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	2b02      	cmp	r3, #2
 800311e:	d902      	bls.n	8003126 <DMA_CheckFifoParam+0xb6>
 8003120:	2b03      	cmp	r3, #3
 8003122:	d003      	beq.n	800312c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003124:	e018      	b.n	8003158 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	73fb      	strb	r3, [r7, #15]
        break;
 800312a:	e015      	b.n	8003158 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00e      	beq.n	8003156 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
    break;
 800313c:	e00b      	b.n	8003156 <DMA_CheckFifoParam+0xe6>
        break;
 800313e:	bf00      	nop
 8003140:	e00a      	b.n	8003158 <DMA_CheckFifoParam+0xe8>
        break;
 8003142:	bf00      	nop
 8003144:	e008      	b.n	8003158 <DMA_CheckFifoParam+0xe8>
        break;
 8003146:	bf00      	nop
 8003148:	e006      	b.n	8003158 <DMA_CheckFifoParam+0xe8>
        break;
 800314a:	bf00      	nop
 800314c:	e004      	b.n	8003158 <DMA_CheckFifoParam+0xe8>
        break;
 800314e:	bf00      	nop
 8003150:	e002      	b.n	8003158 <DMA_CheckFifoParam+0xe8>
        break;
 8003152:	bf00      	nop
 8003154:	e000      	b.n	8003158 <DMA_CheckFifoParam+0xe8>
    break;
 8003156:	bf00      	nop
    }
  }

  return status;
 8003158:	7bfb      	ldrb	r3, [r7, #15]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop

08003168 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a38      	ldr	r2, [pc, #224]	; (800325c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d022      	beq.n	80031c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a36      	ldr	r2, [pc, #216]	; (8003260 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d01d      	beq.n	80031c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a35      	ldr	r2, [pc, #212]	; (8003264 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d018      	beq.n	80031c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a33      	ldr	r2, [pc, #204]	; (8003268 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d013      	beq.n	80031c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a32      	ldr	r2, [pc, #200]	; (800326c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d00e      	beq.n	80031c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a30      	ldr	r2, [pc, #192]	; (8003270 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d009      	beq.n	80031c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a2f      	ldr	r2, [pc, #188]	; (8003274 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d004      	beq.n	80031c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a2d      	ldr	r2, [pc, #180]	; (8003278 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d101      	bne.n	80031ca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80031ca:	2300      	movs	r3, #0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01a      	beq.n	8003206 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	3b08      	subs	r3, #8
 80031d8:	4a28      	ldr	r2, [pc, #160]	; (800327c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80031da:	fba2 2303 	umull	r2, r3, r2, r3
 80031de:	091b      	lsrs	r3, r3, #4
 80031e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4b26      	ldr	r3, [pc, #152]	; (8003280 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	461a      	mov	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a24      	ldr	r2, [pc, #144]	; (8003284 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80031f4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f003 031f 	and.w	r3, r3, #31
 80031fc:	2201      	movs	r2, #1
 80031fe:	409a      	lsls	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003204:	e024      	b.n	8003250 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	3b10      	subs	r3, #16
 800320e:	4a1e      	ldr	r2, [pc, #120]	; (8003288 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003210:	fba2 2303 	umull	r2, r3, r2, r3
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	4a1c      	ldr	r2, [pc, #112]	; (800328c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d806      	bhi.n	800322e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4a1b      	ldr	r2, [pc, #108]	; (8003290 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d902      	bls.n	800322e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	3308      	adds	r3, #8
 800322c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4b18      	ldr	r3, [pc, #96]	; (8003294 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	461a      	mov	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a16      	ldr	r2, [pc, #88]	; (8003298 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003240:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	2201      	movs	r2, #1
 800324a:	409a      	lsls	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003250:	bf00      	nop
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	58025408 	.word	0x58025408
 8003260:	5802541c 	.word	0x5802541c
 8003264:	58025430 	.word	0x58025430
 8003268:	58025444 	.word	0x58025444
 800326c:	58025458 	.word	0x58025458
 8003270:	5802546c 	.word	0x5802546c
 8003274:	58025480 	.word	0x58025480
 8003278:	58025494 	.word	0x58025494
 800327c:	cccccccd 	.word	0xcccccccd
 8003280:	16009600 	.word	0x16009600
 8003284:	58025880 	.word	0x58025880
 8003288:	aaaaaaab 	.word	0xaaaaaaab
 800328c:	400204b8 	.word	0x400204b8
 8003290:	4002040f 	.word	0x4002040f
 8003294:	10008200 	.word	0x10008200
 8003298:	40020880 	.word	0x40020880

0800329c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d04a      	beq.n	8003348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d847      	bhi.n	8003348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a25      	ldr	r2, [pc, #148]	; (8003354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d022      	beq.n	8003308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a24      	ldr	r2, [pc, #144]	; (8003358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d01d      	beq.n	8003308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a22      	ldr	r2, [pc, #136]	; (800335c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d018      	beq.n	8003308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a21      	ldr	r2, [pc, #132]	; (8003360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d013      	beq.n	8003308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a1f      	ldr	r2, [pc, #124]	; (8003364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00e      	beq.n	8003308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a1e      	ldr	r2, [pc, #120]	; (8003368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d009      	beq.n	8003308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a1c      	ldr	r2, [pc, #112]	; (800336c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d004      	beq.n	8003308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1b      	ldr	r2, [pc, #108]	; (8003370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d101      	bne.n	800330c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003308:	2301      	movs	r3, #1
 800330a:	e000      	b.n	800330e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800330c:	2300      	movs	r3, #0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	4b17      	ldr	r3, [pc, #92]	; (8003374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	461a      	mov	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a15      	ldr	r2, [pc, #84]	; (8003378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003324:	671a      	str	r2, [r3, #112]	; 0x70
 8003326:	e009      	b.n	800333c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	4b14      	ldr	r3, [pc, #80]	; (800337c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	461a      	mov	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a11      	ldr	r2, [pc, #68]	; (8003380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800333a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	3b01      	subs	r3, #1
 8003340:	2201      	movs	r2, #1
 8003342:	409a      	lsls	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003348:	bf00      	nop
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	58025408 	.word	0x58025408
 8003358:	5802541c 	.word	0x5802541c
 800335c:	58025430 	.word	0x58025430
 8003360:	58025444 	.word	0x58025444
 8003364:	58025458 	.word	0x58025458
 8003368:	5802546c 	.word	0x5802546c
 800336c:	58025480 	.word	0x58025480
 8003370:	58025494 	.word	0x58025494
 8003374:	1600963f 	.word	0x1600963f
 8003378:	58025940 	.word	0x58025940
 800337c:	1000823f 	.word	0x1000823f
 8003380:	40020940 	.word	0x40020940

08003384 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b80      	cmp	r3, #128	; 0x80
 800339c:	d105      	bne.n	80033aa <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e315      	b.n	80039d6 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d101      	bne.n	80033b8 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 80033b4:	2302      	movs	r3, #2
 80033b6:	e30e      	b.n	80039d6 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	f040 82fd 	bne.w	80039c8 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2202      	movs	r2, #2
 80033d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a82      	ldr	r2, [pc, #520]	; (80035ec <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d04a      	beq.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a81      	ldr	r2, [pc, #516]	; (80035f0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d045      	beq.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a7f      	ldr	r2, [pc, #508]	; (80035f4 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d040      	beq.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a7e      	ldr	r2, [pc, #504]	; (80035f8 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d03b      	beq.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a7c      	ldr	r2, [pc, #496]	; (80035fc <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d036      	beq.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a7b      	ldr	r2, [pc, #492]	; (8003600 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d031      	beq.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a79      	ldr	r2, [pc, #484]	; (8003604 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d02c      	beq.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a78      	ldr	r2, [pc, #480]	; (8003608 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d027      	beq.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a76      	ldr	r2, [pc, #472]	; (800360c <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d022      	beq.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a75      	ldr	r2, [pc, #468]	; (8003610 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d01d      	beq.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a73      	ldr	r2, [pc, #460]	; (8003614 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d018      	beq.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a72      	ldr	r2, [pc, #456]	; (8003618 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d013      	beq.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a70      	ldr	r2, [pc, #448]	; (800361c <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00e      	beq.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a6f      	ldr	r2, [pc, #444]	; (8003620 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d009      	beq.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a6d      	ldr	r2, [pc, #436]	; (8003624 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d004      	beq.n	800347c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a6c      	ldr	r2, [pc, #432]	; (8003628 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d101      	bne.n	8003480 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8003480:	2300      	movs	r3, #0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d018      	beq.n	80034b8 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003494:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a2:	3308      	adds	r3, #8
 80034a4:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034aa:	f003 031f 	and.w	r3, r3, #31
 80034ae:	223f      	movs	r2, #63	; 0x3f
 80034b0:	409a      	lsls	r2, r3
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	e018      	b.n	80034ea <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6819      	ldr	r1, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	f248 0320 	movw	r3, #32800	; 0x8020
 80034c6:	430b      	orrs	r3, r1
 80034c8:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d6:	3304      	adds	r3, #4
 80034d8:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034de:	f003 031f 	and.w	r3, r3, #31
 80034e2:	2201      	movs	r2, #1
 80034e4:	409a      	lsls	r2, r3
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	68b9      	ldr	r1, [r7, #8]
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 fb41 	bl	8003b78 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a3c      	ldr	r2, [pc, #240]	; (80035ec <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d072      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a3a      	ldr	r2, [pc, #232]	; (80035f0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d06d      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a39      	ldr	r2, [pc, #228]	; (80035f4 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d068      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a37      	ldr	r2, [pc, #220]	; (80035f8 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d063      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a36      	ldr	r2, [pc, #216]	; (80035fc <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d05e      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a34      	ldr	r2, [pc, #208]	; (8003600 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d059      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a33      	ldr	r2, [pc, #204]	; (8003604 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d054      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a31      	ldr	r2, [pc, #196]	; (8003608 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d04f      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a30      	ldr	r2, [pc, #192]	; (800360c <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d04a      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a2e      	ldr	r2, [pc, #184]	; (8003610 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d045      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a2d      	ldr	r2, [pc, #180]	; (8003614 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d040      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a2b      	ldr	r2, [pc, #172]	; (8003618 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d03b      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a2a      	ldr	r2, [pc, #168]	; (800361c <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d036      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a28      	ldr	r2, [pc, #160]	; (8003620 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d031      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a27      	ldr	r2, [pc, #156]	; (8003624 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d02c      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a25      	ldr	r2, [pc, #148]	; (8003628 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d027      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a24      	ldr	r2, [pc, #144]	; (800362c <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d022      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a22      	ldr	r2, [pc, #136]	; (8003630 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d01d      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a21      	ldr	r2, [pc, #132]	; (8003634 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d018      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a1f      	ldr	r2, [pc, #124]	; (8003638 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d013      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a1e      	ldr	r2, [pc, #120]	; (800363c <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d00e      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a1c      	ldr	r2, [pc, #112]	; (8003640 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d009      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1b      	ldr	r2, [pc, #108]	; (8003644 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d004      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a19      	ldr	r2, [pc, #100]	; (8003648 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d132      	bne.n	800364c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e031      	b.n	800364e <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 80035ea:	bf00      	nop
 80035ec:	40020010 	.word	0x40020010
 80035f0:	40020028 	.word	0x40020028
 80035f4:	40020040 	.word	0x40020040
 80035f8:	40020058 	.word	0x40020058
 80035fc:	40020070 	.word	0x40020070
 8003600:	40020088 	.word	0x40020088
 8003604:	400200a0 	.word	0x400200a0
 8003608:	400200b8 	.word	0x400200b8
 800360c:	40020410 	.word	0x40020410
 8003610:	40020428 	.word	0x40020428
 8003614:	40020440 	.word	0x40020440
 8003618:	40020458 	.word	0x40020458
 800361c:	40020470 	.word	0x40020470
 8003620:	40020488 	.word	0x40020488
 8003624:	400204a0 	.word	0x400204a0
 8003628:	400204b8 	.word	0x400204b8
 800362c:	58025408 	.word	0x58025408
 8003630:	5802541c 	.word	0x5802541c
 8003634:	58025430 	.word	0x58025430
 8003638:	58025444 	.word	0x58025444
 800363c:	58025458 	.word	0x58025458
 8003640:	5802546c 	.word	0x5802546c
 8003644:	58025480 	.word	0x58025480
 8003648:	58025494 	.word	0x58025494
 800364c:	2300      	movs	r3, #0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00d      	beq.n	800366e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800365a:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003660:	2b00      	cmp	r3, #0
 8003662:	d004      	beq.n	800366e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800366c:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a3b      	ldr	r2, [pc, #236]	; (8003760 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d04a      	beq.n	800370e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a39      	ldr	r2, [pc, #228]	; (8003764 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d045      	beq.n	800370e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a38      	ldr	r2, [pc, #224]	; (8003768 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d040      	beq.n	800370e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a36      	ldr	r2, [pc, #216]	; (800376c <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d03b      	beq.n	800370e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a35      	ldr	r2, [pc, #212]	; (8003770 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d036      	beq.n	800370e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a33      	ldr	r2, [pc, #204]	; (8003774 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d031      	beq.n	800370e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a32      	ldr	r2, [pc, #200]	; (8003778 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d02c      	beq.n	800370e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a30      	ldr	r2, [pc, #192]	; (800377c <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d027      	beq.n	800370e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a2f      	ldr	r2, [pc, #188]	; (8003780 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d022      	beq.n	800370e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a2d      	ldr	r2, [pc, #180]	; (8003784 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d01d      	beq.n	800370e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a2c      	ldr	r2, [pc, #176]	; (8003788 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d018      	beq.n	800370e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a2a      	ldr	r2, [pc, #168]	; (800378c <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d013      	beq.n	800370e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a29      	ldr	r2, [pc, #164]	; (8003790 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d00e      	beq.n	800370e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a27      	ldr	r2, [pc, #156]	; (8003794 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d009      	beq.n	800370e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a26      	ldr	r2, [pc, #152]	; (8003798 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d004      	beq.n	800370e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a24      	ldr	r2, [pc, #144]	; (800379c <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d101      	bne.n	8003712 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8003712:	2300      	movs	r3, #0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d043      	beq.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f023 021e 	bic.w	r2, r3, #30
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0216 	orr.w	r2, r2, #22
 800372a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800373a:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	d103      	bne.n	800374c <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003748:	2b00      	cmp	r3, #0
 800374a:	d043      	beq.n	80037d4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0208 	orr.w	r2, r2, #8
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	e03a      	b.n	80037d4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 800375e:	bf00      	nop
 8003760:	40020010 	.word	0x40020010
 8003764:	40020028 	.word	0x40020028
 8003768:	40020040 	.word	0x40020040
 800376c:	40020058 	.word	0x40020058
 8003770:	40020070 	.word	0x40020070
 8003774:	40020088 	.word	0x40020088
 8003778:	400200a0 	.word	0x400200a0
 800377c:	400200b8 	.word	0x400200b8
 8003780:	40020410 	.word	0x40020410
 8003784:	40020428 	.word	0x40020428
 8003788:	40020440 	.word	0x40020440
 800378c:	40020458 	.word	0x40020458
 8003790:	40020470 	.word	0x40020470
 8003794:	40020488 	.word	0x40020488
 8003798:	400204a0 	.word	0x400204a0
 800379c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f023 020e 	bic.w	r2, r3, #14
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 020a 	orr.w	r2, r2, #10
 80037b2:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d103      	bne.n	80037c4 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d007      	beq.n	80037d4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0204 	orr.w	r2, r2, #4
 80037d2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a81      	ldr	r2, [pc, #516]	; (80039e0 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d072      	beq.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a80      	ldr	r2, [pc, #512]	; (80039e4 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d06d      	beq.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a7e      	ldr	r2, [pc, #504]	; (80039e8 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d068      	beq.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a7d      	ldr	r2, [pc, #500]	; (80039ec <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d063      	beq.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a7b      	ldr	r2, [pc, #492]	; (80039f0 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d05e      	beq.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a7a      	ldr	r2, [pc, #488]	; (80039f4 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d059      	beq.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a78      	ldr	r2, [pc, #480]	; (80039f8 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d054      	beq.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a77      	ldr	r2, [pc, #476]	; (80039fc <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d04f      	beq.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a75      	ldr	r2, [pc, #468]	; (8003a00 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d04a      	beq.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a74      	ldr	r2, [pc, #464]	; (8003a04 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d045      	beq.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a72      	ldr	r2, [pc, #456]	; (8003a08 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d040      	beq.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a71      	ldr	r2, [pc, #452]	; (8003a0c <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d03b      	beq.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a6f      	ldr	r2, [pc, #444]	; (8003a10 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d036      	beq.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a6e      	ldr	r2, [pc, #440]	; (8003a14 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d031      	beq.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a6c      	ldr	r2, [pc, #432]	; (8003a18 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d02c      	beq.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a6b      	ldr	r2, [pc, #428]	; (8003a1c <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d027      	beq.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a69      	ldr	r2, [pc, #420]	; (8003a20 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d022      	beq.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a68      	ldr	r2, [pc, #416]	; (8003a24 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d01d      	beq.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a66      	ldr	r2, [pc, #408]	; (8003a28 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d018      	beq.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a65      	ldr	r2, [pc, #404]	; (8003a2c <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d013      	beq.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a63      	ldr	r2, [pc, #396]	; (8003a30 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00e      	beq.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a62      	ldr	r2, [pc, #392]	; (8003a34 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d009      	beq.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a60      	ldr	r2, [pc, #384]	; (8003a38 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d004      	beq.n	80038c4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a5f      	ldr	r2, [pc, #380]	; (8003a3c <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d101      	bne.n	80038c8 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <HAL_DMAEx_MultiBufferStart_IT+0x546>
 80038c8:	2300      	movs	r3, #0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d01a      	beq.n	8003904 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d007      	beq.n	80038ec <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ea:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d007      	beq.n	8003904 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003902:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a35      	ldr	r2, [pc, #212]	; (80039e0 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d04a      	beq.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a34      	ldr	r2, [pc, #208]	; (80039e4 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d045      	beq.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a32      	ldr	r2, [pc, #200]	; (80039e8 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d040      	beq.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a31      	ldr	r2, [pc, #196]	; (80039ec <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d03b      	beq.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a2f      	ldr	r2, [pc, #188]	; (80039f0 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d036      	beq.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a2e      	ldr	r2, [pc, #184]	; (80039f4 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d031      	beq.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a2c      	ldr	r2, [pc, #176]	; (80039f8 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d02c      	beq.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a2b      	ldr	r2, [pc, #172]	; (80039fc <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d027      	beq.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a29      	ldr	r2, [pc, #164]	; (8003a00 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d022      	beq.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a28      	ldr	r2, [pc, #160]	; (8003a04 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d01d      	beq.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a26      	ldr	r2, [pc, #152]	; (8003a08 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d018      	beq.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a25      	ldr	r2, [pc, #148]	; (8003a0c <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d013      	beq.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a23      	ldr	r2, [pc, #140]	; (8003a10 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d00e      	beq.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a22      	ldr	r2, [pc, #136]	; (8003a14 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d009      	beq.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a20      	ldr	r2, [pc, #128]	; (8003a18 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d004      	beq.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a1f      	ldr	r2, [pc, #124]	; (8003a1c <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d108      	bne.n	80039b6 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0201 	orr.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	e00e      	b.n	80039d4 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f042 0201 	orr.w	r2, r2, #1
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	e005      	b.n	80039d4 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40020010 	.word	0x40020010
 80039e4:	40020028 	.word	0x40020028
 80039e8:	40020040 	.word	0x40020040
 80039ec:	40020058 	.word	0x40020058
 80039f0:	40020070 	.word	0x40020070
 80039f4:	40020088 	.word	0x40020088
 80039f8:	400200a0 	.word	0x400200a0
 80039fc:	400200b8 	.word	0x400200b8
 8003a00:	40020410 	.word	0x40020410
 8003a04:	40020428 	.word	0x40020428
 8003a08:	40020440 	.word	0x40020440
 8003a0c:	40020458 	.word	0x40020458
 8003a10:	40020470 	.word	0x40020470
 8003a14:	40020488 	.word	0x40020488
 8003a18:	400204a0 	.word	0x400204a0
 8003a1c:	400204b8 	.word	0x400204b8
 8003a20:	58025408 	.word	0x58025408
 8003a24:	5802541c 	.word	0x5802541c
 8003a28:	58025430 	.word	0x58025430
 8003a2c:	58025444 	.word	0x58025444
 8003a30:	58025458 	.word	0x58025458
 8003a34:	5802546c 	.word	0x5802546c
 8003a38:	58025480 	.word	0x58025480
 8003a3c:	58025494 	.word	0x58025494

08003a40 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a39      	ldr	r2, [pc, #228]	; (8003b38 <HAL_DMAEx_ChangeMemory+0xf8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d04a      	beq.n	8003aee <HAL_DMAEx_ChangeMemory+0xae>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a37      	ldr	r2, [pc, #220]	; (8003b3c <HAL_DMAEx_ChangeMemory+0xfc>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d045      	beq.n	8003aee <HAL_DMAEx_ChangeMemory+0xae>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a36      	ldr	r2, [pc, #216]	; (8003b40 <HAL_DMAEx_ChangeMemory+0x100>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d040      	beq.n	8003aee <HAL_DMAEx_ChangeMemory+0xae>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a34      	ldr	r2, [pc, #208]	; (8003b44 <HAL_DMAEx_ChangeMemory+0x104>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d03b      	beq.n	8003aee <HAL_DMAEx_ChangeMemory+0xae>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a33      	ldr	r2, [pc, #204]	; (8003b48 <HAL_DMAEx_ChangeMemory+0x108>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d036      	beq.n	8003aee <HAL_DMAEx_ChangeMemory+0xae>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a31      	ldr	r2, [pc, #196]	; (8003b4c <HAL_DMAEx_ChangeMemory+0x10c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d031      	beq.n	8003aee <HAL_DMAEx_ChangeMemory+0xae>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a30      	ldr	r2, [pc, #192]	; (8003b50 <HAL_DMAEx_ChangeMemory+0x110>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d02c      	beq.n	8003aee <HAL_DMAEx_ChangeMemory+0xae>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a2e      	ldr	r2, [pc, #184]	; (8003b54 <HAL_DMAEx_ChangeMemory+0x114>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d027      	beq.n	8003aee <HAL_DMAEx_ChangeMemory+0xae>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a2d      	ldr	r2, [pc, #180]	; (8003b58 <HAL_DMAEx_ChangeMemory+0x118>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d022      	beq.n	8003aee <HAL_DMAEx_ChangeMemory+0xae>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a2b      	ldr	r2, [pc, #172]	; (8003b5c <HAL_DMAEx_ChangeMemory+0x11c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d01d      	beq.n	8003aee <HAL_DMAEx_ChangeMemory+0xae>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a2a      	ldr	r2, [pc, #168]	; (8003b60 <HAL_DMAEx_ChangeMemory+0x120>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d018      	beq.n	8003aee <HAL_DMAEx_ChangeMemory+0xae>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a28      	ldr	r2, [pc, #160]	; (8003b64 <HAL_DMAEx_ChangeMemory+0x124>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d013      	beq.n	8003aee <HAL_DMAEx_ChangeMemory+0xae>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a27      	ldr	r2, [pc, #156]	; (8003b68 <HAL_DMAEx_ChangeMemory+0x128>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00e      	beq.n	8003aee <HAL_DMAEx_ChangeMemory+0xae>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a25      	ldr	r2, [pc, #148]	; (8003b6c <HAL_DMAEx_ChangeMemory+0x12c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d009      	beq.n	8003aee <HAL_DMAEx_ChangeMemory+0xae>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a24      	ldr	r2, [pc, #144]	; (8003b70 <HAL_DMAEx_ChangeMemory+0x130>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d004      	beq.n	8003aee <HAL_DMAEx_ChangeMemory+0xae>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a22      	ldr	r2, [pc, #136]	; (8003b74 <HAL_DMAEx_ChangeMemory+0x134>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d101      	bne.n	8003af2 <HAL_DMAEx_ChangeMemory+0xb2>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <HAL_DMAEx_ChangeMemory+0xb4>
 8003af2:	2300      	movs	r3, #0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00c      	beq.n	8003b12 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8003af8:	79fb      	ldrb	r3, [r7, #7]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d104      	bne.n	8003b08 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	60da      	str	r2, [r3, #12]
 8003b06:	e010      	b.n	8003b2a <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	611a      	str	r2, [r3, #16]
 8003b10:	e00b      	b.n	8003b2a <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d104      	bne.n	8003b22 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	60da      	str	r2, [r3, #12]
 8003b20:	e003      	b.n	8003b2a <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	40020010 	.word	0x40020010
 8003b3c:	40020028 	.word	0x40020028
 8003b40:	40020040 	.word	0x40020040
 8003b44:	40020058 	.word	0x40020058
 8003b48:	40020070 	.word	0x40020070
 8003b4c:	40020088 	.word	0x40020088
 8003b50:	400200a0 	.word	0x400200a0
 8003b54:	400200b8 	.word	0x400200b8
 8003b58:	40020410 	.word	0x40020410
 8003b5c:	40020428 	.word	0x40020428
 8003b60:	40020440 	.word	0x40020440
 8003b64:	40020458 	.word	0x40020458
 8003b68:	40020470 	.word	0x40020470
 8003b6c:	40020488 	.word	0x40020488
 8003b70:	400204a0 	.word	0x400204a0
 8003b74:	400204b8 	.word	0x400204b8

08003b78 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a46      	ldr	r2, [pc, #280]	; (8003ca4 <DMA_MultiBufferSetConfig+0x12c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d04a      	beq.n	8003c26 <DMA_MultiBufferSetConfig+0xae>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a44      	ldr	r2, [pc, #272]	; (8003ca8 <DMA_MultiBufferSetConfig+0x130>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d045      	beq.n	8003c26 <DMA_MultiBufferSetConfig+0xae>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a43      	ldr	r2, [pc, #268]	; (8003cac <DMA_MultiBufferSetConfig+0x134>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d040      	beq.n	8003c26 <DMA_MultiBufferSetConfig+0xae>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a41      	ldr	r2, [pc, #260]	; (8003cb0 <DMA_MultiBufferSetConfig+0x138>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d03b      	beq.n	8003c26 <DMA_MultiBufferSetConfig+0xae>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a40      	ldr	r2, [pc, #256]	; (8003cb4 <DMA_MultiBufferSetConfig+0x13c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d036      	beq.n	8003c26 <DMA_MultiBufferSetConfig+0xae>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a3e      	ldr	r2, [pc, #248]	; (8003cb8 <DMA_MultiBufferSetConfig+0x140>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d031      	beq.n	8003c26 <DMA_MultiBufferSetConfig+0xae>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a3d      	ldr	r2, [pc, #244]	; (8003cbc <DMA_MultiBufferSetConfig+0x144>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d02c      	beq.n	8003c26 <DMA_MultiBufferSetConfig+0xae>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a3b      	ldr	r2, [pc, #236]	; (8003cc0 <DMA_MultiBufferSetConfig+0x148>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d027      	beq.n	8003c26 <DMA_MultiBufferSetConfig+0xae>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a3a      	ldr	r2, [pc, #232]	; (8003cc4 <DMA_MultiBufferSetConfig+0x14c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d022      	beq.n	8003c26 <DMA_MultiBufferSetConfig+0xae>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a38      	ldr	r2, [pc, #224]	; (8003cc8 <DMA_MultiBufferSetConfig+0x150>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d01d      	beq.n	8003c26 <DMA_MultiBufferSetConfig+0xae>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a37      	ldr	r2, [pc, #220]	; (8003ccc <DMA_MultiBufferSetConfig+0x154>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d018      	beq.n	8003c26 <DMA_MultiBufferSetConfig+0xae>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a35      	ldr	r2, [pc, #212]	; (8003cd0 <DMA_MultiBufferSetConfig+0x158>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d013      	beq.n	8003c26 <DMA_MultiBufferSetConfig+0xae>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a34      	ldr	r2, [pc, #208]	; (8003cd4 <DMA_MultiBufferSetConfig+0x15c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d00e      	beq.n	8003c26 <DMA_MultiBufferSetConfig+0xae>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a32      	ldr	r2, [pc, #200]	; (8003cd8 <DMA_MultiBufferSetConfig+0x160>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d009      	beq.n	8003c26 <DMA_MultiBufferSetConfig+0xae>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a31      	ldr	r2, [pc, #196]	; (8003cdc <DMA_MultiBufferSetConfig+0x164>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d004      	beq.n	8003c26 <DMA_MultiBufferSetConfig+0xae>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a2f      	ldr	r2, [pc, #188]	; (8003ce0 <DMA_MultiBufferSetConfig+0x168>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d101      	bne.n	8003c2a <DMA_MultiBufferSetConfig+0xb2>
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <DMA_MultiBufferSetConfig+0xb4>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d019      	beq.n	8003c64 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b40      	cmp	r3, #64	; 0x40
 8003c3e:	d108      	bne.n	8003c52 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8003c50:	e021      	b.n	8003c96 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	60da      	str	r2, [r3, #12]
}
 8003c62:	e018      	b.n	8003c96 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2b40      	cmp	r3, #64	; 0x40
 8003c72:	d108      	bne.n	8003c86 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	60da      	str	r2, [r3, #12]
}
 8003c84:	e007      	b.n	8003c96 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	60da      	str	r2, [r3, #12]
}
 8003c96:	bf00      	nop
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	40020010 	.word	0x40020010
 8003ca8:	40020028 	.word	0x40020028
 8003cac:	40020040 	.word	0x40020040
 8003cb0:	40020058 	.word	0x40020058
 8003cb4:	40020070 	.word	0x40020070
 8003cb8:	40020088 	.word	0x40020088
 8003cbc:	400200a0 	.word	0x400200a0
 8003cc0:	400200b8 	.word	0x400200b8
 8003cc4:	40020410 	.word	0x40020410
 8003cc8:	40020428 	.word	0x40020428
 8003ccc:	40020440 	.word	0x40020440
 8003cd0:	40020458 	.word	0x40020458
 8003cd4:	40020470 	.word	0x40020470
 8003cd8:	40020488 	.word	0x40020488
 8003cdc:	400204a0 	.word	0x400204a0
 8003ce0:	400204b8 	.word	0x400204b8

08003ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b089      	sub	sp, #36	; 0x24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003cf2:	4b89      	ldr	r3, [pc, #548]	; (8003f18 <HAL_GPIO_Init+0x234>)
 8003cf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003cf6:	e194      	b.n	8004022 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	fa01 f303 	lsl.w	r3, r1, r3
 8003d04:	4013      	ands	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 8186 	beq.w	800401c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f003 0303 	and.w	r3, r3, #3
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d005      	beq.n	8003d28 <HAL_GPIO_Init+0x44>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d130      	bne.n	8003d8a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	2203      	movs	r2, #3
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d5e:	2201      	movs	r2, #1
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43db      	mvns	r3, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	091b      	lsrs	r3, r3, #4
 8003d74:	f003 0201 	and.w	r2, r3, #1
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	2b03      	cmp	r3, #3
 8003d94:	d017      	beq.n	8003dc6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	2203      	movs	r2, #3
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	43db      	mvns	r3, r3
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	4013      	ands	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d123      	bne.n	8003e1a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	08da      	lsrs	r2, r3, #3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3208      	adds	r2, #8
 8003dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	220f      	movs	r2, #15
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	43db      	mvns	r3, r3
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	4013      	ands	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	691a      	ldr	r2, [r3, #16]
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	08da      	lsrs	r2, r3, #3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3208      	adds	r2, #8
 8003e14:	69b9      	ldr	r1, [r7, #24]
 8003e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	2203      	movs	r2, #3
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f003 0203 	and.w	r2, r3, #3
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 80e0 	beq.w	800401c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e5c:	4b2f      	ldr	r3, [pc, #188]	; (8003f1c <HAL_GPIO_Init+0x238>)
 8003e5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e62:	4a2e      	ldr	r2, [pc, #184]	; (8003f1c <HAL_GPIO_Init+0x238>)
 8003e64:	f043 0302 	orr.w	r3, r3, #2
 8003e68:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003e6c:	4b2b      	ldr	r3, [pc, #172]	; (8003f1c <HAL_GPIO_Init+0x238>)
 8003e6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e7a:	4a29      	ldr	r2, [pc, #164]	; (8003f20 <HAL_GPIO_Init+0x23c>)
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	089b      	lsrs	r3, r3, #2
 8003e80:	3302      	adds	r3, #2
 8003e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	220f      	movs	r2, #15
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	43db      	mvns	r3, r3
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a20      	ldr	r2, [pc, #128]	; (8003f24 <HAL_GPIO_Init+0x240>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d052      	beq.n	8003f4c <HAL_GPIO_Init+0x268>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a1f      	ldr	r2, [pc, #124]	; (8003f28 <HAL_GPIO_Init+0x244>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d031      	beq.n	8003f12 <HAL_GPIO_Init+0x22e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a1e      	ldr	r2, [pc, #120]	; (8003f2c <HAL_GPIO_Init+0x248>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d02b      	beq.n	8003f0e <HAL_GPIO_Init+0x22a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a1d      	ldr	r2, [pc, #116]	; (8003f30 <HAL_GPIO_Init+0x24c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d025      	beq.n	8003f0a <HAL_GPIO_Init+0x226>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a1c      	ldr	r2, [pc, #112]	; (8003f34 <HAL_GPIO_Init+0x250>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d01f      	beq.n	8003f06 <HAL_GPIO_Init+0x222>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a1b      	ldr	r2, [pc, #108]	; (8003f38 <HAL_GPIO_Init+0x254>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d019      	beq.n	8003f02 <HAL_GPIO_Init+0x21e>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a1a      	ldr	r2, [pc, #104]	; (8003f3c <HAL_GPIO_Init+0x258>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d013      	beq.n	8003efe <HAL_GPIO_Init+0x21a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a19      	ldr	r2, [pc, #100]	; (8003f40 <HAL_GPIO_Init+0x25c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00d      	beq.n	8003efa <HAL_GPIO_Init+0x216>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a18      	ldr	r2, [pc, #96]	; (8003f44 <HAL_GPIO_Init+0x260>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d007      	beq.n	8003ef6 <HAL_GPIO_Init+0x212>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a17      	ldr	r2, [pc, #92]	; (8003f48 <HAL_GPIO_Init+0x264>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d101      	bne.n	8003ef2 <HAL_GPIO_Init+0x20e>
 8003eee:	2309      	movs	r3, #9
 8003ef0:	e02d      	b.n	8003f4e <HAL_GPIO_Init+0x26a>
 8003ef2:	230a      	movs	r3, #10
 8003ef4:	e02b      	b.n	8003f4e <HAL_GPIO_Init+0x26a>
 8003ef6:	2308      	movs	r3, #8
 8003ef8:	e029      	b.n	8003f4e <HAL_GPIO_Init+0x26a>
 8003efa:	2307      	movs	r3, #7
 8003efc:	e027      	b.n	8003f4e <HAL_GPIO_Init+0x26a>
 8003efe:	2306      	movs	r3, #6
 8003f00:	e025      	b.n	8003f4e <HAL_GPIO_Init+0x26a>
 8003f02:	2305      	movs	r3, #5
 8003f04:	e023      	b.n	8003f4e <HAL_GPIO_Init+0x26a>
 8003f06:	2304      	movs	r3, #4
 8003f08:	e021      	b.n	8003f4e <HAL_GPIO_Init+0x26a>
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e01f      	b.n	8003f4e <HAL_GPIO_Init+0x26a>
 8003f0e:	2302      	movs	r3, #2
 8003f10:	e01d      	b.n	8003f4e <HAL_GPIO_Init+0x26a>
 8003f12:	2301      	movs	r3, #1
 8003f14:	e01b      	b.n	8003f4e <HAL_GPIO_Init+0x26a>
 8003f16:	bf00      	nop
 8003f18:	58000080 	.word	0x58000080
 8003f1c:	58024400 	.word	0x58024400
 8003f20:	58000400 	.word	0x58000400
 8003f24:	58020000 	.word	0x58020000
 8003f28:	58020400 	.word	0x58020400
 8003f2c:	58020800 	.word	0x58020800
 8003f30:	58020c00 	.word	0x58020c00
 8003f34:	58021000 	.word	0x58021000
 8003f38:	58021400 	.word	0x58021400
 8003f3c:	58021800 	.word	0x58021800
 8003f40:	58021c00 	.word	0x58021c00
 8003f44:	58022000 	.word	0x58022000
 8003f48:	58022400 	.word	0x58022400
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	69fa      	ldr	r2, [r7, #28]
 8003f50:	f002 0203 	and.w	r2, r2, #3
 8003f54:	0092      	lsls	r2, r2, #2
 8003f56:	4093      	lsls	r3, r2
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f5e:	4938      	ldr	r1, [pc, #224]	; (8004040 <HAL_GPIO_Init+0x35c>)
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	089b      	lsrs	r3, r3, #2
 8003f64:	3302      	adds	r3, #2
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	43db      	mvns	r3, r3
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003f92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003fc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4013      	ands	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	3301      	adds	r3, #1
 8004020:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	fa22 f303 	lsr.w	r3, r2, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	f47f ae63 	bne.w	8003cf8 <HAL_GPIO_Init+0x14>
  }
}
 8004032:	bf00      	nop
 8004034:	bf00      	nop
 8004036:	3724      	adds	r7, #36	; 0x24
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	58000400 	.word	0x58000400

08004044 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800404c:	4b19      	ldr	r3, [pc, #100]	; (80040b4 <HAL_PWREx_ConfigSupply+0x70>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b04      	cmp	r3, #4
 8004056:	d00a      	beq.n	800406e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004058:	4b16      	ldr	r3, [pc, #88]	; (80040b4 <HAL_PWREx_ConfigSupply+0x70>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	429a      	cmp	r2, r3
 8004064:	d001      	beq.n	800406a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e01f      	b.n	80040aa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800406a:	2300      	movs	r3, #0
 800406c:	e01d      	b.n	80040aa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800406e:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <HAL_PWREx_ConfigSupply+0x70>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f023 0207 	bic.w	r2, r3, #7
 8004076:	490f      	ldr	r1, [pc, #60]	; (80040b4 <HAL_PWREx_ConfigSupply+0x70>)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4313      	orrs	r3, r2
 800407c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800407e:	f7fc fd8b 	bl	8000b98 <HAL_GetTick>
 8004082:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004084:	e009      	b.n	800409a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004086:	f7fc fd87 	bl	8000b98 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004094:	d901      	bls.n	800409a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e007      	b.n	80040aa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800409a:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <HAL_PWREx_ConfigSupply+0x70>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a6:	d1ee      	bne.n	8004086 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	58024800 	.word	0x58024800

080040b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08c      	sub	sp, #48	; 0x30
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d102      	bne.n	80040cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	f000 bc1d 	b.w	8004906 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 8087 	beq.w	80041e8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040da:	4b99      	ldr	r3, [pc, #612]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040e4:	4b96      	ldr	r3, [pc, #600]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 80040e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80040ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ec:	2b10      	cmp	r3, #16
 80040ee:	d007      	beq.n	8004100 <HAL_RCC_OscConfig+0x48>
 80040f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f2:	2b18      	cmp	r3, #24
 80040f4:	d110      	bne.n	8004118 <HAL_RCC_OscConfig+0x60>
 80040f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f8:	f003 0303 	and.w	r3, r3, #3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d10b      	bne.n	8004118 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004100:	4b8f      	ldr	r3, [pc, #572]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d06c      	beq.n	80041e6 <HAL_RCC_OscConfig+0x12e>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d168      	bne.n	80041e6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e3f6      	b.n	8004906 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004120:	d106      	bne.n	8004130 <HAL_RCC_OscConfig+0x78>
 8004122:	4b87      	ldr	r3, [pc, #540]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a86      	ldr	r2, [pc, #536]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 8004128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	e02e      	b.n	800418e <HAL_RCC_OscConfig+0xd6>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10c      	bne.n	8004152 <HAL_RCC_OscConfig+0x9a>
 8004138:	4b81      	ldr	r3, [pc, #516]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a80      	ldr	r2, [pc, #512]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 800413e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	4b7e      	ldr	r3, [pc, #504]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a7d      	ldr	r2, [pc, #500]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 800414a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	e01d      	b.n	800418e <HAL_RCC_OscConfig+0xd6>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800415a:	d10c      	bne.n	8004176 <HAL_RCC_OscConfig+0xbe>
 800415c:	4b78      	ldr	r3, [pc, #480]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a77      	ldr	r2, [pc, #476]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 8004162:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	4b75      	ldr	r3, [pc, #468]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a74      	ldr	r2, [pc, #464]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 800416e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	e00b      	b.n	800418e <HAL_RCC_OscConfig+0xd6>
 8004176:	4b72      	ldr	r3, [pc, #456]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a71      	ldr	r2, [pc, #452]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 800417c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	4b6f      	ldr	r3, [pc, #444]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a6e      	ldr	r2, [pc, #440]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 8004188:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800418c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d013      	beq.n	80041be <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004196:	f7fc fcff 	bl	8000b98 <HAL_GetTick>
 800419a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800419c:	e008      	b.n	80041b0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800419e:	f7fc fcfb 	bl	8000b98 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b64      	cmp	r3, #100	; 0x64
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e3aa      	b.n	8004906 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041b0:	4b63      	ldr	r3, [pc, #396]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d0f0      	beq.n	800419e <HAL_RCC_OscConfig+0xe6>
 80041bc:	e014      	b.n	80041e8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041be:	f7fc fceb 	bl	8000b98 <HAL_GetTick>
 80041c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041c6:	f7fc fce7 	bl	8000b98 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b64      	cmp	r3, #100	; 0x64
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e396      	b.n	8004906 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041d8:	4b59      	ldr	r3, [pc, #356]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1f0      	bne.n	80041c6 <HAL_RCC_OscConfig+0x10e>
 80041e4:	e000      	b.n	80041e8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 80cb 	beq.w	800438c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041f6:	4b52      	ldr	r3, [pc, #328]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041fe:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004200:	4b4f      	ldr	r3, [pc, #316]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 8004202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004204:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d007      	beq.n	800421c <HAL_RCC_OscConfig+0x164>
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	2b18      	cmp	r3, #24
 8004210:	d156      	bne.n	80042c0 <HAL_RCC_OscConfig+0x208>
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d151      	bne.n	80042c0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800421c:	4b48      	ldr	r3, [pc, #288]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	d005      	beq.n	8004234 <HAL_RCC_OscConfig+0x17c>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e368      	b.n	8004906 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004234:	4b42      	ldr	r3, [pc, #264]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f023 0219 	bic.w	r2, r3, #25
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	493f      	ldr	r1, [pc, #252]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 8004242:	4313      	orrs	r3, r2
 8004244:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004246:	f7fc fca7 	bl	8000b98 <HAL_GetTick>
 800424a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800424e:	f7fc fca3 	bl	8000b98 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e352      	b.n	8004906 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004260:	4b37      	ldr	r3, [pc, #220]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426c:	f7fc fca0 	bl	8000bb0 <HAL_GetREVID>
 8004270:	4603      	mov	r3, r0
 8004272:	f241 0203 	movw	r2, #4099	; 0x1003
 8004276:	4293      	cmp	r3, r2
 8004278:	d817      	bhi.n	80042aa <HAL_RCC_OscConfig+0x1f2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	2b40      	cmp	r3, #64	; 0x40
 8004280:	d108      	bne.n	8004294 <HAL_RCC_OscConfig+0x1dc>
 8004282:	4b2f      	ldr	r3, [pc, #188]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800428a:	4a2d      	ldr	r2, [pc, #180]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 800428c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004290:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004292:	e07b      	b.n	800438c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004294:	4b2a      	ldr	r3, [pc, #168]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	031b      	lsls	r3, r3, #12
 80042a2:	4927      	ldr	r1, [pc, #156]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042a8:	e070      	b.n	800438c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042aa:	4b25      	ldr	r3, [pc, #148]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	061b      	lsls	r3, r3, #24
 80042b8:	4921      	ldr	r1, [pc, #132]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042be:	e065      	b.n	800438c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d048      	beq.n	800435a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80042c8:	4b1d      	ldr	r3, [pc, #116]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f023 0219 	bic.w	r2, r3, #25
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	491a      	ldr	r1, [pc, #104]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042da:	f7fc fc5d 	bl	8000b98 <HAL_GetTick>
 80042de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042e2:	f7fc fc59 	bl	8000b98 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e308      	b.n	8004906 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042f4:	4b12      	ldr	r3, [pc, #72]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f0      	beq.n	80042e2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004300:	f7fc fc56 	bl	8000bb0 <HAL_GetREVID>
 8004304:	4603      	mov	r3, r0
 8004306:	f241 0203 	movw	r2, #4099	; 0x1003
 800430a:	4293      	cmp	r3, r2
 800430c:	d81a      	bhi.n	8004344 <HAL_RCC_OscConfig+0x28c>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	2b40      	cmp	r3, #64	; 0x40
 8004314:	d108      	bne.n	8004328 <HAL_RCC_OscConfig+0x270>
 8004316:	4b0a      	ldr	r3, [pc, #40]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800431e:	4a08      	ldr	r2, [pc, #32]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 8004320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004324:	6053      	str	r3, [r2, #4]
 8004326:	e031      	b.n	800438c <HAL_RCC_OscConfig+0x2d4>
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	031b      	lsls	r3, r3, #12
 8004336:	4902      	ldr	r1, [pc, #8]	; (8004340 <HAL_RCC_OscConfig+0x288>)
 8004338:	4313      	orrs	r3, r2
 800433a:	604b      	str	r3, [r1, #4]
 800433c:	e026      	b.n	800438c <HAL_RCC_OscConfig+0x2d4>
 800433e:	bf00      	nop
 8004340:	58024400 	.word	0x58024400
 8004344:	4b9a      	ldr	r3, [pc, #616]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	061b      	lsls	r3, r3, #24
 8004352:	4997      	ldr	r1, [pc, #604]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 8004354:	4313      	orrs	r3, r2
 8004356:	604b      	str	r3, [r1, #4]
 8004358:	e018      	b.n	800438c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800435a:	4b95      	ldr	r3, [pc, #596]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a94      	ldr	r2, [pc, #592]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 8004360:	f023 0301 	bic.w	r3, r3, #1
 8004364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004366:	f7fc fc17 	bl	8000b98 <HAL_GetTick>
 800436a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800436e:	f7fc fc13 	bl	8000b98 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e2c2      	b.n	8004906 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004380:	4b8b      	ldr	r3, [pc, #556]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1f0      	bne.n	800436e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0310 	and.w	r3, r3, #16
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80a9 	beq.w	80044ec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800439a:	4b85      	ldr	r3, [pc, #532]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043a4:	4b82      	ldr	r3, [pc, #520]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 80043a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d007      	beq.n	80043c0 <HAL_RCC_OscConfig+0x308>
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	2b18      	cmp	r3, #24
 80043b4:	d13a      	bne.n	800442c <HAL_RCC_OscConfig+0x374>
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f003 0303 	and.w	r3, r3, #3
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d135      	bne.n	800442c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043c0:	4b7b      	ldr	r3, [pc, #492]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <HAL_RCC_OscConfig+0x320>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	2b80      	cmp	r3, #128	; 0x80
 80043d2:	d001      	beq.n	80043d8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e296      	b.n	8004906 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043d8:	f7fc fbea 	bl	8000bb0 <HAL_GetREVID>
 80043dc:	4603      	mov	r3, r0
 80043de:	f241 0203 	movw	r2, #4099	; 0x1003
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d817      	bhi.n	8004416 <HAL_RCC_OscConfig+0x35e>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	2b20      	cmp	r3, #32
 80043ec:	d108      	bne.n	8004400 <HAL_RCC_OscConfig+0x348>
 80043ee:	4b70      	ldr	r3, [pc, #448]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80043f6:	4a6e      	ldr	r2, [pc, #440]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 80043f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043fc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043fe:	e075      	b.n	80044ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004400:	4b6b      	ldr	r3, [pc, #428]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	069b      	lsls	r3, r3, #26
 800440e:	4968      	ldr	r1, [pc, #416]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 8004410:	4313      	orrs	r3, r2
 8004412:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004414:	e06a      	b.n	80044ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004416:	4b66      	ldr	r3, [pc, #408]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	061b      	lsls	r3, r3, #24
 8004424:	4962      	ldr	r1, [pc, #392]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 8004426:	4313      	orrs	r3, r2
 8004428:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800442a:	e05f      	b.n	80044ec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d042      	beq.n	80044ba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004434:	4b5e      	ldr	r3, [pc, #376]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a5d      	ldr	r2, [pc, #372]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 800443a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800443e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004440:	f7fc fbaa 	bl	8000b98 <HAL_GetTick>
 8004444:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004448:	f7fc fba6 	bl	8000b98 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e255      	b.n	8004906 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800445a:	4b55      	ldr	r3, [pc, #340]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f0      	beq.n	8004448 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004466:	f7fc fba3 	bl	8000bb0 <HAL_GetREVID>
 800446a:	4603      	mov	r3, r0
 800446c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004470:	4293      	cmp	r3, r2
 8004472:	d817      	bhi.n	80044a4 <HAL_RCC_OscConfig+0x3ec>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	2b20      	cmp	r3, #32
 800447a:	d108      	bne.n	800448e <HAL_RCC_OscConfig+0x3d6>
 800447c:	4b4c      	ldr	r3, [pc, #304]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004484:	4a4a      	ldr	r2, [pc, #296]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 8004486:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800448a:	6053      	str	r3, [r2, #4]
 800448c:	e02e      	b.n	80044ec <HAL_RCC_OscConfig+0x434>
 800448e:	4b48      	ldr	r3, [pc, #288]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	069b      	lsls	r3, r3, #26
 800449c:	4944      	ldr	r1, [pc, #272]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	604b      	str	r3, [r1, #4]
 80044a2:	e023      	b.n	80044ec <HAL_RCC_OscConfig+0x434>
 80044a4:	4b42      	ldr	r3, [pc, #264]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	061b      	lsls	r3, r3, #24
 80044b2:	493f      	ldr	r1, [pc, #252]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60cb      	str	r3, [r1, #12]
 80044b8:	e018      	b.n	80044ec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80044ba:	4b3d      	ldr	r3, [pc, #244]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a3c      	ldr	r2, [pc, #240]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 80044c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c6:	f7fc fb67 	bl	8000b98 <HAL_GetTick>
 80044ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80044ce:	f7fc fb63 	bl	8000b98 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e212      	b.n	8004906 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80044e0:	4b33      	ldr	r3, [pc, #204]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1f0      	bne.n	80044ce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d036      	beq.n	8004566 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d019      	beq.n	8004534 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004500:	4b2b      	ldr	r3, [pc, #172]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 8004502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004504:	4a2a      	ldr	r2, [pc, #168]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 8004506:	f043 0301 	orr.w	r3, r3, #1
 800450a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450c:	f7fc fb44 	bl	8000b98 <HAL_GetTick>
 8004510:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004514:	f7fc fb40 	bl	8000b98 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e1ef      	b.n	8004906 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004526:	4b22      	ldr	r3, [pc, #136]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 8004528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCC_OscConfig+0x45c>
 8004532:	e018      	b.n	8004566 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004534:	4b1e      	ldr	r3, [pc, #120]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 8004536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004538:	4a1d      	ldr	r2, [pc, #116]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 800453a:	f023 0301 	bic.w	r3, r3, #1
 800453e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004540:	f7fc fb2a 	bl	8000b98 <HAL_GetTick>
 8004544:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004548:	f7fc fb26 	bl	8000b98 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e1d5      	b.n	8004906 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800455a:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 800455c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1f0      	bne.n	8004548 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0320 	and.w	r3, r3, #32
 800456e:	2b00      	cmp	r3, #0
 8004570:	d039      	beq.n	80045e6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d01c      	beq.n	80045b4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800457a:	4b0d      	ldr	r3, [pc, #52]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a0c      	ldr	r2, [pc, #48]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 8004580:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004584:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004586:	f7fc fb07 	bl	8000b98 <HAL_GetTick>
 800458a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800458e:	f7fc fb03 	bl	8000b98 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e1b2      	b.n	8004906 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045a0:	4b03      	ldr	r3, [pc, #12]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0f0      	beq.n	800458e <HAL_RCC_OscConfig+0x4d6>
 80045ac:	e01b      	b.n	80045e6 <HAL_RCC_OscConfig+0x52e>
 80045ae:	bf00      	nop
 80045b0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045b4:	4b9b      	ldr	r3, [pc, #620]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a9a      	ldr	r2, [pc, #616]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 80045ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80045c0:	f7fc faea 	bl	8000b98 <HAL_GetTick>
 80045c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80045c8:	f7fc fae6 	bl	8000b98 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e195      	b.n	8004906 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045da:	4b92      	ldr	r3, [pc, #584]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0304 	and.w	r3, r3, #4
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 8081 	beq.w	80046f6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80045f4:	4b8c      	ldr	r3, [pc, #560]	; (8004828 <HAL_RCC_OscConfig+0x770>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a8b      	ldr	r2, [pc, #556]	; (8004828 <HAL_RCC_OscConfig+0x770>)
 80045fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004600:	f7fc faca 	bl	8000b98 <HAL_GetTick>
 8004604:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004608:	f7fc fac6 	bl	8000b98 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b64      	cmp	r3, #100	; 0x64
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e175      	b.n	8004906 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800461a:	4b83      	ldr	r3, [pc, #524]	; (8004828 <HAL_RCC_OscConfig+0x770>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0f0      	beq.n	8004608 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d106      	bne.n	800463c <HAL_RCC_OscConfig+0x584>
 800462e:	4b7d      	ldr	r3, [pc, #500]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 8004630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004632:	4a7c      	ldr	r2, [pc, #496]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 8004634:	f043 0301 	orr.w	r3, r3, #1
 8004638:	6713      	str	r3, [r2, #112]	; 0x70
 800463a:	e02d      	b.n	8004698 <HAL_RCC_OscConfig+0x5e0>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10c      	bne.n	800465e <HAL_RCC_OscConfig+0x5a6>
 8004644:	4b77      	ldr	r3, [pc, #476]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 8004646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004648:	4a76      	ldr	r2, [pc, #472]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 800464a:	f023 0301 	bic.w	r3, r3, #1
 800464e:	6713      	str	r3, [r2, #112]	; 0x70
 8004650:	4b74      	ldr	r3, [pc, #464]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 8004652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004654:	4a73      	ldr	r2, [pc, #460]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 8004656:	f023 0304 	bic.w	r3, r3, #4
 800465a:	6713      	str	r3, [r2, #112]	; 0x70
 800465c:	e01c      	b.n	8004698 <HAL_RCC_OscConfig+0x5e0>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	2b05      	cmp	r3, #5
 8004664:	d10c      	bne.n	8004680 <HAL_RCC_OscConfig+0x5c8>
 8004666:	4b6f      	ldr	r3, [pc, #444]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 8004668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466a:	4a6e      	ldr	r2, [pc, #440]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 800466c:	f043 0304 	orr.w	r3, r3, #4
 8004670:	6713      	str	r3, [r2, #112]	; 0x70
 8004672:	4b6c      	ldr	r3, [pc, #432]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	4a6b      	ldr	r2, [pc, #428]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 8004678:	f043 0301 	orr.w	r3, r3, #1
 800467c:	6713      	str	r3, [r2, #112]	; 0x70
 800467e:	e00b      	b.n	8004698 <HAL_RCC_OscConfig+0x5e0>
 8004680:	4b68      	ldr	r3, [pc, #416]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 8004682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004684:	4a67      	ldr	r2, [pc, #412]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 8004686:	f023 0301 	bic.w	r3, r3, #1
 800468a:	6713      	str	r3, [r2, #112]	; 0x70
 800468c:	4b65      	ldr	r3, [pc, #404]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 800468e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004690:	4a64      	ldr	r2, [pc, #400]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 8004692:	f023 0304 	bic.w	r3, r3, #4
 8004696:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d015      	beq.n	80046cc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a0:	f7fc fa7a 	bl	8000b98 <HAL_GetTick>
 80046a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046a6:	e00a      	b.n	80046be <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a8:	f7fc fa76 	bl	8000b98 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e123      	b.n	8004906 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046be:	4b59      	ldr	r3, [pc, #356]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0ee      	beq.n	80046a8 <HAL_RCC_OscConfig+0x5f0>
 80046ca:	e014      	b.n	80046f6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046cc:	f7fc fa64 	bl	8000b98 <HAL_GetTick>
 80046d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046d2:	e00a      	b.n	80046ea <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d4:	f7fc fa60 	bl	8000b98 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e10d      	b.n	8004906 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046ea:	4b4e      	ldr	r3, [pc, #312]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1ee      	bne.n	80046d4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 8102 	beq.w	8004904 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004700:	4b48      	ldr	r3, [pc, #288]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004708:	2b18      	cmp	r3, #24
 800470a:	f000 80bd 	beq.w	8004888 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	2b02      	cmp	r3, #2
 8004714:	f040 809e 	bne.w	8004854 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004718:	4b42      	ldr	r3, [pc, #264]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a41      	ldr	r2, [pc, #260]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 800471e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004724:	f7fc fa38 	bl	8000b98 <HAL_GetTick>
 8004728:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800472c:	f7fc fa34 	bl	8000b98 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e0e3      	b.n	8004906 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800473e:	4b39      	ldr	r3, [pc, #228]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800474a:	4b36      	ldr	r3, [pc, #216]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 800474c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800474e:	4b37      	ldr	r3, [pc, #220]	; (800482c <HAL_RCC_OscConfig+0x774>)
 8004750:	4013      	ands	r3, r2
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800475a:	0112      	lsls	r2, r2, #4
 800475c:	430a      	orrs	r2, r1
 800475e:	4931      	ldr	r1, [pc, #196]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 8004760:	4313      	orrs	r3, r2
 8004762:	628b      	str	r3, [r1, #40]	; 0x28
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	3b01      	subs	r3, #1
 800476a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004772:	3b01      	subs	r3, #1
 8004774:	025b      	lsls	r3, r3, #9
 8004776:	b29b      	uxth	r3, r3
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477e:	3b01      	subs	r3, #1
 8004780:	041b      	lsls	r3, r3, #16
 8004782:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478c:	3b01      	subs	r3, #1
 800478e:	061b      	lsls	r3, r3, #24
 8004790:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004794:	4923      	ldr	r1, [pc, #140]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 8004796:	4313      	orrs	r3, r2
 8004798:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800479a:	4b22      	ldr	r3, [pc, #136]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	4a21      	ldr	r2, [pc, #132]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 80047a0:	f023 0301 	bic.w	r3, r3, #1
 80047a4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80047a6:	4b1f      	ldr	r3, [pc, #124]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 80047a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047aa:	4b21      	ldr	r3, [pc, #132]	; (8004830 <HAL_RCC_OscConfig+0x778>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80047b2:	00d2      	lsls	r2, r2, #3
 80047b4:	491b      	ldr	r1, [pc, #108]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80047ba:	4b1a      	ldr	r3, [pc, #104]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 80047bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047be:	f023 020c 	bic.w	r2, r3, #12
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	4917      	ldr	r1, [pc, #92]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80047cc:	4b15      	ldr	r3, [pc, #84]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	f023 0202 	bic.w	r2, r3, #2
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d8:	4912      	ldr	r1, [pc, #72]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80047de:	4b11      	ldr	r3, [pc, #68]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e2:	4a10      	ldr	r2, [pc, #64]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 80047e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047ea:	4b0e      	ldr	r3, [pc, #56]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 80047ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ee:	4a0d      	ldr	r2, [pc, #52]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 80047f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80047f6:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 80047f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fa:	4a0a      	ldr	r2, [pc, #40]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 80047fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004800:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004802:	4b08      	ldr	r3, [pc, #32]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 8004804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004806:	4a07      	ldr	r2, [pc, #28]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 8004808:	f043 0301 	orr.w	r3, r3, #1
 800480c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800480e:	4b05      	ldr	r3, [pc, #20]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a04      	ldr	r2, [pc, #16]	; (8004824 <HAL_RCC_OscConfig+0x76c>)
 8004814:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481a:	f7fc f9bd 	bl	8000b98 <HAL_GetTick>
 800481e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004820:	e011      	b.n	8004846 <HAL_RCC_OscConfig+0x78e>
 8004822:	bf00      	nop
 8004824:	58024400 	.word	0x58024400
 8004828:	58024800 	.word	0x58024800
 800482c:	fffffc0c 	.word	0xfffffc0c
 8004830:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004834:	f7fc f9b0 	bl	8000b98 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e05f      	b.n	8004906 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004846:	4b32      	ldr	r3, [pc, #200]	; (8004910 <HAL_RCC_OscConfig+0x858>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0f0      	beq.n	8004834 <HAL_RCC_OscConfig+0x77c>
 8004852:	e057      	b.n	8004904 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004854:	4b2e      	ldr	r3, [pc, #184]	; (8004910 <HAL_RCC_OscConfig+0x858>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a2d      	ldr	r2, [pc, #180]	; (8004910 <HAL_RCC_OscConfig+0x858>)
 800485a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800485e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004860:	f7fc f99a 	bl	8000b98 <HAL_GetTick>
 8004864:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004868:	f7fc f996 	bl	8000b98 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e045      	b.n	8004906 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800487a:	4b25      	ldr	r3, [pc, #148]	; (8004910 <HAL_RCC_OscConfig+0x858>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f0      	bne.n	8004868 <HAL_RCC_OscConfig+0x7b0>
 8004886:	e03d      	b.n	8004904 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004888:	4b21      	ldr	r3, [pc, #132]	; (8004910 <HAL_RCC_OscConfig+0x858>)
 800488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800488e:	4b20      	ldr	r3, [pc, #128]	; (8004910 <HAL_RCC_OscConfig+0x858>)
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	2b01      	cmp	r3, #1
 800489a:	d031      	beq.n	8004900 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f003 0203 	and.w	r2, r3, #3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d12a      	bne.n	8004900 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	091b      	lsrs	r3, r3, #4
 80048ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d122      	bne.n	8004900 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d11a      	bne.n	8004900 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	0a5b      	lsrs	r3, r3, #9
 80048ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80048d8:	429a      	cmp	r2, r3
 80048da:	d111      	bne.n	8004900 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	0c1b      	lsrs	r3, r3, #16
 80048e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d108      	bne.n	8004900 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	0e1b      	lsrs	r3, r3, #24
 80048f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d001      	beq.n	8004904 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e000      	b.n	8004906 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3730      	adds	r7, #48	; 0x30
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	58024400 	.word	0x58024400

08004914 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e19c      	b.n	8004c62 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004928:	4b8a      	ldr	r3, [pc, #552]	; (8004b54 <HAL_RCC_ClockConfig+0x240>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 030f 	and.w	r3, r3, #15
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d910      	bls.n	8004958 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004936:	4b87      	ldr	r3, [pc, #540]	; (8004b54 <HAL_RCC_ClockConfig+0x240>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f023 020f 	bic.w	r2, r3, #15
 800493e:	4985      	ldr	r1, [pc, #532]	; (8004b54 <HAL_RCC_ClockConfig+0x240>)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	4313      	orrs	r3, r2
 8004944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004946:	4b83      	ldr	r3, [pc, #524]	; (8004b54 <HAL_RCC_ClockConfig+0x240>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d001      	beq.n	8004958 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e184      	b.n	8004c62 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	d010      	beq.n	8004986 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691a      	ldr	r2, [r3, #16]
 8004968:	4b7b      	ldr	r3, [pc, #492]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004970:	429a      	cmp	r2, r3
 8004972:	d908      	bls.n	8004986 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004974:	4b78      	ldr	r3, [pc, #480]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	4975      	ldr	r1, [pc, #468]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 8004982:	4313      	orrs	r3, r2
 8004984:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	2b00      	cmp	r3, #0
 8004990:	d010      	beq.n	80049b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	695a      	ldr	r2, [r3, #20]
 8004996:	4b70      	ldr	r3, [pc, #448]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800499e:	429a      	cmp	r2, r3
 80049a0:	d908      	bls.n	80049b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049a2:	4b6d      	ldr	r3, [pc, #436]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	496a      	ldr	r1, [pc, #424]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0310 	and.w	r3, r3, #16
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d010      	beq.n	80049e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699a      	ldr	r2, [r3, #24]
 80049c4:	4b64      	ldr	r3, [pc, #400]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d908      	bls.n	80049e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80049d0:	4b61      	ldr	r3, [pc, #388]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	495e      	ldr	r1, [pc, #376]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0320 	and.w	r3, r3, #32
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d010      	beq.n	8004a10 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69da      	ldr	r2, [r3, #28]
 80049f2:	4b59      	ldr	r3, [pc, #356]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d908      	bls.n	8004a10 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80049fe:	4b56      	ldr	r3, [pc, #344]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	4953      	ldr	r1, [pc, #332]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d010      	beq.n	8004a3e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68da      	ldr	r2, [r3, #12]
 8004a20:	4b4d      	ldr	r3, [pc, #308]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	f003 030f 	and.w	r3, r3, #15
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d908      	bls.n	8004a3e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a2c:	4b4a      	ldr	r3, [pc, #296]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	f023 020f 	bic.w	r2, r3, #15
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	4947      	ldr	r1, [pc, #284]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d055      	beq.n	8004af6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004a4a:	4b43      	ldr	r3, [pc, #268]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	4940      	ldr	r1, [pc, #256]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d107      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a64:	4b3c      	ldr	r3, [pc, #240]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d121      	bne.n	8004ab4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e0f6      	b.n	8004c62 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d107      	bne.n	8004a8c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a7c:	4b36      	ldr	r3, [pc, #216]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d115      	bne.n	8004ab4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e0ea      	b.n	8004c62 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d107      	bne.n	8004aa4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a94:	4b30      	ldr	r3, [pc, #192]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d109      	bne.n	8004ab4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e0de      	b.n	8004c62 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004aa4:	4b2c      	ldr	r3, [pc, #176]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e0d6      	b.n	8004c62 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ab4:	4b28      	ldr	r3, [pc, #160]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f023 0207 	bic.w	r2, r3, #7
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	4925      	ldr	r1, [pc, #148]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac6:	f7fc f867 	bl	8000b98 <HAL_GetTick>
 8004aca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004acc:	e00a      	b.n	8004ae4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ace:	f7fc f863 	bl	8000b98 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e0be      	b.n	8004c62 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae4:	4b1c      	ldr	r3, [pc, #112]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d1eb      	bne.n	8004ace <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d010      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	4b14      	ldr	r3, [pc, #80]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d208      	bcs.n	8004b24 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b12:	4b11      	ldr	r3, [pc, #68]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	f023 020f 	bic.w	r2, r3, #15
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	490e      	ldr	r1, [pc, #56]	; (8004b58 <HAL_RCC_ClockConfig+0x244>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b24:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <HAL_RCC_ClockConfig+0x240>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 030f 	and.w	r3, r3, #15
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d214      	bcs.n	8004b5c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b32:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <HAL_RCC_ClockConfig+0x240>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f023 020f 	bic.w	r2, r3, #15
 8004b3a:	4906      	ldr	r1, [pc, #24]	; (8004b54 <HAL_RCC_ClockConfig+0x240>)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b42:	4b04      	ldr	r3, [pc, #16]	; (8004b54 <HAL_RCC_ClockConfig+0x240>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d005      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e086      	b.n	8004c62 <HAL_RCC_ClockConfig+0x34e>
 8004b54:	52002000 	.word	0x52002000
 8004b58:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d010      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	4b3f      	ldr	r3, [pc, #252]	; (8004c6c <HAL_RCC_ClockConfig+0x358>)
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d208      	bcs.n	8004b8a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b78:	4b3c      	ldr	r3, [pc, #240]	; (8004c6c <HAL_RCC_ClockConfig+0x358>)
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	4939      	ldr	r1, [pc, #228]	; (8004c6c <HAL_RCC_ClockConfig+0x358>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d010      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695a      	ldr	r2, [r3, #20]
 8004b9a:	4b34      	ldr	r3, [pc, #208]	; (8004c6c <HAL_RCC_ClockConfig+0x358>)
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d208      	bcs.n	8004bb8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ba6:	4b31      	ldr	r3, [pc, #196]	; (8004c6c <HAL_RCC_ClockConfig+0x358>)
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	492e      	ldr	r1, [pc, #184]	; (8004c6c <HAL_RCC_ClockConfig+0x358>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0310 	and.w	r3, r3, #16
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d010      	beq.n	8004be6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699a      	ldr	r2, [r3, #24]
 8004bc8:	4b28      	ldr	r3, [pc, #160]	; (8004c6c <HAL_RCC_ClockConfig+0x358>)
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d208      	bcs.n	8004be6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004bd4:	4b25      	ldr	r3, [pc, #148]	; (8004c6c <HAL_RCC_ClockConfig+0x358>)
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	4922      	ldr	r1, [pc, #136]	; (8004c6c <HAL_RCC_ClockConfig+0x358>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d010      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69da      	ldr	r2, [r3, #28]
 8004bf6:	4b1d      	ldr	r3, [pc, #116]	; (8004c6c <HAL_RCC_ClockConfig+0x358>)
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d208      	bcs.n	8004c14 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004c02:	4b1a      	ldr	r3, [pc, #104]	; (8004c6c <HAL_RCC_ClockConfig+0x358>)
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	4917      	ldr	r1, [pc, #92]	; (8004c6c <HAL_RCC_ClockConfig+0x358>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c14:	f000 f834 	bl	8004c80 <HAL_RCC_GetSysClockFreq>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	4b14      	ldr	r3, [pc, #80]	; (8004c6c <HAL_RCC_ClockConfig+0x358>)
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	0a1b      	lsrs	r3, r3, #8
 8004c20:	f003 030f 	and.w	r3, r3, #15
 8004c24:	4912      	ldr	r1, [pc, #72]	; (8004c70 <HAL_RCC_ClockConfig+0x35c>)
 8004c26:	5ccb      	ldrb	r3, [r1, r3]
 8004c28:	f003 031f 	and.w	r3, r3, #31
 8004c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c30:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c32:	4b0e      	ldr	r3, [pc, #56]	; (8004c6c <HAL_RCC_ClockConfig+0x358>)
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	4a0d      	ldr	r2, [pc, #52]	; (8004c70 <HAL_RCC_ClockConfig+0x35c>)
 8004c3c:	5cd3      	ldrb	r3, [r2, r3]
 8004c3e:	f003 031f 	and.w	r3, r3, #31
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	fa22 f303 	lsr.w	r3, r2, r3
 8004c48:	4a0a      	ldr	r2, [pc, #40]	; (8004c74 <HAL_RCC_ClockConfig+0x360>)
 8004c4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c4c:	4a0a      	ldr	r2, [pc, #40]	; (8004c78 <HAL_RCC_ClockConfig+0x364>)
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004c52:	4b0a      	ldr	r3, [pc, #40]	; (8004c7c <HAL_RCC_ClockConfig+0x368>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fb ff54 	bl	8000b04 <HAL_InitTick>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	58024400 	.word	0x58024400
 8004c70:	08004fe4 	.word	0x08004fe4
 8004c74:	24000004 	.word	0x24000004
 8004c78:	24000000 	.word	0x24000000
 8004c7c:	24000008 	.word	0x24000008

08004c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b089      	sub	sp, #36	; 0x24
 8004c84:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c86:	4bb3      	ldr	r3, [pc, #716]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c8e:	2b18      	cmp	r3, #24
 8004c90:	f200 8155 	bhi.w	8004f3e <HAL_RCC_GetSysClockFreq+0x2be>
 8004c94:	a201      	add	r2, pc, #4	; (adr r2, 8004c9c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9a:	bf00      	nop
 8004c9c:	08004d01 	.word	0x08004d01
 8004ca0:	08004f3f 	.word	0x08004f3f
 8004ca4:	08004f3f 	.word	0x08004f3f
 8004ca8:	08004f3f 	.word	0x08004f3f
 8004cac:	08004f3f 	.word	0x08004f3f
 8004cb0:	08004f3f 	.word	0x08004f3f
 8004cb4:	08004f3f 	.word	0x08004f3f
 8004cb8:	08004f3f 	.word	0x08004f3f
 8004cbc:	08004d27 	.word	0x08004d27
 8004cc0:	08004f3f 	.word	0x08004f3f
 8004cc4:	08004f3f 	.word	0x08004f3f
 8004cc8:	08004f3f 	.word	0x08004f3f
 8004ccc:	08004f3f 	.word	0x08004f3f
 8004cd0:	08004f3f 	.word	0x08004f3f
 8004cd4:	08004f3f 	.word	0x08004f3f
 8004cd8:	08004f3f 	.word	0x08004f3f
 8004cdc:	08004d2d 	.word	0x08004d2d
 8004ce0:	08004f3f 	.word	0x08004f3f
 8004ce4:	08004f3f 	.word	0x08004f3f
 8004ce8:	08004f3f 	.word	0x08004f3f
 8004cec:	08004f3f 	.word	0x08004f3f
 8004cf0:	08004f3f 	.word	0x08004f3f
 8004cf4:	08004f3f 	.word	0x08004f3f
 8004cf8:	08004f3f 	.word	0x08004f3f
 8004cfc:	08004d33 	.word	0x08004d33
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d00:	4b94      	ldr	r3, [pc, #592]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0320 	and.w	r3, r3, #32
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d009      	beq.n	8004d20 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d0c:	4b91      	ldr	r3, [pc, #580]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	08db      	lsrs	r3, r3, #3
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	4a90      	ldr	r2, [pc, #576]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d18:	fa22 f303 	lsr.w	r3, r2, r3
 8004d1c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004d1e:	e111      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004d20:	4b8d      	ldr	r3, [pc, #564]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d22:	61bb      	str	r3, [r7, #24]
    break;
 8004d24:	e10e      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004d26:	4b8d      	ldr	r3, [pc, #564]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d28:	61bb      	str	r3, [r7, #24]
    break;
 8004d2a:	e10b      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004d2c:	4b8c      	ldr	r3, [pc, #560]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004d2e:	61bb      	str	r3, [r7, #24]
    break;
 8004d30:	e108      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d32:	4b88      	ldr	r3, [pc, #544]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004d3c:	4b85      	ldr	r3, [pc, #532]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d40:	091b      	lsrs	r3, r3, #4
 8004d42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d46:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004d48:	4b82      	ldr	r3, [pc, #520]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004d52:	4b80      	ldr	r3, [pc, #512]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d56:	08db      	lsrs	r3, r3, #3
 8004d58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	fb02 f303 	mul.w	r3, r2, r3
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 80e1 	beq.w	8004f38 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	f000 8083 	beq.w	8004e84 <HAL_RCC_GetSysClockFreq+0x204>
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	f200 80a1 	bhi.w	8004ec8 <HAL_RCC_GetSysClockFreq+0x248>
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <HAL_RCC_GetSysClockFreq+0x114>
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d056      	beq.n	8004e40 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004d92:	e099      	b.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d94:	4b6f      	ldr	r3, [pc, #444]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0320 	and.w	r3, r3, #32
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d02d      	beq.n	8004dfc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004da0:	4b6c      	ldr	r3, [pc, #432]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	08db      	lsrs	r3, r3, #3
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	4a6b      	ldr	r2, [pc, #428]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004dac:	fa22 f303 	lsr.w	r3, r2, r3
 8004db0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	ee07 3a90 	vmov	s15, r3
 8004db8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	ee07 3a90 	vmov	s15, r3
 8004dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dca:	4b62      	ldr	r3, [pc, #392]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd2:	ee07 3a90 	vmov	s15, r3
 8004dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dda:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dde:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004f64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004dfa:	e087      	b.n	8004f0c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e06:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004f68 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e0e:	4b51      	ldr	r3, [pc, #324]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e16:	ee07 3a90 	vmov	s15, r3
 8004e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e22:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004f64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e3e:	e065      	b.n	8004f0c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	ee07 3a90 	vmov	s15, r3
 8004e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e4a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004f6c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e52:	4b40      	ldr	r3, [pc, #256]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e5a:	ee07 3a90 	vmov	s15, r3
 8004e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e62:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e66:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004f64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e82:	e043      	b.n	8004f0c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	ee07 3a90 	vmov	s15, r3
 8004e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e8e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004f70 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e96:	4b2f      	ldr	r3, [pc, #188]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e9e:	ee07 3a90 	vmov	s15, r3
 8004ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ea6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eaa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004f64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ec2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ec6:	e021      	b.n	8004f0c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	ee07 3a90 	vmov	s15, r3
 8004ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004f6c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eda:	4b1e      	ldr	r3, [pc, #120]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee2:	ee07 3a90 	vmov	s15, r3
 8004ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eea:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004f64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f0a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004f0c:	4b11      	ldr	r3, [pc, #68]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	0a5b      	lsrs	r3, r3, #9
 8004f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f16:	3301      	adds	r3, #1
 8004f18:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	ee07 3a90 	vmov	s15, r3
 8004f20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f24:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f30:	ee17 3a90 	vmov	r3, s15
 8004f34:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004f36:	e005      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	61bb      	str	r3, [r7, #24]
    break;
 8004f3c:	e002      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004f3e:	4b07      	ldr	r3, [pc, #28]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f40:	61bb      	str	r3, [r7, #24]
    break;
 8004f42:	bf00      	nop
  }

  return sysclockfreq;
 8004f44:	69bb      	ldr	r3, [r7, #24]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3724      	adds	r7, #36	; 0x24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	58024400 	.word	0x58024400
 8004f58:	03d09000 	.word	0x03d09000
 8004f5c:	003d0900 	.word	0x003d0900
 8004f60:	017d7840 	.word	0x017d7840
 8004f64:	46000000 	.word	0x46000000
 8004f68:	4c742400 	.word	0x4c742400
 8004f6c:	4a742400 	.word	0x4a742400
 8004f70:	4bbebc20 	.word	0x4bbebc20

08004f74 <__libc_init_array>:
 8004f74:	b570      	push	{r4, r5, r6, lr}
 8004f76:	4d0d      	ldr	r5, [pc, #52]	; (8004fac <__libc_init_array+0x38>)
 8004f78:	4c0d      	ldr	r4, [pc, #52]	; (8004fb0 <__libc_init_array+0x3c>)
 8004f7a:	1b64      	subs	r4, r4, r5
 8004f7c:	10a4      	asrs	r4, r4, #2
 8004f7e:	2600      	movs	r6, #0
 8004f80:	42a6      	cmp	r6, r4
 8004f82:	d109      	bne.n	8004f98 <__libc_init_array+0x24>
 8004f84:	4d0b      	ldr	r5, [pc, #44]	; (8004fb4 <__libc_init_array+0x40>)
 8004f86:	4c0c      	ldr	r4, [pc, #48]	; (8004fb8 <__libc_init_array+0x44>)
 8004f88:	f000 f820 	bl	8004fcc <_init>
 8004f8c:	1b64      	subs	r4, r4, r5
 8004f8e:	10a4      	asrs	r4, r4, #2
 8004f90:	2600      	movs	r6, #0
 8004f92:	42a6      	cmp	r6, r4
 8004f94:	d105      	bne.n	8004fa2 <__libc_init_array+0x2e>
 8004f96:	bd70      	pop	{r4, r5, r6, pc}
 8004f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f9c:	4798      	blx	r3
 8004f9e:	3601      	adds	r6, #1
 8004fa0:	e7ee      	b.n	8004f80 <__libc_init_array+0xc>
 8004fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fa6:	4798      	blx	r3
 8004fa8:	3601      	adds	r6, #1
 8004faa:	e7f2      	b.n	8004f92 <__libc_init_array+0x1e>
 8004fac:	08004ffc 	.word	0x08004ffc
 8004fb0:	08004ffc 	.word	0x08004ffc
 8004fb4:	08004ffc 	.word	0x08004ffc
 8004fb8:	08005000 	.word	0x08005000

08004fbc <memset>:
 8004fbc:	4402      	add	r2, r0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d100      	bne.n	8004fc6 <memset+0xa>
 8004fc4:	4770      	bx	lr
 8004fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8004fca:	e7f9      	b.n	8004fc0 <memset+0x4>

08004fcc <_init>:
 8004fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fce:	bf00      	nop
 8004fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fd2:	bc08      	pop	{r3}
 8004fd4:	469e      	mov	lr, r3
 8004fd6:	4770      	bx	lr

08004fd8 <_fini>:
 8004fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fda:	bf00      	nop
 8004fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fde:	bc08      	pop	{r3}
 8004fe0:	469e      	mov	lr, r3
 8004fe2:	4770      	bx	lr
