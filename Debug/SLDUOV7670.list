
SLDUOV7670.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ef8  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800a190  0800a190  0001a190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a244  0800a244  0001a244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a24c  0800a24c  0001a24c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a250  0800a250  0001a250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800a254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0004b2d0  24000074  0800a2c8  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2404b344  0800a2c8  0002b344  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001897c  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ab4  00000000  00000000  00038a1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001078  00000000  00000000  0003b4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f70  00000000  00000000  0003c550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000378da  00000000  00000000  0003d4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017c0e  00000000  00000000  00074d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015c92f  00000000  00000000  0008c9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e92d7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004d44  00000000  00000000  001e9328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000074 	.word	0x24000074
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a178 	.word	0x0800a178

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000078 	.word	0x24000078
 80002d4:	0800a178 	.word	0x0800a178

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1);
  }
}
uint8_t image_buffer[CAMERA_WIDTH * CAMERA_HEIGHT];
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 ff7b 	bl	80014dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f927 	bl	8000838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 faf5 	bl	8000bd8 <MX_GPIO_Init>
  MX_DCMI_Init();
 80005ee:	f000 f98d 	bl	800090c <MX_DCMI_Init>
  MX_I2C1_Init();
 80005f2:	f000 f9f9 	bl	80009e8 <MX_I2C1_Init>
  MX_UART4_Init();
 80005f6:	f000 fa37 	bl	8000a68 <MX_UART4_Init>
  MX_DMA2D_Init();
 80005fa:	f000 f9bb 	bl	8000974 <MX_DMA2D_Init>
  MX_DMA_Init();
 80005fe:	f000 facb 	bl	8000b98 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000602:	f000 fa7d 	bl	8000b00 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  FILE* image_file = fopen("image.bin", "a+");
 8000606:	4986      	ldr	r1, [pc, #536]	; (8000820 <main+0x244>)
 8000608:	4886      	ldr	r0, [pc, #536]	; (8000824 <main+0x248>)
 800060a:	f009 f8ff 	bl	800980c <fopen>
 800060e:	60f8      	str	r0, [r7, #12]
  if (image_file == NULL) {
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d103      	bne.n	800061e <main+0x42>
	// Error opening file
	HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8000616:	2101      	movs	r1, #1
 8000618:	4883      	ldr	r0, [pc, #524]	; (8000828 <main+0x24c>)
 800061a:	f004 fcfe 	bl	800501a <HAL_GPIO_TogglePin>
	//	return -1;
  }
  // Start the DMA transfer and wait for it to complete
  HAL_DMA_Start(&hdma_dcmi, (uint32_t)&DCMI->DR, (uint32_t)image_buffer, CAMERA_WIDTH * CAMERA_HEIGHT);
 800061e:	4a83      	ldr	r2, [pc, #524]	; (800082c <main+0x250>)
 8000620:	f44f 2396 	mov.w	r3, #307200	; 0x4b000
 8000624:	4982      	ldr	r1, [pc, #520]	; (8000830 <main+0x254>)
 8000626:	4883      	ldr	r0, [pc, #524]	; (8000834 <main+0x258>)
 8000628:	f001 fcdc 	bl	8001fe4 <HAL_DMA_Start>
  HAL_DMA_PollForTransfer(&hdma_dcmi, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
 800062c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000630:	2100      	movs	r1, #0
 8000632:	4880      	ldr	r0, [pc, #512]	; (8000834 <main+0x258>)
 8000634:	f002 fb5a 	bl	8002cec <HAL_DMA_PollForTransfer>

  // Implement the ridge detection algorithm on the image data
  for (int y = 0; y < CAMERA_HEIGHT; y++) {
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
 800063c:	e0db      	b.n	80007f6 <main+0x21a>
    for (int x = 0; x < CAMERA_WIDTH; x++) {
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
 8000642:	e0d0      	b.n	80007e6 <main+0x20a>
      // Calculate the gradient at this pixel using Sobel operator
      int gx = image_buffer[(y - 1) * CAMERA_WIDTH + (x - 1)] + 2 * image_buffer[y * CAMERA_WIDTH + (x - 1)] + image_buffer[(y + 1) * CAMERA_WIDTH + (x - 1)]
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	1e5a      	subs	r2, r3, #1
 8000648:	4613      	mov	r3, r2
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	4413      	add	r3, r2
 800064e:	01db      	lsls	r3, r3, #7
 8000650:	461a      	mov	r2, r3
 8000652:	693b      	ldr	r3, [r7, #16]
 8000654:	3b01      	subs	r3, #1
 8000656:	4413      	add	r3, r2
 8000658:	4a74      	ldr	r2, [pc, #464]	; (800082c <main+0x250>)
 800065a:	5cd3      	ldrb	r3, [r2, r3]
 800065c:	4619      	mov	r1, r3
 800065e:	697a      	ldr	r2, [r7, #20]
 8000660:	4613      	mov	r3, r2
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	4413      	add	r3, r2
 8000666:	01db      	lsls	r3, r3, #7
 8000668:	461a      	mov	r2, r3
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	3b01      	subs	r3, #1
 800066e:	4413      	add	r3, r2
 8000670:	4a6e      	ldr	r2, [pc, #440]	; (800082c <main+0x250>)
 8000672:	5cd3      	ldrb	r3, [r2, r3]
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	4419      	add	r1, r3
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	1c5a      	adds	r2, r3, #1
 800067c:	4613      	mov	r3, r2
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	4413      	add	r3, r2
 8000682:	01db      	lsls	r3, r3, #7
 8000684:	461a      	mov	r2, r3
 8000686:	693b      	ldr	r3, [r7, #16]
 8000688:	3b01      	subs	r3, #1
 800068a:	4413      	add	r3, r2
 800068c:	4a67      	ldr	r2, [pc, #412]	; (800082c <main+0x250>)
 800068e:	5cd3      	ldrb	r3, [r2, r3]
 8000690:	4419      	add	r1, r3
             - image_buffer[(y - 1) * CAMERA_WIDTH + (x + 1)] - 2 * image_buffer[y * CAMERA_WIDTH + (x + 1)] - image_buffer[(y + 1) * CAMERA_WIDTH + (x + 1)];
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	1e5a      	subs	r2, r3, #1
 8000696:	4613      	mov	r3, r2
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	4413      	add	r3, r2
 800069c:	01db      	lsls	r3, r3, #7
 800069e:	461a      	mov	r2, r3
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	3301      	adds	r3, #1
 80006a4:	4413      	add	r3, r2
 80006a6:	4a61      	ldr	r2, [pc, #388]	; (800082c <main+0x250>)
 80006a8:	5cd3      	ldrb	r3, [r2, r3]
 80006aa:	1ac9      	subs	r1, r1, r3
 80006ac:	697a      	ldr	r2, [r7, #20]
 80006ae:	4613      	mov	r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	4413      	add	r3, r2
 80006b4:	01db      	lsls	r3, r3, #7
 80006b6:	461a      	mov	r2, r3
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	3301      	adds	r3, #1
 80006bc:	4413      	add	r3, r2
 80006be:	4a5b      	ldr	r2, [pc, #364]	; (800082c <main+0x250>)
 80006c0:	5cd3      	ldrb	r3, [r2, r3]
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	1ac9      	subs	r1, r1, r3
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	1c5a      	adds	r2, r3, #1
 80006ca:	4613      	mov	r3, r2
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	4413      	add	r3, r2
 80006d0:	01db      	lsls	r3, r3, #7
 80006d2:	461a      	mov	r2, r3
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	3301      	adds	r3, #1
 80006d8:	4413      	add	r3, r2
 80006da:	4a54      	ldr	r2, [pc, #336]	; (800082c <main+0x250>)
 80006dc:	5cd3      	ldrb	r3, [r2, r3]
      int gx = image_buffer[(y - 1) * CAMERA_WIDTH + (x - 1)] + 2 * image_buffer[y * CAMERA_WIDTH + (x - 1)] + image_buffer[(y + 1) * CAMERA_WIDTH + (x - 1)]
 80006de:	1acb      	subs	r3, r1, r3
 80006e0:	60bb      	str	r3, [r7, #8]
      int gy = image_buffer[(y - 1) * CAMERA_WIDTH + (x - 1)] + 2 * image_buffer[(y - 1) * CAMERA_WIDTH + x] + image_buffer[(y - 1) * CAMERA_WIDTH + (x + 1)]
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	1e5a      	subs	r2, r3, #1
 80006e6:	4613      	mov	r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	4413      	add	r3, r2
 80006ec:	01db      	lsls	r3, r3, #7
 80006ee:	461a      	mov	r2, r3
 80006f0:	693b      	ldr	r3, [r7, #16]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	4413      	add	r3, r2
 80006f6:	4a4d      	ldr	r2, [pc, #308]	; (800082c <main+0x250>)
 80006f8:	5cd3      	ldrb	r3, [r2, r3]
 80006fa:	4619      	mov	r1, r3
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	1e5a      	subs	r2, r3, #1
 8000700:	4613      	mov	r3, r2
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	4413      	add	r3, r2
 8000706:	01db      	lsls	r3, r3, #7
 8000708:	461a      	mov	r2, r3
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	4413      	add	r3, r2
 800070e:	4a47      	ldr	r2, [pc, #284]	; (800082c <main+0x250>)
 8000710:	5cd3      	ldrb	r3, [r2, r3]
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	4419      	add	r1, r3
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	1e5a      	subs	r2, r3, #1
 800071a:	4613      	mov	r3, r2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	4413      	add	r3, r2
 8000720:	01db      	lsls	r3, r3, #7
 8000722:	461a      	mov	r2, r3
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	3301      	adds	r3, #1
 8000728:	4413      	add	r3, r2
 800072a:	4a40      	ldr	r2, [pc, #256]	; (800082c <main+0x250>)
 800072c:	5cd3      	ldrb	r3, [r2, r3]
 800072e:	4419      	add	r1, r3
             - image_buffer[(y + 1) * CAMERA_WIDTH + (x - 1)] - 2 * image_buffer[(y + 1) * CAMERA_WIDTH + x] - image_buffer[(y + 1) * CAMERA_WIDTH + (x + 1)];
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	1c5a      	adds	r2, r3, #1
 8000734:	4613      	mov	r3, r2
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	4413      	add	r3, r2
 800073a:	01db      	lsls	r3, r3, #7
 800073c:	461a      	mov	r2, r3
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	3b01      	subs	r3, #1
 8000742:	4413      	add	r3, r2
 8000744:	4a39      	ldr	r2, [pc, #228]	; (800082c <main+0x250>)
 8000746:	5cd3      	ldrb	r3, [r2, r3]
 8000748:	1ac9      	subs	r1, r1, r3
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	1c5a      	adds	r2, r3, #1
 800074e:	4613      	mov	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4413      	add	r3, r2
 8000754:	01db      	lsls	r3, r3, #7
 8000756:	461a      	mov	r2, r3
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	4413      	add	r3, r2
 800075c:	4a33      	ldr	r2, [pc, #204]	; (800082c <main+0x250>)
 800075e:	5cd3      	ldrb	r3, [r2, r3]
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	1ac9      	subs	r1, r1, r3
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	1c5a      	adds	r2, r3, #1
 8000768:	4613      	mov	r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	4413      	add	r3, r2
 800076e:	01db      	lsls	r3, r3, #7
 8000770:	461a      	mov	r2, r3
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	3301      	adds	r3, #1
 8000776:	4413      	add	r3, r2
 8000778:	4a2c      	ldr	r2, [pc, #176]	; (800082c <main+0x250>)
 800077a:	5cd3      	ldrb	r3, [r2, r3]
      int gy = image_buffer[(y - 1) * CAMERA_WIDTH + (x - 1)] + 2 * image_buffer[(y - 1) * CAMERA_WIDTH + x] + image_buffer[(y - 1) * CAMERA_WIDTH + (x + 1)]
 800077c:	1acb      	subs	r3, r1, r3
 800077e:	607b      	str	r3, [r7, #4]
      int gradient = sqrt(gx * gx + gy * gy);
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	fb03 f203 	mul.w	r2, r3, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	fb03 f303 	mul.w	r3, r3, r3
 800078c:	4413      	add	r3, r2
 800078e:	ee07 3a90 	vmov	s15, r3
 8000792:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000796:	eeb0 0b47 	vmov.f64	d0, d7
 800079a:	f009 fcc9 	bl	800a130 <sqrt>
 800079e:	eeb0 7b40 	vmov.f64	d7, d0
 80007a2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80007a6:	ee17 3a90 	vmov	r3, s15
 80007aa:	603b      	str	r3, [r7, #0]

      // Threshold the gradient to detect ridges
      if (gradient > 93) {
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	2b5d      	cmp	r3, #93	; 0x5d
 80007b0:	dd0b      	ble.n	80007ca <main+0x1ee>
        image_buffer[y * CAMERA_WIDTH + x] = 255;
 80007b2:	697a      	ldr	r2, [r7, #20]
 80007b4:	4613      	mov	r3, r2
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4413      	add	r3, r2
 80007ba:	01db      	lsls	r3, r3, #7
 80007bc:	461a      	mov	r2, r3
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	4413      	add	r3, r2
 80007c2:	4a1a      	ldr	r2, [pc, #104]	; (800082c <main+0x250>)
 80007c4:	21ff      	movs	r1, #255	; 0xff
 80007c6:	54d1      	strb	r1, [r2, r3]
 80007c8:	e00a      	b.n	80007e0 <main+0x204>
      } else {
        image_buffer[y * CAMERA_WIDTH + x] = 0;
 80007ca:	697a      	ldr	r2, [r7, #20]
 80007cc:	4613      	mov	r3, r2
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	4413      	add	r3, r2
 80007d2:	01db      	lsls	r3, r3, #7
 80007d4:	461a      	mov	r2, r3
 80007d6:	693b      	ldr	r3, [r7, #16]
 80007d8:	4413      	add	r3, r2
 80007da:	4a14      	ldr	r2, [pc, #80]	; (800082c <main+0x250>)
 80007dc:	2100      	movs	r1, #0
 80007de:	54d1      	strb	r1, [r2, r3]
    for (int x = 0; x < CAMERA_WIDTH; x++) {
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	3301      	adds	r3, #1
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	693b      	ldr	r3, [r7, #16]
 80007e8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80007ec:	f6ff af2a 	blt.w	8000644 <main+0x68>
  for (int y = 0; y < CAMERA_HEIGHT; y++) {
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	3301      	adds	r3, #1
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80007fc:	f6ff af1f 	blt.w	800063e <main+0x62>
      }
    }
  }

  // Write the image data to the file
  fwrite(image_buffer, 1, CAMERA_WIDTH * CAMERA_HEIGHT, image_file);
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
 8000806:	2101      	movs	r1, #1
 8000808:	4808      	ldr	r0, [pc, #32]	; (800082c <main+0x250>)
 800080a:	f009 f93d 	bl	8009a88 <fwrite>

  // Close the file
  fclose(image_file);
 800080e:	68f8      	ldr	r0, [r7, #12]
 8000810:	f008 fe08 	bl	8009424 <fclose>

  return 0;
 8000814:	2300      	movs	r3, #0
	HAL_UART_Transmit(&huart4, image_buffer, CAMERA_WIDTH * CAMERA_HEIGHT, HAL_MAX_DELAY);
	send_string("Hello, world!\n");
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000816:	4618      	mov	r0, r3
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	0800a190 	.word	0x0800a190
 8000824:	0800a194 	.word	0x0800a194
 8000828:	58020400 	.word	0x58020400
 800082c:	2400032c 	.word	0x2400032c
 8000830:	48020028 	.word	0x48020028
 8000834:	240000e0 	.word	0x240000e0

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b09c      	sub	sp, #112	; 0x70
 800083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000842:	224c      	movs	r2, #76	; 0x4c
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f009 f9ba 	bl	8009bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2220      	movs	r2, #32
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f009 f9b4 	bl	8009bc0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000858:	2002      	movs	r0, #2
 800085a:	f004 fd21 	bl	80052a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b28      	ldr	r3, [pc, #160]	; (8000904 <SystemClock_Config+0xcc>)
 8000864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000866:	4a27      	ldr	r2, [pc, #156]	; (8000904 <SystemClock_Config+0xcc>)
 8000868:	f023 0301 	bic.w	r3, r3, #1
 800086c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800086e:	4b25      	ldr	r3, [pc, #148]	; (8000904 <SystemClock_Config+0xcc>)
 8000870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	4b23      	ldr	r3, [pc, #140]	; (8000908 <SystemClock_Config+0xd0>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000880:	4a21      	ldr	r2, [pc, #132]	; (8000908 <SystemClock_Config+0xd0>)
 8000882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000886:	6193      	str	r3, [r2, #24]
 8000888:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <SystemClock_Config+0xd0>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000894:	bf00      	nop
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <SystemClock_Config+0xd0>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800089e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008a2:	d1f8      	bne.n	8000896 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a4:	2302      	movs	r3, #2
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008a8:	2301      	movs	r3, #1
 80008aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ac:	2340      	movs	r3, #64	; 0x40
 80008ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b8:	4618      	mov	r0, r3
 80008ba:	f004 fd2b 	bl	8005314 <HAL_RCC_OscConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80008c4:	f000 fa08 	bl	8000cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c8:	233f      	movs	r3, #63	; 0x3f
 80008ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008dc:	2340      	movs	r3, #64	; 0x40
 80008de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2101      	movs	r1, #1
 80008ec:	4618      	mov	r0, r3
 80008ee:	f005 f93f 	bl	8005b70 <HAL_RCC_ClockConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008f8:	f000 f9ee 	bl	8000cd8 <Error_Handler>
  }
}
 80008fc:	bf00      	nop
 80008fe:	3770      	adds	r7, #112	; 0x70
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	58000400 	.word	0x58000400
 8000908:	58024800 	.word	0x58024800

0800090c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_DCMI_Init+0x60>)
 8000912:	4a17      	ldr	r2, [pc, #92]	; (8000970 <MX_DCMI_Init+0x64>)
 8000914:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_DCMI_Init+0x60>)
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_DCMI_Init+0x60>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_DCMI_Init+0x60>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_DCMI_Init+0x60>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_DCMI_Init+0x60>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <MX_DCMI_Init+0x60>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_DCMI_Init+0x60>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <MX_DCMI_Init+0x60>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_DCMI_Init+0x60>)
 8000948:	2200      	movs	r2, #0
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <MX_DCMI_Init+0x60>)
 800094e:	2200      	movs	r2, #0
 8000950:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_DCMI_Init+0x60>)
 8000954:	2200      	movs	r2, #0
 8000956:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_DCMI_Init+0x60>)
 800095a:	f000 ff6d 	bl	8001838 <HAL_DCMI_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000964:	f000 f9b8 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	24000090 	.word	0x24000090
 8000970:	48020000 	.word	0x48020000

08000974 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000978:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <MX_DMA2D_Init+0x6c>)
 800097a:	4a1a      	ldr	r2, [pc, #104]	; (80009e4 <MX_DMA2D_Init+0x70>)
 800097c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800097e:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <MX_DMA2D_Init+0x6c>)
 8000980:	2200      	movs	r2, #0
 8000982:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_DMA2D_Init+0x6c>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_DMA2D_Init+0x6c>)
 800098c:	2200      	movs	r2, #0
 800098e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_DMA2D_Init+0x6c>)
 8000992:	2200      	movs	r2, #0
 8000994:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_DMA2D_Init+0x6c>)
 8000998:	2200      	movs	r2, #0
 800099a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_DMA2D_Init+0x6c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_DMA2D_Init+0x6c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <MX_DMA2D_Init+0x6c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_DMA2D_Init+0x6c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_DMA2D_Init+0x6c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009ba:	4809      	ldr	r0, [pc, #36]	; (80009e0 <MX_DMA2D_Init+0x6c>)
 80009bc:	f004 f852 	bl	8004a64 <HAL_DMA2D_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80009c6:	f000 f987 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009ca:	2101      	movs	r1, #1
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_DMA2D_Init+0x6c>)
 80009ce:	f004 f8ad 	bl	8004b2c <HAL_DMA2D_ConfigLayer>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 80009d8:	f000 f97e 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	24000158 	.word	0x24000158
 80009e4:	52001000 	.word	0x52001000

080009e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <MX_I2C1_Init+0x74>)
 80009ee:	4a1c      	ldr	r2, [pc, #112]	; (8000a60 <MX_I2C1_Init+0x78>)
 80009f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <MX_I2C1_Init+0x74>)
 80009f4:	4a1b      	ldr	r2, [pc, #108]	; (8000a64 <MX_I2C1_Init+0x7c>)
 80009f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MX_I2C1_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009fe:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <MX_I2C1_Init+0x74>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a04:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_I2C1_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_I2C1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <MX_I2C1_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_I2C1_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_I2C1_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a22:	480e      	ldr	r0, [pc, #56]	; (8000a5c <MX_I2C1_Init+0x74>)
 8000a24:	f004 fb14 	bl	8005050 <HAL_I2C_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a2e:	f000 f953 	bl	8000cd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a32:	2100      	movs	r1, #0
 8000a34:	4809      	ldr	r0, [pc, #36]	; (8000a5c <MX_I2C1_Init+0x74>)
 8000a36:	f004 fb9b 	bl	8005170 <HAL_I2CEx_ConfigAnalogFilter>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a40:	f000 f94a 	bl	8000cd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a44:	2100      	movs	r1, #0
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_I2C1_Init+0x74>)
 8000a48:	f004 fbdd 	bl	8005206 <HAL_I2CEx_ConfigDigitalFilter>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a52:	f000 f941 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	240001c0 	.word	0x240001c0
 8000a60:	40005400 	.word	0x40005400
 8000a64:	00707cbb 	.word	0x00707cbb

08000a68 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a6c:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <MX_UART4_Init+0x90>)
 8000a6e:	4a23      	ldr	r2, [pc, #140]	; (8000afc <MX_UART4_Init+0x94>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <MX_UART4_Init+0x90>)
 8000a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <MX_UART4_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <MX_UART4_Init+0x90>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <MX_UART4_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_UART4_Init+0x90>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <MX_UART4_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_UART4_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_UART4_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_UART4_Init+0x90>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <MX_UART4_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ab0:	4811      	ldr	r0, [pc, #68]	; (8000af8 <MX_UART4_Init+0x90>)
 8000ab2:	f006 ff51 	bl	8007958 <HAL_UART_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000abc:	f000 f90c 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	480d      	ldr	r0, [pc, #52]	; (8000af8 <MX_UART4_Init+0x90>)
 8000ac4:	f008 fb72 	bl	80091ac <HAL_UARTEx_SetTxFifoThreshold>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000ace:	f000 f903 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4808      	ldr	r0, [pc, #32]	; (8000af8 <MX_UART4_Init+0x90>)
 8000ad6:	f008 fba7 	bl	8009228 <HAL_UARTEx_SetRxFifoThreshold>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000ae0:	f000 f8fa 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <MX_UART4_Init+0x90>)
 8000ae6:	f008 fb28 	bl	800913a <HAL_UARTEx_DisableFifoMode>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000af0:	f000 f8f2 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */
  /* USER CODE END UART4_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	2400020c 	.word	0x2400020c
 8000afc:	40004c00 	.word	0x40004c00

08000b00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b04:	4b22      	ldr	r3, [pc, #136]	; (8000b90 <MX_USART2_UART_Init+0x90>)
 8000b06:	4a23      	ldr	r2, [pc, #140]	; (8000b94 <MX_USART2_UART_Init+0x94>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b0a:	4b21      	ldr	r3, [pc, #132]	; (8000b90 <MX_USART2_UART_Init+0x90>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <MX_USART2_UART_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <MX_USART2_UART_Init+0x90>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <MX_USART2_UART_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <MX_USART2_UART_Init+0x90>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <MX_USART2_UART_Init+0x90>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <MX_USART2_UART_Init+0x90>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b36:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <MX_USART2_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <MX_USART2_UART_Init+0x90>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b42:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <MX_USART2_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b48:	4811      	ldr	r0, [pc, #68]	; (8000b90 <MX_USART2_UART_Init+0x90>)
 8000b4a:	f006 ff05 	bl	8007958 <HAL_UART_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b54:	f000 f8c0 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b58:	2100      	movs	r1, #0
 8000b5a:	480d      	ldr	r0, [pc, #52]	; (8000b90 <MX_USART2_UART_Init+0x90>)
 8000b5c:	f008 fb26 	bl	80091ac <HAL_UARTEx_SetTxFifoThreshold>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b66:	f000 f8b7 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4808      	ldr	r0, [pc, #32]	; (8000b90 <MX_USART2_UART_Init+0x90>)
 8000b6e:	f008 fb5b 	bl	8009228 <HAL_UARTEx_SetRxFifoThreshold>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b78:	f000 f8ae 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <MX_USART2_UART_Init+0x90>)
 8000b7e:	f008 fadc 	bl	800913a <HAL_UARTEx_DisableFifoMode>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b88:	f000 f8a6 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	2400029c 	.word	0x2400029c
 8000b94:	40004400 	.word	0x40004400

08000b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <MX_DMA_Init+0x3c>)
 8000ba0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ba4:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <MX_DMA_Init+0x3c>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_DMA_Init+0x3c>)
 8000bb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	200b      	movs	r0, #11
 8000bc2:	f000 fe04 	bl	80017ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bc6:	200b      	movs	r0, #11
 8000bc8:	f000 fe1b 	bl	8001802 <HAL_NVIC_EnableIRQ>

}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	58024400 	.word	0x58024400

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	; 0x30
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bee:	4b38      	ldr	r3, [pc, #224]	; (8000cd0 <MX_GPIO_Init+0xf8>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf4:	4a36      	ldr	r2, [pc, #216]	; (8000cd0 <MX_GPIO_Init+0xf8>)
 8000bf6:	f043 0310 	orr.w	r3, r3, #16
 8000bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfe:	4b34      	ldr	r3, [pc, #208]	; (8000cd0 <MX_GPIO_Init+0xf8>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c04:	f003 0310 	and.w	r3, r3, #16
 8000c08:	61bb      	str	r3, [r7, #24]
 8000c0a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	4b30      	ldr	r3, [pc, #192]	; (8000cd0 <MX_GPIO_Init+0xf8>)
 8000c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c12:	4a2f      	ldr	r2, [pc, #188]	; (8000cd0 <MX_GPIO_Init+0xf8>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1c:	4b2c      	ldr	r3, [pc, #176]	; (8000cd0 <MX_GPIO_Init+0xf8>)
 8000c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	4b29      	ldr	r3, [pc, #164]	; (8000cd0 <MX_GPIO_Init+0xf8>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c30:	4a27      	ldr	r2, [pc, #156]	; (8000cd0 <MX_GPIO_Init+0xf8>)
 8000c32:	f043 0302 	orr.w	r3, r3, #2
 8000c36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3a:	4b25      	ldr	r3, [pc, #148]	; (8000cd0 <MX_GPIO_Init+0xf8>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c40:	f003 0302 	and.w	r3, r3, #2
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c48:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <MX_GPIO_Init+0xf8>)
 8000c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4e:	4a20      	ldr	r2, [pc, #128]	; (8000cd0 <MX_GPIO_Init+0xf8>)
 8000c50:	f043 0304 	orr.w	r3, r3, #4
 8000c54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c58:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <MX_GPIO_Init+0xf8>)
 8000c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5e:	f003 0304 	and.w	r3, r3, #4
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <MX_GPIO_Init+0xf8>)
 8000c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6c:	4a18      	ldr	r2, [pc, #96]	; (8000cd0 <MX_GPIO_Init+0xf8>)
 8000c6e:	f043 0308 	orr.w	r3, r3, #8
 8000c72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <MX_GPIO_Init+0xf8>)
 8000c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7c:	f003 0308 	and.w	r3, r3, #8
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <MX_GPIO_Init+0xf8>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8a:	4a11      	ldr	r2, [pc, #68]	; (8000cd0 <MX_GPIO_Init+0xf8>)
 8000c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_GPIO_Init+0xf8>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	480b      	ldr	r0, [pc, #44]	; (8000cd4 <MX_GPIO_Init+0xfc>)
 8000ca8:	f004 f99e 	bl	8004fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8000cac:	2301      	movs	r3, #1
 8000cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <MX_GPIO_Init+0xfc>)
 8000cc4:	f003 ffe0 	bl	8004c88 <HAL_GPIO_Init>

}
 8000cc8:	bf00      	nop
 8000cca:	3730      	adds	r7, #48	; 0x30
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	58024400 	.word	0x58024400
 8000cd4:	58020400 	.word	0x58020400

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <Error_Handler+0x8>
	...

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_MspInit+0x30>)
 8000cec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cf0:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <HAL_MspInit+0x30>)
 8000cf2:	f043 0302 	orr.w	r3, r3, #2
 8000cf6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_MspInit+0x30>)
 8000cfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d00:	f003 0302 	and.w	r3, r3, #2
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	58024400 	.word	0x58024400

08000d18 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08e      	sub	sp, #56	; 0x38
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a71      	ldr	r2, [pc, #452]	; (8000efc <HAL_DCMI_MspInit+0x1e4>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	f040 80db 	bne.w	8000ef2 <HAL_DCMI_MspInit+0x1da>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000d3c:	4b70      	ldr	r3, [pc, #448]	; (8000f00 <HAL_DCMI_MspInit+0x1e8>)
 8000d3e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000d42:	4a6f      	ldr	r2, [pc, #444]	; (8000f00 <HAL_DCMI_MspInit+0x1e8>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000d4c:	4b6c      	ldr	r3, [pc, #432]	; (8000f00 <HAL_DCMI_MspInit+0x1e8>)
 8000d4e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	623b      	str	r3, [r7, #32]
 8000d58:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d5a:	4b69      	ldr	r3, [pc, #420]	; (8000f00 <HAL_DCMI_MspInit+0x1e8>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d60:	4a67      	ldr	r2, [pc, #412]	; (8000f00 <HAL_DCMI_MspInit+0x1e8>)
 8000d62:	f043 0310 	orr.w	r3, r3, #16
 8000d66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d6a:	4b65      	ldr	r3, [pc, #404]	; (8000f00 <HAL_DCMI_MspInit+0x1e8>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d70:	f003 0310 	and.w	r3, r3, #16
 8000d74:	61fb      	str	r3, [r7, #28]
 8000d76:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d78:	4b61      	ldr	r3, [pc, #388]	; (8000f00 <HAL_DCMI_MspInit+0x1e8>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7e:	4a60      	ldr	r2, [pc, #384]	; (8000f00 <HAL_DCMI_MspInit+0x1e8>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d88:	4b5d      	ldr	r3, [pc, #372]	; (8000f00 <HAL_DCMI_MspInit+0x1e8>)
 8000d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	61bb      	str	r3, [r7, #24]
 8000d94:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d96:	4b5a      	ldr	r3, [pc, #360]	; (8000f00 <HAL_DCMI_MspInit+0x1e8>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	4a58      	ldr	r2, [pc, #352]	; (8000f00 <HAL_DCMI_MspInit+0x1e8>)
 8000d9e:	f043 0304 	orr.w	r3, r3, #4
 8000da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da6:	4b56      	ldr	r3, [pc, #344]	; (8000f00 <HAL_DCMI_MspInit+0x1e8>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dac:	f003 0304 	and.w	r3, r3, #4
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db4:	4b52      	ldr	r3, [pc, #328]	; (8000f00 <HAL_DCMI_MspInit+0x1e8>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	4a51      	ldr	r2, [pc, #324]	; (8000f00 <HAL_DCMI_MspInit+0x1e8>)
 8000dbc:	f043 0308 	orr.w	r3, r3, #8
 8000dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc4:	4b4e      	ldr	r3, [pc, #312]	; (8000f00 <HAL_DCMI_MspInit+0x1e8>)
 8000dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dd2:	4b4b      	ldr	r3, [pc, #300]	; (8000f00 <HAL_DCMI_MspInit+0x1e8>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd8:	4a49      	ldr	r2, [pc, #292]	; (8000f00 <HAL_DCMI_MspInit+0x1e8>)
 8000dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de2:	4b47      	ldr	r3, [pc, #284]	; (8000f00 <HAL_DCMI_MspInit+0x1e8>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000df0:	2370      	movs	r3, #112	; 0x70
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e00:	230d      	movs	r3, #13
 8000e02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e08:	4619      	mov	r1, r3
 8000e0a:	483e      	ldr	r0, [pc, #248]	; (8000f04 <HAL_DCMI_MspInit+0x1ec>)
 8000e0c:	f003 ff3c 	bl	8004c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000e10:	2350      	movs	r3, #80	; 0x50
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e20:	230d      	movs	r3, #13
 8000e22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4837      	ldr	r0, [pc, #220]	; (8000f08 <HAL_DCMI_MspInit+0x1f0>)
 8000e2c:	f003 ff2c 	bl	8004c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000e30:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e42:	230d      	movs	r3, #13
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	482f      	ldr	r0, [pc, #188]	; (8000f0c <HAL_DCMI_MspInit+0x1f4>)
 8000e4e:	f003 ff1b 	bl	8004c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e52:	2308      	movs	r3, #8
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e62:	230d      	movs	r3, #13
 8000e64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4828      	ldr	r0, [pc, #160]	; (8000f10 <HAL_DCMI_MspInit+0x1f8>)
 8000e6e:	f003 ff0b 	bl	8004c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e84:	230d      	movs	r3, #13
 8000e86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4821      	ldr	r0, [pc, #132]	; (8000f14 <HAL_DCMI_MspInit+0x1fc>)
 8000e90:	f003 fefa 	bl	8004c88 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8000e94:	4b20      	ldr	r3, [pc, #128]	; (8000f18 <HAL_DCMI_MspInit+0x200>)
 8000e96:	4a21      	ldr	r2, [pc, #132]	; (8000f1c <HAL_DCMI_MspInit+0x204>)
 8000e98:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8000e9a:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <HAL_DCMI_MspInit+0x200>)
 8000e9c:	224b      	movs	r2, #75	; 0x4b
 8000e9e:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <HAL_DCMI_MspInit+0x200>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <HAL_DCMI_MspInit+0x200>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <HAL_DCMI_MspInit+0x200>)
 8000eae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eb2:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000eb4:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <HAL_DCMI_MspInit+0x200>)
 8000eb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eba:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ebc:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <HAL_DCMI_MspInit+0x200>)
 8000ebe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ec2:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <HAL_DCMI_MspInit+0x200>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <HAL_DCMI_MspInit+0x200>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <HAL_DCMI_MspInit+0x200>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000ed6:	4810      	ldr	r0, [pc, #64]	; (8000f18 <HAL_DCMI_MspInit+0x200>)
 8000ed8:	f000 fd28 	bl	800192c <HAL_DMA_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_DCMI_MspInit+0x1ce>
    {
      Error_Handler();
 8000ee2:	f7ff fef9 	bl	8000cd8 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <HAL_DCMI_MspInit+0x200>)
 8000eea:	649a      	str	r2, [r3, #72]	; 0x48
 8000eec:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <HAL_DCMI_MspInit+0x200>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3738      	adds	r7, #56	; 0x38
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	48020000 	.word	0x48020000
 8000f00:	58024400 	.word	0x58024400
 8000f04:	58021000 	.word	0x58021000
 8000f08:	58020000 	.word	0x58020000
 8000f0c:	58020800 	.word	0x58020800
 8000f10:	58020c00 	.word	0x58020c00
 8000f14:	58021800 	.word	0x58021800
 8000f18:	240000e0 	.word	0x240000e0
 8000f1c:	40020010 	.word	0x40020010

08000f20 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <HAL_DMA2D_MspInit+0x3c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d10e      	bne.n	8000f50 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <HAL_DMA2D_MspInit+0x40>)
 8000f34:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f38:	4a09      	ldr	r2, [pc, #36]	; (8000f60 <HAL_DMA2D_MspInit+0x40>)
 8000f3a:	f043 0310 	orr.w	r3, r3, #16
 8000f3e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <HAL_DMA2D_MspInit+0x40>)
 8000f44:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f48:	f003 0310 	and.w	r3, r3, #16
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	52001000 	.word	0x52001000
 8000f60:	58024400 	.word	0x58024400

08000f64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b0b8      	sub	sp, #224	; 0xe0
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f7c:	f107 0310 	add.w	r3, r7, #16
 8000f80:	22bc      	movs	r2, #188	; 0xbc
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f008 fe1b 	bl	8009bc0 <memset>
  if(hi2c->Instance==I2C1)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a24      	ldr	r2, [pc, #144]	; (8001020 <HAL_I2C_MspInit+0xbc>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d141      	bne.n	8001018 <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f94:	2308      	movs	r3, #8
 8000f96:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f9e:	f107 0310 	add.w	r3, r7, #16
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f005 f970 	bl	8006288 <HAL_RCCEx_PeriphCLKConfig>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000fae:	f7ff fe93 	bl	8000cd8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <HAL_I2C_MspInit+0xc0>)
 8000fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb8:	4a1a      	ldr	r2, [pc, #104]	; (8001024 <HAL_I2C_MspInit+0xc0>)
 8000fba:	f043 0302 	orr.w	r3, r3, #2
 8000fbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <HAL_I2C_MspInit+0xc0>)
 8000fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fd0:	23c0      	movs	r3, #192	; 0xc0
 8000fd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd6:	2312      	movs	r3, #18
 8000fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fe8:	2304      	movs	r3, #4
 8000fea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480c      	ldr	r0, [pc, #48]	; (8001028 <HAL_I2C_MspInit+0xc4>)
 8000ff6:	f003 fe47 	bl	8004c88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_I2C_MspInit+0xc0>)
 8000ffc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001000:	4a08      	ldr	r2, [pc, #32]	; (8001024 <HAL_I2C_MspInit+0xc0>)
 8001002:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001006:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_I2C_MspInit+0xc0>)
 800100c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001018:	bf00      	nop
 800101a:	37e0      	adds	r7, #224	; 0xe0
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40005400 	.word	0x40005400
 8001024:	58024400 	.word	0x58024400
 8001028:	58020400 	.word	0x58020400

0800102c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b0ba      	sub	sp, #232	; 0xe8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001044:	f107 0318 	add.w	r3, r7, #24
 8001048:	22bc      	movs	r2, #188	; 0xbc
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f008 fdb7 	bl	8009bc0 <memset>
  if(huart->Instance==UART4)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a4c      	ldr	r2, [pc, #304]	; (8001188 <HAL_UART_MspInit+0x15c>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d142      	bne.n	80010e2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800105c:	2302      	movs	r3, #2
 800105e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001066:	f107 0318 	add.w	r3, r7, #24
 800106a:	4618      	mov	r0, r3
 800106c:	f005 f90c 	bl	8006288 <HAL_RCCEx_PeriphCLKConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001076:	f7ff fe2f 	bl	8000cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800107a:	4b44      	ldr	r3, [pc, #272]	; (800118c <HAL_UART_MspInit+0x160>)
 800107c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001080:	4a42      	ldr	r2, [pc, #264]	; (800118c <HAL_UART_MspInit+0x160>)
 8001082:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001086:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800108a:	4b40      	ldr	r3, [pc, #256]	; (800118c <HAL_UART_MspInit+0x160>)
 800108c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001090:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001098:	4b3c      	ldr	r3, [pc, #240]	; (800118c <HAL_UART_MspInit+0x160>)
 800109a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109e:	4a3b      	ldr	r2, [pc, #236]	; (800118c <HAL_UART_MspInit+0x160>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a8:	4b38      	ldr	r3, [pc, #224]	; (800118c <HAL_UART_MspInit+0x160>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010b6:	2303      	movs	r3, #3
 80010b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80010ce:	2308      	movs	r3, #8
 80010d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010d8:	4619      	mov	r1, r3
 80010da:	482d      	ldr	r0, [pc, #180]	; (8001190 <HAL_UART_MspInit+0x164>)
 80010dc:	f003 fdd4 	bl	8004c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010e0:	e04e      	b.n	8001180 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART2)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a2b      	ldr	r2, [pc, #172]	; (8001194 <HAL_UART_MspInit+0x168>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d149      	bne.n	8001180 <HAL_UART_MspInit+0x154>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f6:	f107 0318 	add.w	r3, r7, #24
 80010fa:	4618      	mov	r0, r3
 80010fc:	f005 f8c4 	bl	8006288 <HAL_RCCEx_PeriphCLKConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_UART_MspInit+0xde>
      Error_Handler();
 8001106:	f7ff fde7 	bl	8000cd8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800110a:	4b20      	ldr	r3, [pc, #128]	; (800118c <HAL_UART_MspInit+0x160>)
 800110c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001110:	4a1e      	ldr	r2, [pc, #120]	; (800118c <HAL_UART_MspInit+0x160>)
 8001112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001116:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800111a:	4b1c      	ldr	r3, [pc, #112]	; (800118c <HAL_UART_MspInit+0x160>)
 800111c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	4b18      	ldr	r3, [pc, #96]	; (800118c <HAL_UART_MspInit+0x160>)
 800112a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112e:	4a17      	ldr	r2, [pc, #92]	; (800118c <HAL_UART_MspInit+0x160>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <HAL_UART_MspInit+0x160>)
 800113a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001146:	230c      	movs	r3, #12
 8001148:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800115e:	2307      	movs	r3, #7
 8001160:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001168:	4619      	mov	r1, r3
 800116a:	4809      	ldr	r0, [pc, #36]	; (8001190 <HAL_UART_MspInit+0x164>)
 800116c:	f003 fd8c 	bl	8004c88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2100      	movs	r1, #0
 8001174:	2026      	movs	r0, #38	; 0x26
 8001176:	f000 fb2a 	bl	80017ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800117a:	2026      	movs	r0, #38	; 0x26
 800117c:	f000 fb41 	bl	8001802 <HAL_NVIC_EnableIRQ>
}
 8001180:	bf00      	nop
 8001182:	37e8      	adds	r7, #232	; 0xe8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40004c00 	.word	0x40004c00
 800118c:	58024400 	.word	0x58024400
 8001190:	58020000 	.word	0x58020000
 8001194:	40004400 	.word	0x40004400

08001198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800119c:	e7fe      	b.n	800119c <NMI_Handler+0x4>

0800119e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <HardFault_Handler+0x4>

080011a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <MemManage_Handler+0x4>

080011aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <BusFault_Handler+0x4>

080011b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <UsageFault_Handler+0x4>

080011b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e4:	f000 f9ec 	bl	80015c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}

080011ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <DMA1_Stream0_IRQHandler+0x10>)
 80011f2:	f002 f925 	bl	8003440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	240000e0 	.word	0x240000e0

08001200 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <USART2_IRQHandler+0x10>)
 8001206:	f006 fbf7 	bl	80079f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2400029c 	.word	0x2400029c

08001214 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	e00a      	b.n	800123c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001226:	f3af 8000 	nop.w
 800122a:	4601      	mov	r1, r0
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	60ba      	str	r2, [r7, #8]
 8001232:	b2ca      	uxtb	r2, r1
 8001234:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	3301      	adds	r3, #1
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	429a      	cmp	r2, r3
 8001242:	dbf0      	blt.n	8001226 <_read+0x12>
	}

return len;
 8001244:	687b      	ldr	r3, [r7, #4]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b086      	sub	sp, #24
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	e009      	b.n	8001274 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	60ba      	str	r2, [r7, #8]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	3301      	adds	r3, #1
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	429a      	cmp	r2, r3
 800127a:	dbf1      	blt.n	8001260 <_write+0x12>
	}
	return len;
 800127c:	687b      	ldr	r3, [r7, #4]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <_close>:

int _close(int file)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
	return -1;
 800128e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001292:	4618      	mov	r0, r3
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ae:	605a      	str	r2, [r3, #4]
	return 0;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <_isatty>:

int _isatty(int file)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
	return 1;
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
	return 0;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <_open>:

int _open(char *path, int flags, ...)
{
 80012ee:	b40e      	push	{r1, r2, r3}
 80012f0:	b480      	push	{r7}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 80012f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	b003      	add	sp, #12
 8001308:	4770      	bx	lr
	...

0800130c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001314:	4a14      	ldr	r2, [pc, #80]	; (8001368 <_sbrk+0x5c>)
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <_sbrk+0x60>)
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <_sbrk+0x64>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d102      	bne.n	800132e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <_sbrk+0x64>)
 800132a:	4a12      	ldr	r2, [pc, #72]	; (8001374 <_sbrk+0x68>)
 800132c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <_sbrk+0x64>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	429a      	cmp	r2, r3
 800133a:	d207      	bcs.n	800134c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800133c:	f008 f800 	bl	8009340 <__errno>
 8001340:	4603      	mov	r3, r0
 8001342:	220c      	movs	r2, #12
 8001344:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800134a:	e009      	b.n	8001360 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001352:	4b07      	ldr	r3, [pc, #28]	; (8001370 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	4a05      	ldr	r2, [pc, #20]	; (8001370 <_sbrk+0x64>)
 800135c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800135e:	68fb      	ldr	r3, [r7, #12]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	24080000 	.word	0x24080000
 800136c:	00000400 	.word	0x00000400
 8001370:	2404b32c 	.word	0x2404b32c
 8001374:	2404b348 	.word	0x2404b348

08001378 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800137c:	4b37      	ldr	r3, [pc, #220]	; (800145c <SystemInit+0xe4>)
 800137e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001382:	4a36      	ldr	r2, [pc, #216]	; (800145c <SystemInit+0xe4>)
 8001384:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001388:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800138c:	4b34      	ldr	r3, [pc, #208]	; (8001460 <SystemInit+0xe8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 030f 	and.w	r3, r3, #15
 8001394:	2b06      	cmp	r3, #6
 8001396:	d807      	bhi.n	80013a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001398:	4b31      	ldr	r3, [pc, #196]	; (8001460 <SystemInit+0xe8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f023 030f 	bic.w	r3, r3, #15
 80013a0:	4a2f      	ldr	r2, [pc, #188]	; (8001460 <SystemInit+0xe8>)
 80013a2:	f043 0307 	orr.w	r3, r3, #7
 80013a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013a8:	4b2e      	ldr	r3, [pc, #184]	; (8001464 <SystemInit+0xec>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a2d      	ldr	r2, [pc, #180]	; (8001464 <SystemInit+0xec>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013b4:	4b2b      	ldr	r3, [pc, #172]	; (8001464 <SystemInit+0xec>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013ba:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <SystemInit+0xec>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4929      	ldr	r1, [pc, #164]	; (8001464 <SystemInit+0xec>)
 80013c0:	4b29      	ldr	r3, [pc, #164]	; (8001468 <SystemInit+0xf0>)
 80013c2:	4013      	ands	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013c6:	4b26      	ldr	r3, [pc, #152]	; (8001460 <SystemInit+0xe8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d007      	beq.n	80013e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013d2:	4b23      	ldr	r3, [pc, #140]	; (8001460 <SystemInit+0xe8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f023 030f 	bic.w	r3, r3, #15
 80013da:	4a21      	ldr	r2, [pc, #132]	; (8001460 <SystemInit+0xe8>)
 80013dc:	f043 0307 	orr.w	r3, r3, #7
 80013e0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013e2:	4b20      	ldr	r3, [pc, #128]	; (8001464 <SystemInit+0xec>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80013e8:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <SystemInit+0xec>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80013ee:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <SystemInit+0xec>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <SystemInit+0xec>)
 80013f6:	4a1d      	ldr	r2, [pc, #116]	; (800146c <SystemInit+0xf4>)
 80013f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013fa:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <SystemInit+0xec>)
 80013fc:	4a1c      	ldr	r2, [pc, #112]	; (8001470 <SystemInit+0xf8>)
 80013fe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001400:	4b18      	ldr	r3, [pc, #96]	; (8001464 <SystemInit+0xec>)
 8001402:	4a1c      	ldr	r2, [pc, #112]	; (8001474 <SystemInit+0xfc>)
 8001404:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <SystemInit+0xec>)
 8001408:	2200      	movs	r2, #0
 800140a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <SystemInit+0xec>)
 800140e:	4a19      	ldr	r2, [pc, #100]	; (8001474 <SystemInit+0xfc>)
 8001410:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <SystemInit+0xec>)
 8001414:	2200      	movs	r2, #0
 8001416:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <SystemInit+0xec>)
 800141a:	4a16      	ldr	r2, [pc, #88]	; (8001474 <SystemInit+0xfc>)
 800141c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <SystemInit+0xec>)
 8001420:	2200      	movs	r2, #0
 8001422:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <SystemInit+0xec>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a0e      	ldr	r2, [pc, #56]	; (8001464 <SystemInit+0xec>)
 800142a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <SystemInit+0xec>)
 8001432:	2200      	movs	r2, #0
 8001434:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <SystemInit+0x100>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <SystemInit+0x104>)
 800143c:	4013      	ands	r3, r2
 800143e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001442:	d202      	bcs.n	800144a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001444:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <SystemInit+0x108>)
 8001446:	2201      	movs	r2, #1
 8001448:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <SystemInit+0x10c>)
 800144c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001450:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000ed00 	.word	0xe000ed00
 8001460:	52002000 	.word	0x52002000
 8001464:	58024400 	.word	0x58024400
 8001468:	eaf6ed7f 	.word	0xeaf6ed7f
 800146c:	02020200 	.word	0x02020200
 8001470:	01ff0000 	.word	0x01ff0000
 8001474:	01010280 	.word	0x01010280
 8001478:	5c001000 	.word	0x5c001000
 800147c:	ffff0000 	.word	0xffff0000
 8001480:	51008108 	.word	0x51008108
 8001484:	52004000 	.word	0x52004000

08001488 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001488:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800148c:	f7ff ff74 	bl	8001378 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001490:	480c      	ldr	r0, [pc, #48]	; (80014c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001492:	490d      	ldr	r1, [pc, #52]	; (80014c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001494:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001498:	e002      	b.n	80014a0 <LoopCopyDataInit>

0800149a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800149c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149e:	3304      	adds	r3, #4

080014a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a4:	d3f9      	bcc.n	800149a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014a8:	4c0a      	ldr	r4, [pc, #40]	; (80014d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ac:	e001      	b.n	80014b2 <LoopFillZerobss>

080014ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b0:	3204      	adds	r2, #4

080014b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b4:	d3fb      	bcc.n	80014ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014b6:	f008 faf5 	bl	8009aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ba:	f7ff f88f 	bl	80005dc <main>
  bx  lr
 80014be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014c0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014c8:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80014cc:	0800a254 	.word	0x0800a254
  ldr r2, =_sbss
 80014d0:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 80014d4:	2404b344 	.word	0x2404b344

080014d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d8:	e7fe      	b.n	80014d8 <ADC3_IRQHandler>
	...

080014dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e2:	2003      	movs	r0, #3
 80014e4:	f000 f968 	bl	80017b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014e8:	f004 fcf8 	bl	8005edc <HAL_RCC_GetSysClockFreq>
 80014ec:	4602      	mov	r2, r0
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_Init+0x68>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	0a1b      	lsrs	r3, r3, #8
 80014f4:	f003 030f 	and.w	r3, r3, #15
 80014f8:	4913      	ldr	r1, [pc, #76]	; (8001548 <HAL_Init+0x6c>)
 80014fa:	5ccb      	ldrb	r3, [r1, r3]
 80014fc:	f003 031f 	and.w	r3, r3, #31
 8001500:	fa22 f303 	lsr.w	r3, r2, r3
 8001504:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <HAL_Init+0x68>)
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	4a0e      	ldr	r2, [pc, #56]	; (8001548 <HAL_Init+0x6c>)
 8001510:	5cd3      	ldrb	r3, [r2, r3]
 8001512:	f003 031f 	and.w	r3, r3, #31
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	fa22 f303 	lsr.w	r3, r2, r3
 800151c:	4a0b      	ldr	r2, [pc, #44]	; (800154c <HAL_Init+0x70>)
 800151e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001520:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <HAL_Init+0x74>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001526:	200f      	movs	r0, #15
 8001528:	f000 f814 	bl	8001554 <HAL_InitTick>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e002      	b.n	800153c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001536:	f7ff fbd5 	bl	8000ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	58024400 	.word	0x58024400
 8001548:	0800a1a0 	.word	0x0800a1a0
 800154c:	24000004 	.word	0x24000004
 8001550:	24000000 	.word	0x24000000

08001554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_InitTick+0x60>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e021      	b.n	80015ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <HAL_InitTick+0x64>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <HAL_InitTick+0x60>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001576:	fbb3 f3f1 	udiv	r3, r3, r1
 800157a:	fbb2 f3f3 	udiv	r3, r2, r3
 800157e:	4618      	mov	r0, r3
 8001580:	f000 f94d 	bl	800181e <HAL_SYSTICK_Config>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e00e      	b.n	80015ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b0f      	cmp	r3, #15
 8001592:	d80a      	bhi.n	80015aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001594:	2200      	movs	r2, #0
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800159c:	f000 f917 	bl	80017ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a0:	4a06      	ldr	r2, [pc, #24]	; (80015bc <HAL_InitTick+0x68>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	e000      	b.n	80015ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	2400000c 	.word	0x2400000c
 80015b8:	24000000 	.word	0x24000000
 80015bc:	24000008 	.word	0x24000008

080015c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_IncTick+0x20>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_IncTick+0x24>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4413      	add	r3, r2
 80015d0:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <HAL_IncTick+0x24>)
 80015d2:	6013      	str	r3, [r2, #0]
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	2400000c 	.word	0x2400000c
 80015e4:	2404b330 	.word	0x2404b330

080015e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return uwTick;
 80015ec:	4b03      	ldr	r3, [pc, #12]	; (80015fc <HAL_GetTick+0x14>)
 80015ee:	681b      	ldr	r3, [r3, #0]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	2404b330 	.word	0x2404b330

08001600 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <HAL_GetREVID+0x14>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	0c1b      	lsrs	r3, r3, #16
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	5c001000 	.word	0x5c001000

08001618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <__NVIC_SetPriorityGrouping+0x40>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001634:	4013      	ands	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 8001642:	4313      	orrs	r3, r2
 8001644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001646:	4a04      	ldr	r2, [pc, #16]	; (8001658 <__NVIC_SetPriorityGrouping+0x40>)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	60d3      	str	r3, [r2, #12]
}
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000ed00 	.word	0xe000ed00
 800165c:	05fa0000 	.word	0x05fa0000

08001660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <__NVIC_GetPriorityGrouping+0x18>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	f003 0307 	and.w	r3, r3, #7
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168a:	2b00      	cmp	r3, #0
 800168c:	db0b      	blt.n	80016a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	f003 021f 	and.w	r2, r3, #31
 8001694:	4907      	ldr	r1, [pc, #28]	; (80016b4 <__NVIC_EnableIRQ+0x38>)
 8001696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	2001      	movs	r0, #1
 800169e:	fa00 f202 	lsl.w	r2, r0, r2
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000e100 	.word	0xe000e100

080016b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	db0a      	blt.n	80016e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	490c      	ldr	r1, [pc, #48]	; (8001704 <__NVIC_SetPriority+0x4c>)
 80016d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d6:	0112      	lsls	r2, r2, #4
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	440b      	add	r3, r1
 80016dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e0:	e00a      	b.n	80016f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4908      	ldr	r1, [pc, #32]	; (8001708 <__NVIC_SetPriority+0x50>)
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	3b04      	subs	r3, #4
 80016f0:	0112      	lsls	r2, r2, #4
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	440b      	add	r3, r1
 80016f6:	761a      	strb	r2, [r3, #24]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000e100 	.word	0xe000e100
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	; 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f1c3 0307 	rsb	r3, r3, #7
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf28      	it	cs
 800172a:	2304      	movcs	r3, #4
 800172c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3304      	adds	r3, #4
 8001732:	2b06      	cmp	r3, #6
 8001734:	d902      	bls.n	800173c <NVIC_EncodePriority+0x30>
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3b03      	subs	r3, #3
 800173a:	e000      	b.n	800173e <NVIC_EncodePriority+0x32>
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43da      	mvns	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	401a      	ands	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001754:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	43d9      	mvns	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	4313      	orrs	r3, r2
         );
}
 8001766:	4618      	mov	r0, r3
 8001768:	3724      	adds	r7, #36	; 0x24
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001784:	d301      	bcc.n	800178a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001786:	2301      	movs	r3, #1
 8001788:	e00f      	b.n	80017aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178a:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <SysTick_Config+0x40>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001792:	210f      	movs	r1, #15
 8001794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001798:	f7ff ff8e 	bl	80016b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <SysTick_Config+0x40>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <SysTick_Config+0x40>)
 80017a4:	2207      	movs	r2, #7
 80017a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	e000e010 	.word	0xe000e010

080017b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ff29 	bl	8001618 <__NVIC_SetPriorityGrouping>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017dc:	f7ff ff40 	bl	8001660 <__NVIC_GetPriorityGrouping>
 80017e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	6978      	ldr	r0, [r7, #20]
 80017e8:	f7ff ff90 	bl	800170c <NVIC_EncodePriority>
 80017ec:	4602      	mov	r2, r0
 80017ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff5f 	bl	80016b8 <__NVIC_SetPriority>
}
 80017fa:	bf00      	nop
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800180c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff33 	bl	800167c <__NVIC_EnableIRQ>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ffa4 	bl	8001774 <SysTick_Config>
 800182c:	4603      	mov	r3, r0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e069      	b.n	800191e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d102      	bne.n	800185c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff fa5e 	bl	8000d18 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d002      	beq.n	8001872 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6819      	ldr	r1, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <HAL_DCMI_Init+0xf0>)
 800187e:	400b      	ands	r3, r1
 8001880:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6819      	ldr	r1, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001896:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80018a2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80018ae:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80018ba:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80018c6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b10      	cmp	r3, #16
 80018d6:	d112      	bne.n	80018fe <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7f1b      	ldrb	r3, [r3, #28]
 80018dc:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	7f5b      	ldrb	r3, [r3, #29]
 80018e2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80018e4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	7f9b      	ldrb	r3, [r3, #30]
 80018ea:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80018ec:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7fdb      	ldrb	r3, [r3, #31]
 80018f4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80018fa:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80018fc:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f042 021e 	orr.w	r2, r2, #30
 800190c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	ffe0f007 	.word	0xffe0f007

0800192c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001934:	f7ff fe58 	bl	80015e8 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e316      	b.n	8001f72 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a66      	ldr	r2, [pc, #408]	; (8001ae4 <HAL_DMA_Init+0x1b8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d04a      	beq.n	80019e4 <HAL_DMA_Init+0xb8>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a65      	ldr	r2, [pc, #404]	; (8001ae8 <HAL_DMA_Init+0x1bc>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d045      	beq.n	80019e4 <HAL_DMA_Init+0xb8>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a63      	ldr	r2, [pc, #396]	; (8001aec <HAL_DMA_Init+0x1c0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d040      	beq.n	80019e4 <HAL_DMA_Init+0xb8>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a62      	ldr	r2, [pc, #392]	; (8001af0 <HAL_DMA_Init+0x1c4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d03b      	beq.n	80019e4 <HAL_DMA_Init+0xb8>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a60      	ldr	r2, [pc, #384]	; (8001af4 <HAL_DMA_Init+0x1c8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d036      	beq.n	80019e4 <HAL_DMA_Init+0xb8>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a5f      	ldr	r2, [pc, #380]	; (8001af8 <HAL_DMA_Init+0x1cc>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d031      	beq.n	80019e4 <HAL_DMA_Init+0xb8>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a5d      	ldr	r2, [pc, #372]	; (8001afc <HAL_DMA_Init+0x1d0>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d02c      	beq.n	80019e4 <HAL_DMA_Init+0xb8>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a5c      	ldr	r2, [pc, #368]	; (8001b00 <HAL_DMA_Init+0x1d4>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d027      	beq.n	80019e4 <HAL_DMA_Init+0xb8>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a5a      	ldr	r2, [pc, #360]	; (8001b04 <HAL_DMA_Init+0x1d8>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d022      	beq.n	80019e4 <HAL_DMA_Init+0xb8>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a59      	ldr	r2, [pc, #356]	; (8001b08 <HAL_DMA_Init+0x1dc>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d01d      	beq.n	80019e4 <HAL_DMA_Init+0xb8>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a57      	ldr	r2, [pc, #348]	; (8001b0c <HAL_DMA_Init+0x1e0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d018      	beq.n	80019e4 <HAL_DMA_Init+0xb8>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a56      	ldr	r2, [pc, #344]	; (8001b10 <HAL_DMA_Init+0x1e4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d013      	beq.n	80019e4 <HAL_DMA_Init+0xb8>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a54      	ldr	r2, [pc, #336]	; (8001b14 <HAL_DMA_Init+0x1e8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d00e      	beq.n	80019e4 <HAL_DMA_Init+0xb8>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a53      	ldr	r2, [pc, #332]	; (8001b18 <HAL_DMA_Init+0x1ec>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d009      	beq.n	80019e4 <HAL_DMA_Init+0xb8>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a51      	ldr	r2, [pc, #324]	; (8001b1c <HAL_DMA_Init+0x1f0>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d004      	beq.n	80019e4 <HAL_DMA_Init+0xb8>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a50      	ldr	r2, [pc, #320]	; (8001b20 <HAL_DMA_Init+0x1f4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d101      	bne.n	80019e8 <HAL_DMA_Init+0xbc>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <HAL_DMA_Init+0xbe>
 80019e8:	2300      	movs	r3, #0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 813b 	beq.w	8001c66 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2202      	movs	r2, #2
 80019f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a37      	ldr	r2, [pc, #220]	; (8001ae4 <HAL_DMA_Init+0x1b8>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d04a      	beq.n	8001aa0 <HAL_DMA_Init+0x174>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a36      	ldr	r2, [pc, #216]	; (8001ae8 <HAL_DMA_Init+0x1bc>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d045      	beq.n	8001aa0 <HAL_DMA_Init+0x174>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a34      	ldr	r2, [pc, #208]	; (8001aec <HAL_DMA_Init+0x1c0>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d040      	beq.n	8001aa0 <HAL_DMA_Init+0x174>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a33      	ldr	r2, [pc, #204]	; (8001af0 <HAL_DMA_Init+0x1c4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d03b      	beq.n	8001aa0 <HAL_DMA_Init+0x174>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a31      	ldr	r2, [pc, #196]	; (8001af4 <HAL_DMA_Init+0x1c8>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d036      	beq.n	8001aa0 <HAL_DMA_Init+0x174>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a30      	ldr	r2, [pc, #192]	; (8001af8 <HAL_DMA_Init+0x1cc>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d031      	beq.n	8001aa0 <HAL_DMA_Init+0x174>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a2e      	ldr	r2, [pc, #184]	; (8001afc <HAL_DMA_Init+0x1d0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d02c      	beq.n	8001aa0 <HAL_DMA_Init+0x174>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a2d      	ldr	r2, [pc, #180]	; (8001b00 <HAL_DMA_Init+0x1d4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d027      	beq.n	8001aa0 <HAL_DMA_Init+0x174>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a2b      	ldr	r2, [pc, #172]	; (8001b04 <HAL_DMA_Init+0x1d8>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d022      	beq.n	8001aa0 <HAL_DMA_Init+0x174>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a2a      	ldr	r2, [pc, #168]	; (8001b08 <HAL_DMA_Init+0x1dc>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d01d      	beq.n	8001aa0 <HAL_DMA_Init+0x174>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a28      	ldr	r2, [pc, #160]	; (8001b0c <HAL_DMA_Init+0x1e0>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d018      	beq.n	8001aa0 <HAL_DMA_Init+0x174>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a27      	ldr	r2, [pc, #156]	; (8001b10 <HAL_DMA_Init+0x1e4>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d013      	beq.n	8001aa0 <HAL_DMA_Init+0x174>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a25      	ldr	r2, [pc, #148]	; (8001b14 <HAL_DMA_Init+0x1e8>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00e      	beq.n	8001aa0 <HAL_DMA_Init+0x174>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a24      	ldr	r2, [pc, #144]	; (8001b18 <HAL_DMA_Init+0x1ec>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d009      	beq.n	8001aa0 <HAL_DMA_Init+0x174>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a22      	ldr	r2, [pc, #136]	; (8001b1c <HAL_DMA_Init+0x1f0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d004      	beq.n	8001aa0 <HAL_DMA_Init+0x174>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a21      	ldr	r2, [pc, #132]	; (8001b20 <HAL_DMA_Init+0x1f4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d108      	bne.n	8001ab2 <HAL_DMA_Init+0x186>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0201 	bic.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e007      	b.n	8001ac2 <HAL_DMA_Init+0x196>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0201 	bic.w	r2, r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ac2:	e02f      	b.n	8001b24 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ac4:	f7ff fd90 	bl	80015e8 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b05      	cmp	r3, #5
 8001ad0:	d928      	bls.n	8001b24 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2203      	movs	r2, #3
 8001adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e246      	b.n	8001f72 <HAL_DMA_Init+0x646>
 8001ae4:	40020010 	.word	0x40020010
 8001ae8:	40020028 	.word	0x40020028
 8001aec:	40020040 	.word	0x40020040
 8001af0:	40020058 	.word	0x40020058
 8001af4:	40020070 	.word	0x40020070
 8001af8:	40020088 	.word	0x40020088
 8001afc:	400200a0 	.word	0x400200a0
 8001b00:	400200b8 	.word	0x400200b8
 8001b04:	40020410 	.word	0x40020410
 8001b08:	40020428 	.word	0x40020428
 8001b0c:	40020440 	.word	0x40020440
 8001b10:	40020458 	.word	0x40020458
 8001b14:	40020470 	.word	0x40020470
 8001b18:	40020488 	.word	0x40020488
 8001b1c:	400204a0 	.word	0x400204a0
 8001b20:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1c8      	bne.n	8001ac4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	4b83      	ldr	r3, [pc, #524]	; (8001d4c <HAL_DMA_Init+0x420>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001b4a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b56:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b62:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d107      	bne.n	8001b88 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	4313      	orrs	r3, r2
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001b88:	4b71      	ldr	r3, [pc, #452]	; (8001d50 <HAL_DMA_Init+0x424>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b71      	ldr	r3, [pc, #452]	; (8001d54 <HAL_DMA_Init+0x428>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b94:	d328      	bcc.n	8001be8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b28      	cmp	r3, #40	; 0x28
 8001b9c:	d903      	bls.n	8001ba6 <HAL_DMA_Init+0x27a>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b2e      	cmp	r3, #46	; 0x2e
 8001ba4:	d917      	bls.n	8001bd6 <HAL_DMA_Init+0x2aa>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b3e      	cmp	r3, #62	; 0x3e
 8001bac:	d903      	bls.n	8001bb6 <HAL_DMA_Init+0x28a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b42      	cmp	r3, #66	; 0x42
 8001bb4:	d90f      	bls.n	8001bd6 <HAL_DMA_Init+0x2aa>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b46      	cmp	r3, #70	; 0x46
 8001bbc:	d903      	bls.n	8001bc6 <HAL_DMA_Init+0x29a>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b48      	cmp	r3, #72	; 0x48
 8001bc4:	d907      	bls.n	8001bd6 <HAL_DMA_Init+0x2aa>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b4e      	cmp	r3, #78	; 0x4e
 8001bcc:	d905      	bls.n	8001bda <HAL_DMA_Init+0x2ae>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b52      	cmp	r3, #82	; 0x52
 8001bd4:	d801      	bhi.n	8001bda <HAL_DMA_Init+0x2ae>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_DMA_Init+0x2b0>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001be6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f023 0307 	bic.w	r3, r3, #7
 8001bfe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	d117      	bne.n	8001c42 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00e      	beq.n	8001c42 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f002 fd93 	bl	8004750 <DMA_CheckFifoParam>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d008      	beq.n	8001c42 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2240      	movs	r2, #64	; 0x40
 8001c34:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e197      	b.n	8001f72 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f002 fcce 	bl	80045ec <DMA_CalcBaseAndBitshift>
 8001c50:	4603      	mov	r3, r0
 8001c52:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c58:	f003 031f 	and.w	r3, r3, #31
 8001c5c:	223f      	movs	r2, #63	; 0x3f
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	e0cd      	b.n	8001e02 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a3b      	ldr	r2, [pc, #236]	; (8001d58 <HAL_DMA_Init+0x42c>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d022      	beq.n	8001cb6 <HAL_DMA_Init+0x38a>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a39      	ldr	r2, [pc, #228]	; (8001d5c <HAL_DMA_Init+0x430>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d01d      	beq.n	8001cb6 <HAL_DMA_Init+0x38a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a38      	ldr	r2, [pc, #224]	; (8001d60 <HAL_DMA_Init+0x434>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d018      	beq.n	8001cb6 <HAL_DMA_Init+0x38a>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a36      	ldr	r2, [pc, #216]	; (8001d64 <HAL_DMA_Init+0x438>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d013      	beq.n	8001cb6 <HAL_DMA_Init+0x38a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a35      	ldr	r2, [pc, #212]	; (8001d68 <HAL_DMA_Init+0x43c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d00e      	beq.n	8001cb6 <HAL_DMA_Init+0x38a>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a33      	ldr	r2, [pc, #204]	; (8001d6c <HAL_DMA_Init+0x440>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d009      	beq.n	8001cb6 <HAL_DMA_Init+0x38a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a32      	ldr	r2, [pc, #200]	; (8001d70 <HAL_DMA_Init+0x444>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d004      	beq.n	8001cb6 <HAL_DMA_Init+0x38a>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a30      	ldr	r2, [pc, #192]	; (8001d74 <HAL_DMA_Init+0x448>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d101      	bne.n	8001cba <HAL_DMA_Init+0x38e>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <HAL_DMA_Init+0x390>
 8001cba:	2300      	movs	r3, #0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 8097 	beq.w	8001df0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a24      	ldr	r2, [pc, #144]	; (8001d58 <HAL_DMA_Init+0x42c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d021      	beq.n	8001d10 <HAL_DMA_Init+0x3e4>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a22      	ldr	r2, [pc, #136]	; (8001d5c <HAL_DMA_Init+0x430>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d01c      	beq.n	8001d10 <HAL_DMA_Init+0x3e4>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a21      	ldr	r2, [pc, #132]	; (8001d60 <HAL_DMA_Init+0x434>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d017      	beq.n	8001d10 <HAL_DMA_Init+0x3e4>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a1f      	ldr	r2, [pc, #124]	; (8001d64 <HAL_DMA_Init+0x438>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d012      	beq.n	8001d10 <HAL_DMA_Init+0x3e4>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a1e      	ldr	r2, [pc, #120]	; (8001d68 <HAL_DMA_Init+0x43c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d00d      	beq.n	8001d10 <HAL_DMA_Init+0x3e4>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a1c      	ldr	r2, [pc, #112]	; (8001d6c <HAL_DMA_Init+0x440>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d008      	beq.n	8001d10 <HAL_DMA_Init+0x3e4>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a1b      	ldr	r2, [pc, #108]	; (8001d70 <HAL_DMA_Init+0x444>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d003      	beq.n	8001d10 <HAL_DMA_Init+0x3e4>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a19      	ldr	r2, [pc, #100]	; (8001d74 <HAL_DMA_Init+0x448>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2202      	movs	r2, #2
 8001d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_DMA_Init+0x44c>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2b40      	cmp	r3, #64	; 0x40
 8001d38:	d020      	beq.n	8001d7c <HAL_DMA_Init+0x450>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2b80      	cmp	r3, #128	; 0x80
 8001d40:	d102      	bne.n	8001d48 <HAL_DMA_Init+0x41c>
 8001d42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d46:	e01a      	b.n	8001d7e <HAL_DMA_Init+0x452>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	e018      	b.n	8001d7e <HAL_DMA_Init+0x452>
 8001d4c:	fe10803f 	.word	0xfe10803f
 8001d50:	5c001000 	.word	0x5c001000
 8001d54:	ffff0000 	.word	0xffff0000
 8001d58:	58025408 	.word	0x58025408
 8001d5c:	5802541c 	.word	0x5802541c
 8001d60:	58025430 	.word	0x58025430
 8001d64:	58025444 	.word	0x58025444
 8001d68:	58025458 	.word	0x58025458
 8001d6c:	5802546c 	.word	0x5802546c
 8001d70:	58025480 	.word	0x58025480
 8001d74:	58025494 	.word	0x58025494
 8001d78:	fffe000f 	.word	0xfffe000f
 8001d7c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	68d2      	ldr	r2, [r2, #12]
 8001d82:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001da4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001dac:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b6e      	ldr	r3, [pc, #440]	; (8001f7c <HAL_DMA_Init+0x650>)
 8001dc4:	4413      	add	r3, r2
 8001dc6:	4a6e      	ldr	r2, [pc, #440]	; (8001f80 <HAL_DMA_Init+0x654>)
 8001dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	009a      	lsls	r2, r3, #2
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f002 fc09 	bl	80045ec <DMA_CalcBaseAndBitshift>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de2:	f003 031f 	and.w	r3, r3, #31
 8001de6:	2201      	movs	r2, #1
 8001de8:	409a      	lsls	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	e008      	b.n	8001e02 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2240      	movs	r2, #64	; 0x40
 8001df4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2203      	movs	r2, #3
 8001dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e0b7      	b.n	8001f72 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a5f      	ldr	r2, [pc, #380]	; (8001f84 <HAL_DMA_Init+0x658>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d072      	beq.n	8001ef2 <HAL_DMA_Init+0x5c6>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a5d      	ldr	r2, [pc, #372]	; (8001f88 <HAL_DMA_Init+0x65c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d06d      	beq.n	8001ef2 <HAL_DMA_Init+0x5c6>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a5c      	ldr	r2, [pc, #368]	; (8001f8c <HAL_DMA_Init+0x660>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d068      	beq.n	8001ef2 <HAL_DMA_Init+0x5c6>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a5a      	ldr	r2, [pc, #360]	; (8001f90 <HAL_DMA_Init+0x664>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d063      	beq.n	8001ef2 <HAL_DMA_Init+0x5c6>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a59      	ldr	r2, [pc, #356]	; (8001f94 <HAL_DMA_Init+0x668>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d05e      	beq.n	8001ef2 <HAL_DMA_Init+0x5c6>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a57      	ldr	r2, [pc, #348]	; (8001f98 <HAL_DMA_Init+0x66c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d059      	beq.n	8001ef2 <HAL_DMA_Init+0x5c6>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a56      	ldr	r2, [pc, #344]	; (8001f9c <HAL_DMA_Init+0x670>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d054      	beq.n	8001ef2 <HAL_DMA_Init+0x5c6>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a54      	ldr	r2, [pc, #336]	; (8001fa0 <HAL_DMA_Init+0x674>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d04f      	beq.n	8001ef2 <HAL_DMA_Init+0x5c6>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a53      	ldr	r2, [pc, #332]	; (8001fa4 <HAL_DMA_Init+0x678>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d04a      	beq.n	8001ef2 <HAL_DMA_Init+0x5c6>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a51      	ldr	r2, [pc, #324]	; (8001fa8 <HAL_DMA_Init+0x67c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d045      	beq.n	8001ef2 <HAL_DMA_Init+0x5c6>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a50      	ldr	r2, [pc, #320]	; (8001fac <HAL_DMA_Init+0x680>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d040      	beq.n	8001ef2 <HAL_DMA_Init+0x5c6>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a4e      	ldr	r2, [pc, #312]	; (8001fb0 <HAL_DMA_Init+0x684>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d03b      	beq.n	8001ef2 <HAL_DMA_Init+0x5c6>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a4d      	ldr	r2, [pc, #308]	; (8001fb4 <HAL_DMA_Init+0x688>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d036      	beq.n	8001ef2 <HAL_DMA_Init+0x5c6>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a4b      	ldr	r2, [pc, #300]	; (8001fb8 <HAL_DMA_Init+0x68c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d031      	beq.n	8001ef2 <HAL_DMA_Init+0x5c6>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a4a      	ldr	r2, [pc, #296]	; (8001fbc <HAL_DMA_Init+0x690>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d02c      	beq.n	8001ef2 <HAL_DMA_Init+0x5c6>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a48      	ldr	r2, [pc, #288]	; (8001fc0 <HAL_DMA_Init+0x694>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d027      	beq.n	8001ef2 <HAL_DMA_Init+0x5c6>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a47      	ldr	r2, [pc, #284]	; (8001fc4 <HAL_DMA_Init+0x698>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d022      	beq.n	8001ef2 <HAL_DMA_Init+0x5c6>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a45      	ldr	r2, [pc, #276]	; (8001fc8 <HAL_DMA_Init+0x69c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d01d      	beq.n	8001ef2 <HAL_DMA_Init+0x5c6>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a44      	ldr	r2, [pc, #272]	; (8001fcc <HAL_DMA_Init+0x6a0>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d018      	beq.n	8001ef2 <HAL_DMA_Init+0x5c6>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a42      	ldr	r2, [pc, #264]	; (8001fd0 <HAL_DMA_Init+0x6a4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d013      	beq.n	8001ef2 <HAL_DMA_Init+0x5c6>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a41      	ldr	r2, [pc, #260]	; (8001fd4 <HAL_DMA_Init+0x6a8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d00e      	beq.n	8001ef2 <HAL_DMA_Init+0x5c6>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a3f      	ldr	r2, [pc, #252]	; (8001fd8 <HAL_DMA_Init+0x6ac>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d009      	beq.n	8001ef2 <HAL_DMA_Init+0x5c6>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a3e      	ldr	r2, [pc, #248]	; (8001fdc <HAL_DMA_Init+0x6b0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d004      	beq.n	8001ef2 <HAL_DMA_Init+0x5c6>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a3c      	ldr	r2, [pc, #240]	; (8001fe0 <HAL_DMA_Init+0x6b4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d101      	bne.n	8001ef6 <HAL_DMA_Init+0x5ca>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_DMA_Init+0x5cc>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d032      	beq.n	8001f62 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f002 fca3 	bl	8004848 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b80      	cmp	r3, #128	; 0x80
 8001f08:	d102      	bne.n	8001f10 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001f24:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d010      	beq.n	8001f50 <HAL_DMA_Init+0x624>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d80c      	bhi.n	8001f50 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f002 fd20 	bl	800497c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	e008      	b.n	8001f62 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	a7fdabf8 	.word	0xa7fdabf8
 8001f80:	cccccccd 	.word	0xcccccccd
 8001f84:	40020010 	.word	0x40020010
 8001f88:	40020028 	.word	0x40020028
 8001f8c:	40020040 	.word	0x40020040
 8001f90:	40020058 	.word	0x40020058
 8001f94:	40020070 	.word	0x40020070
 8001f98:	40020088 	.word	0x40020088
 8001f9c:	400200a0 	.word	0x400200a0
 8001fa0:	400200b8 	.word	0x400200b8
 8001fa4:	40020410 	.word	0x40020410
 8001fa8:	40020428 	.word	0x40020428
 8001fac:	40020440 	.word	0x40020440
 8001fb0:	40020458 	.word	0x40020458
 8001fb4:	40020470 	.word	0x40020470
 8001fb8:	40020488 	.word	0x40020488
 8001fbc:	400204a0 	.word	0x400204a0
 8001fc0:	400204b8 	.word	0x400204b8
 8001fc4:	58025408 	.word	0x58025408
 8001fc8:	5802541c 	.word	0x5802541c
 8001fcc:	58025430 	.word	0x58025430
 8001fd0:	58025444 	.word	0x58025444
 8001fd4:	58025458 	.word	0x58025458
 8001fd8:	5802546c 	.word	0x5802546c
 8001fdc:	58025480 	.word	0x58025480
 8001fe0:	58025494 	.word	0x58025494

08001fe4 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0ec      	b.n	80021da <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_DMA_Start+0x2a>
 800200a:	2302      	movs	r3, #2
 800200c:	e0e5      	b.n	80021da <HAL_DMA_Start+0x1f6>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b01      	cmp	r3, #1
 8002020:	f040 80d0 	bne.w	80021c4 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a6b      	ldr	r2, [pc, #428]	; (80021e4 <HAL_DMA_Start+0x200>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d04a      	beq.n	80020d2 <HAL_DMA_Start+0xee>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a69      	ldr	r2, [pc, #420]	; (80021e8 <HAL_DMA_Start+0x204>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d045      	beq.n	80020d2 <HAL_DMA_Start+0xee>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a68      	ldr	r2, [pc, #416]	; (80021ec <HAL_DMA_Start+0x208>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d040      	beq.n	80020d2 <HAL_DMA_Start+0xee>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a66      	ldr	r2, [pc, #408]	; (80021f0 <HAL_DMA_Start+0x20c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d03b      	beq.n	80020d2 <HAL_DMA_Start+0xee>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a65      	ldr	r2, [pc, #404]	; (80021f4 <HAL_DMA_Start+0x210>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d036      	beq.n	80020d2 <HAL_DMA_Start+0xee>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a63      	ldr	r2, [pc, #396]	; (80021f8 <HAL_DMA_Start+0x214>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d031      	beq.n	80020d2 <HAL_DMA_Start+0xee>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a62      	ldr	r2, [pc, #392]	; (80021fc <HAL_DMA_Start+0x218>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d02c      	beq.n	80020d2 <HAL_DMA_Start+0xee>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a60      	ldr	r2, [pc, #384]	; (8002200 <HAL_DMA_Start+0x21c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d027      	beq.n	80020d2 <HAL_DMA_Start+0xee>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a5f      	ldr	r2, [pc, #380]	; (8002204 <HAL_DMA_Start+0x220>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d022      	beq.n	80020d2 <HAL_DMA_Start+0xee>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a5d      	ldr	r2, [pc, #372]	; (8002208 <HAL_DMA_Start+0x224>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d01d      	beq.n	80020d2 <HAL_DMA_Start+0xee>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a5c      	ldr	r2, [pc, #368]	; (800220c <HAL_DMA_Start+0x228>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d018      	beq.n	80020d2 <HAL_DMA_Start+0xee>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a5a      	ldr	r2, [pc, #360]	; (8002210 <HAL_DMA_Start+0x22c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d013      	beq.n	80020d2 <HAL_DMA_Start+0xee>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a59      	ldr	r2, [pc, #356]	; (8002214 <HAL_DMA_Start+0x230>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d00e      	beq.n	80020d2 <HAL_DMA_Start+0xee>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a57      	ldr	r2, [pc, #348]	; (8002218 <HAL_DMA_Start+0x234>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d009      	beq.n	80020d2 <HAL_DMA_Start+0xee>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a56      	ldr	r2, [pc, #344]	; (800221c <HAL_DMA_Start+0x238>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d004      	beq.n	80020d2 <HAL_DMA_Start+0xee>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a54      	ldr	r2, [pc, #336]	; (8002220 <HAL_DMA_Start+0x23c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d108      	bne.n	80020e4 <HAL_DMA_Start+0x100>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0201 	bic.w	r2, r2, #1
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	e007      	b.n	80020f4 <HAL_DMA_Start+0x110>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0201 	bic.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	68b9      	ldr	r1, [r7, #8]
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f002 f8ca 	bl	8004294 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a37      	ldr	r2, [pc, #220]	; (80021e4 <HAL_DMA_Start+0x200>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d04a      	beq.n	80021a0 <HAL_DMA_Start+0x1bc>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a36      	ldr	r2, [pc, #216]	; (80021e8 <HAL_DMA_Start+0x204>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d045      	beq.n	80021a0 <HAL_DMA_Start+0x1bc>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a34      	ldr	r2, [pc, #208]	; (80021ec <HAL_DMA_Start+0x208>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d040      	beq.n	80021a0 <HAL_DMA_Start+0x1bc>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a33      	ldr	r2, [pc, #204]	; (80021f0 <HAL_DMA_Start+0x20c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d03b      	beq.n	80021a0 <HAL_DMA_Start+0x1bc>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a31      	ldr	r2, [pc, #196]	; (80021f4 <HAL_DMA_Start+0x210>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d036      	beq.n	80021a0 <HAL_DMA_Start+0x1bc>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a30      	ldr	r2, [pc, #192]	; (80021f8 <HAL_DMA_Start+0x214>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d031      	beq.n	80021a0 <HAL_DMA_Start+0x1bc>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a2e      	ldr	r2, [pc, #184]	; (80021fc <HAL_DMA_Start+0x218>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d02c      	beq.n	80021a0 <HAL_DMA_Start+0x1bc>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a2d      	ldr	r2, [pc, #180]	; (8002200 <HAL_DMA_Start+0x21c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d027      	beq.n	80021a0 <HAL_DMA_Start+0x1bc>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a2b      	ldr	r2, [pc, #172]	; (8002204 <HAL_DMA_Start+0x220>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d022      	beq.n	80021a0 <HAL_DMA_Start+0x1bc>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a2a      	ldr	r2, [pc, #168]	; (8002208 <HAL_DMA_Start+0x224>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d01d      	beq.n	80021a0 <HAL_DMA_Start+0x1bc>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a28      	ldr	r2, [pc, #160]	; (800220c <HAL_DMA_Start+0x228>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d018      	beq.n	80021a0 <HAL_DMA_Start+0x1bc>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a27      	ldr	r2, [pc, #156]	; (8002210 <HAL_DMA_Start+0x22c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d013      	beq.n	80021a0 <HAL_DMA_Start+0x1bc>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a25      	ldr	r2, [pc, #148]	; (8002214 <HAL_DMA_Start+0x230>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00e      	beq.n	80021a0 <HAL_DMA_Start+0x1bc>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a24      	ldr	r2, [pc, #144]	; (8002218 <HAL_DMA_Start+0x234>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d009      	beq.n	80021a0 <HAL_DMA_Start+0x1bc>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a22      	ldr	r2, [pc, #136]	; (800221c <HAL_DMA_Start+0x238>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d004      	beq.n	80021a0 <HAL_DMA_Start+0x1bc>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a21      	ldr	r2, [pc, #132]	; (8002220 <HAL_DMA_Start+0x23c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d108      	bne.n	80021b2 <HAL_DMA_Start+0x1ce>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	e012      	b.n	80021d8 <HAL_DMA_Start+0x1f4>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f042 0201 	orr.w	r2, r2, #1
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	e009      	b.n	80021d8 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80021d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40020010 	.word	0x40020010
 80021e8:	40020028 	.word	0x40020028
 80021ec:	40020040 	.word	0x40020040
 80021f0:	40020058 	.word	0x40020058
 80021f4:	40020070 	.word	0x40020070
 80021f8:	40020088 	.word	0x40020088
 80021fc:	400200a0 	.word	0x400200a0
 8002200:	400200b8 	.word	0x400200b8
 8002204:	40020410 	.word	0x40020410
 8002208:	40020428 	.word	0x40020428
 800220c:	40020440 	.word	0x40020440
 8002210:	40020458 	.word	0x40020458
 8002214:	40020470 	.word	0x40020470
 8002218:	40020488 	.word	0x40020488
 800221c:	400204a0 	.word	0x400204a0
 8002220:	400204b8 	.word	0x400204b8

08002224 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800222c:	f7ff f9dc 	bl	80015e8 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e2dc      	b.n	80027f6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d008      	beq.n	800225a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2280      	movs	r2, #128	; 0x80
 800224c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e2cd      	b.n	80027f6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a76      	ldr	r2, [pc, #472]	; (8002438 <HAL_DMA_Abort+0x214>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d04a      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a74      	ldr	r2, [pc, #464]	; (800243c <HAL_DMA_Abort+0x218>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d045      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a73      	ldr	r2, [pc, #460]	; (8002440 <HAL_DMA_Abort+0x21c>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d040      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a71      	ldr	r2, [pc, #452]	; (8002444 <HAL_DMA_Abort+0x220>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d03b      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a70      	ldr	r2, [pc, #448]	; (8002448 <HAL_DMA_Abort+0x224>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d036      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a6e      	ldr	r2, [pc, #440]	; (800244c <HAL_DMA_Abort+0x228>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d031      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a6d      	ldr	r2, [pc, #436]	; (8002450 <HAL_DMA_Abort+0x22c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d02c      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a6b      	ldr	r2, [pc, #428]	; (8002454 <HAL_DMA_Abort+0x230>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d027      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a6a      	ldr	r2, [pc, #424]	; (8002458 <HAL_DMA_Abort+0x234>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d022      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a68      	ldr	r2, [pc, #416]	; (800245c <HAL_DMA_Abort+0x238>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d01d      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a67      	ldr	r2, [pc, #412]	; (8002460 <HAL_DMA_Abort+0x23c>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d018      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a65      	ldr	r2, [pc, #404]	; (8002464 <HAL_DMA_Abort+0x240>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d013      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a64      	ldr	r2, [pc, #400]	; (8002468 <HAL_DMA_Abort+0x244>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d00e      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a62      	ldr	r2, [pc, #392]	; (800246c <HAL_DMA_Abort+0x248>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d009      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a61      	ldr	r2, [pc, #388]	; (8002470 <HAL_DMA_Abort+0x24c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d004      	beq.n	80022fa <HAL_DMA_Abort+0xd6>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a5f      	ldr	r2, [pc, #380]	; (8002474 <HAL_DMA_Abort+0x250>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d101      	bne.n	80022fe <HAL_DMA_Abort+0xda>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <HAL_DMA_Abort+0xdc>
 80022fe:	2300      	movs	r3, #0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d013      	beq.n	800232c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 021e 	bic.w	r2, r2, #30
 8002312:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695a      	ldr	r2, [r3, #20]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002322:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	e00a      	b.n	8002342 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 020e 	bic.w	r2, r2, #14
 800233a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a3c      	ldr	r2, [pc, #240]	; (8002438 <HAL_DMA_Abort+0x214>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d072      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a3a      	ldr	r2, [pc, #232]	; (800243c <HAL_DMA_Abort+0x218>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d06d      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a39      	ldr	r2, [pc, #228]	; (8002440 <HAL_DMA_Abort+0x21c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d068      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a37      	ldr	r2, [pc, #220]	; (8002444 <HAL_DMA_Abort+0x220>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d063      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a36      	ldr	r2, [pc, #216]	; (8002448 <HAL_DMA_Abort+0x224>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d05e      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a34      	ldr	r2, [pc, #208]	; (800244c <HAL_DMA_Abort+0x228>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d059      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a33      	ldr	r2, [pc, #204]	; (8002450 <HAL_DMA_Abort+0x22c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d054      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a31      	ldr	r2, [pc, #196]	; (8002454 <HAL_DMA_Abort+0x230>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d04f      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a30      	ldr	r2, [pc, #192]	; (8002458 <HAL_DMA_Abort+0x234>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d04a      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a2e      	ldr	r2, [pc, #184]	; (800245c <HAL_DMA_Abort+0x238>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d045      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a2d      	ldr	r2, [pc, #180]	; (8002460 <HAL_DMA_Abort+0x23c>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d040      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a2b      	ldr	r2, [pc, #172]	; (8002464 <HAL_DMA_Abort+0x240>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d03b      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a2a      	ldr	r2, [pc, #168]	; (8002468 <HAL_DMA_Abort+0x244>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d036      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a28      	ldr	r2, [pc, #160]	; (800246c <HAL_DMA_Abort+0x248>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d031      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a27      	ldr	r2, [pc, #156]	; (8002470 <HAL_DMA_Abort+0x24c>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d02c      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a25      	ldr	r2, [pc, #148]	; (8002474 <HAL_DMA_Abort+0x250>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d027      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a24      	ldr	r2, [pc, #144]	; (8002478 <HAL_DMA_Abort+0x254>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d022      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a22      	ldr	r2, [pc, #136]	; (800247c <HAL_DMA_Abort+0x258>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d01d      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a21      	ldr	r2, [pc, #132]	; (8002480 <HAL_DMA_Abort+0x25c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d018      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a1f      	ldr	r2, [pc, #124]	; (8002484 <HAL_DMA_Abort+0x260>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d013      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a1e      	ldr	r2, [pc, #120]	; (8002488 <HAL_DMA_Abort+0x264>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d00e      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a1c      	ldr	r2, [pc, #112]	; (800248c <HAL_DMA_Abort+0x268>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d009      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a1b      	ldr	r2, [pc, #108]	; (8002490 <HAL_DMA_Abort+0x26c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d004      	beq.n	8002432 <HAL_DMA_Abort+0x20e>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a19      	ldr	r2, [pc, #100]	; (8002494 <HAL_DMA_Abort+0x270>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d132      	bne.n	8002498 <HAL_DMA_Abort+0x274>
 8002432:	2301      	movs	r3, #1
 8002434:	e031      	b.n	800249a <HAL_DMA_Abort+0x276>
 8002436:	bf00      	nop
 8002438:	40020010 	.word	0x40020010
 800243c:	40020028 	.word	0x40020028
 8002440:	40020040 	.word	0x40020040
 8002444:	40020058 	.word	0x40020058
 8002448:	40020070 	.word	0x40020070
 800244c:	40020088 	.word	0x40020088
 8002450:	400200a0 	.word	0x400200a0
 8002454:	400200b8 	.word	0x400200b8
 8002458:	40020410 	.word	0x40020410
 800245c:	40020428 	.word	0x40020428
 8002460:	40020440 	.word	0x40020440
 8002464:	40020458 	.word	0x40020458
 8002468:	40020470 	.word	0x40020470
 800246c:	40020488 	.word	0x40020488
 8002470:	400204a0 	.word	0x400204a0
 8002474:	400204b8 	.word	0x400204b8
 8002478:	58025408 	.word	0x58025408
 800247c:	5802541c 	.word	0x5802541c
 8002480:	58025430 	.word	0x58025430
 8002484:	58025444 	.word	0x58025444
 8002488:	58025458 	.word	0x58025458
 800248c:	5802546c 	.word	0x5802546c
 8002490:	58025480 	.word	0x58025480
 8002494:	58025494 	.word	0x58025494
 8002498:	2300      	movs	r3, #0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d007      	beq.n	80024ae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a6d      	ldr	r2, [pc, #436]	; (8002668 <HAL_DMA_Abort+0x444>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d04a      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a6b      	ldr	r2, [pc, #428]	; (800266c <HAL_DMA_Abort+0x448>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d045      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a6a      	ldr	r2, [pc, #424]	; (8002670 <HAL_DMA_Abort+0x44c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d040      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a68      	ldr	r2, [pc, #416]	; (8002674 <HAL_DMA_Abort+0x450>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d03b      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a67      	ldr	r2, [pc, #412]	; (8002678 <HAL_DMA_Abort+0x454>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d036      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a65      	ldr	r2, [pc, #404]	; (800267c <HAL_DMA_Abort+0x458>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d031      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a64      	ldr	r2, [pc, #400]	; (8002680 <HAL_DMA_Abort+0x45c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d02c      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a62      	ldr	r2, [pc, #392]	; (8002684 <HAL_DMA_Abort+0x460>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d027      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a61      	ldr	r2, [pc, #388]	; (8002688 <HAL_DMA_Abort+0x464>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d022      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a5f      	ldr	r2, [pc, #380]	; (800268c <HAL_DMA_Abort+0x468>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d01d      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a5e      	ldr	r2, [pc, #376]	; (8002690 <HAL_DMA_Abort+0x46c>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d018      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a5c      	ldr	r2, [pc, #368]	; (8002694 <HAL_DMA_Abort+0x470>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d013      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a5b      	ldr	r2, [pc, #364]	; (8002698 <HAL_DMA_Abort+0x474>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d00e      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a59      	ldr	r2, [pc, #356]	; (800269c <HAL_DMA_Abort+0x478>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d009      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a58      	ldr	r2, [pc, #352]	; (80026a0 <HAL_DMA_Abort+0x47c>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d004      	beq.n	800254e <HAL_DMA_Abort+0x32a>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a56      	ldr	r2, [pc, #344]	; (80026a4 <HAL_DMA_Abort+0x480>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d108      	bne.n	8002560 <HAL_DMA_Abort+0x33c>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0201 	bic.w	r2, r2, #1
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	e007      	b.n	8002570 <HAL_DMA_Abort+0x34c>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0201 	bic.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002570:	e013      	b.n	800259a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002572:	f7ff f839 	bl	80015e8 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b05      	cmp	r3, #5
 800257e:	d90c      	bls.n	800259a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2220      	movs	r2, #32
 8002584:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2203      	movs	r2, #3
 800258a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e12d      	b.n	80027f6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1e5      	bne.n	8002572 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a2f      	ldr	r2, [pc, #188]	; (8002668 <HAL_DMA_Abort+0x444>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d04a      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a2d      	ldr	r2, [pc, #180]	; (800266c <HAL_DMA_Abort+0x448>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d045      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a2c      	ldr	r2, [pc, #176]	; (8002670 <HAL_DMA_Abort+0x44c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d040      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a2a      	ldr	r2, [pc, #168]	; (8002674 <HAL_DMA_Abort+0x450>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d03b      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a29      	ldr	r2, [pc, #164]	; (8002678 <HAL_DMA_Abort+0x454>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d036      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a27      	ldr	r2, [pc, #156]	; (800267c <HAL_DMA_Abort+0x458>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d031      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a26      	ldr	r2, [pc, #152]	; (8002680 <HAL_DMA_Abort+0x45c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d02c      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a24      	ldr	r2, [pc, #144]	; (8002684 <HAL_DMA_Abort+0x460>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d027      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a23      	ldr	r2, [pc, #140]	; (8002688 <HAL_DMA_Abort+0x464>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d022      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a21      	ldr	r2, [pc, #132]	; (800268c <HAL_DMA_Abort+0x468>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d01d      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a20      	ldr	r2, [pc, #128]	; (8002690 <HAL_DMA_Abort+0x46c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d018      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a1e      	ldr	r2, [pc, #120]	; (8002694 <HAL_DMA_Abort+0x470>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d013      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a1d      	ldr	r2, [pc, #116]	; (8002698 <HAL_DMA_Abort+0x474>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d00e      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a1b      	ldr	r2, [pc, #108]	; (800269c <HAL_DMA_Abort+0x478>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d009      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a1a      	ldr	r2, [pc, #104]	; (80026a0 <HAL_DMA_Abort+0x47c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d004      	beq.n	8002646 <HAL_DMA_Abort+0x422>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a18      	ldr	r2, [pc, #96]	; (80026a4 <HAL_DMA_Abort+0x480>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d101      	bne.n	800264a <HAL_DMA_Abort+0x426>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_DMA_Abort+0x428>
 800264a:	2300      	movs	r3, #0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d02b      	beq.n	80026a8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002654:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265a:	f003 031f 	and.w	r3, r3, #31
 800265e:	223f      	movs	r2, #63	; 0x3f
 8002660:	409a      	lsls	r2, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	609a      	str	r2, [r3, #8]
 8002666:	e02a      	b.n	80026be <HAL_DMA_Abort+0x49a>
 8002668:	40020010 	.word	0x40020010
 800266c:	40020028 	.word	0x40020028
 8002670:	40020040 	.word	0x40020040
 8002674:	40020058 	.word	0x40020058
 8002678:	40020070 	.word	0x40020070
 800267c:	40020088 	.word	0x40020088
 8002680:	400200a0 	.word	0x400200a0
 8002684:	400200b8 	.word	0x400200b8
 8002688:	40020410 	.word	0x40020410
 800268c:	40020428 	.word	0x40020428
 8002690:	40020440 	.word	0x40020440
 8002694:	40020458 	.word	0x40020458
 8002698:	40020470 	.word	0x40020470
 800269c:	40020488 	.word	0x40020488
 80026a0:	400204a0 	.word	0x400204a0
 80026a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b2:	f003 031f 	and.w	r3, r3, #31
 80026b6:	2201      	movs	r2, #1
 80026b8:	409a      	lsls	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a4f      	ldr	r2, [pc, #316]	; (8002800 <HAL_DMA_Abort+0x5dc>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d072      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a4d      	ldr	r2, [pc, #308]	; (8002804 <HAL_DMA_Abort+0x5e0>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d06d      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a4c      	ldr	r2, [pc, #304]	; (8002808 <HAL_DMA_Abort+0x5e4>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d068      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a4a      	ldr	r2, [pc, #296]	; (800280c <HAL_DMA_Abort+0x5e8>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d063      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a49      	ldr	r2, [pc, #292]	; (8002810 <HAL_DMA_Abort+0x5ec>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d05e      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a47      	ldr	r2, [pc, #284]	; (8002814 <HAL_DMA_Abort+0x5f0>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d059      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a46      	ldr	r2, [pc, #280]	; (8002818 <HAL_DMA_Abort+0x5f4>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d054      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a44      	ldr	r2, [pc, #272]	; (800281c <HAL_DMA_Abort+0x5f8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d04f      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a43      	ldr	r2, [pc, #268]	; (8002820 <HAL_DMA_Abort+0x5fc>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d04a      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a41      	ldr	r2, [pc, #260]	; (8002824 <HAL_DMA_Abort+0x600>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d045      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a40      	ldr	r2, [pc, #256]	; (8002828 <HAL_DMA_Abort+0x604>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d040      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a3e      	ldr	r2, [pc, #248]	; (800282c <HAL_DMA_Abort+0x608>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d03b      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a3d      	ldr	r2, [pc, #244]	; (8002830 <HAL_DMA_Abort+0x60c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d036      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a3b      	ldr	r2, [pc, #236]	; (8002834 <HAL_DMA_Abort+0x610>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d031      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a3a      	ldr	r2, [pc, #232]	; (8002838 <HAL_DMA_Abort+0x614>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d02c      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a38      	ldr	r2, [pc, #224]	; (800283c <HAL_DMA_Abort+0x618>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d027      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a37      	ldr	r2, [pc, #220]	; (8002840 <HAL_DMA_Abort+0x61c>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d022      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a35      	ldr	r2, [pc, #212]	; (8002844 <HAL_DMA_Abort+0x620>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d01d      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a34      	ldr	r2, [pc, #208]	; (8002848 <HAL_DMA_Abort+0x624>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d018      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a32      	ldr	r2, [pc, #200]	; (800284c <HAL_DMA_Abort+0x628>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d013      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a31      	ldr	r2, [pc, #196]	; (8002850 <HAL_DMA_Abort+0x62c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d00e      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a2f      	ldr	r2, [pc, #188]	; (8002854 <HAL_DMA_Abort+0x630>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d009      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a2e      	ldr	r2, [pc, #184]	; (8002858 <HAL_DMA_Abort+0x634>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d004      	beq.n	80027ae <HAL_DMA_Abort+0x58a>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a2c      	ldr	r2, [pc, #176]	; (800285c <HAL_DMA_Abort+0x638>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d101      	bne.n	80027b2 <HAL_DMA_Abort+0x58e>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_DMA_Abort+0x590>
 80027b2:	2300      	movs	r3, #0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d015      	beq.n	80027e4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80027c0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00c      	beq.n	80027e4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027d8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80027e2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40020010 	.word	0x40020010
 8002804:	40020028 	.word	0x40020028
 8002808:	40020040 	.word	0x40020040
 800280c:	40020058 	.word	0x40020058
 8002810:	40020070 	.word	0x40020070
 8002814:	40020088 	.word	0x40020088
 8002818:	400200a0 	.word	0x400200a0
 800281c:	400200b8 	.word	0x400200b8
 8002820:	40020410 	.word	0x40020410
 8002824:	40020428 	.word	0x40020428
 8002828:	40020440 	.word	0x40020440
 800282c:	40020458 	.word	0x40020458
 8002830:	40020470 	.word	0x40020470
 8002834:	40020488 	.word	0x40020488
 8002838:	400204a0 	.word	0x400204a0
 800283c:	400204b8 	.word	0x400204b8
 8002840:	58025408 	.word	0x58025408
 8002844:	5802541c 	.word	0x5802541c
 8002848:	58025430 	.word	0x58025430
 800284c:	58025444 	.word	0x58025444
 8002850:	58025458 	.word	0x58025458
 8002854:	5802546c 	.word	0x5802546c
 8002858:	58025480 	.word	0x58025480
 800285c:	58025494 	.word	0x58025494

08002860 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e237      	b.n	8002ce2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d004      	beq.n	8002888 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2280      	movs	r2, #128	; 0x80
 8002882:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e22c      	b.n	8002ce2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a5c      	ldr	r2, [pc, #368]	; (8002a00 <HAL_DMA_Abort_IT+0x1a0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d04a      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a5b      	ldr	r2, [pc, #364]	; (8002a04 <HAL_DMA_Abort_IT+0x1a4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d045      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a59      	ldr	r2, [pc, #356]	; (8002a08 <HAL_DMA_Abort_IT+0x1a8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d040      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a58      	ldr	r2, [pc, #352]	; (8002a0c <HAL_DMA_Abort_IT+0x1ac>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d03b      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a56      	ldr	r2, [pc, #344]	; (8002a10 <HAL_DMA_Abort_IT+0x1b0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d036      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a55      	ldr	r2, [pc, #340]	; (8002a14 <HAL_DMA_Abort_IT+0x1b4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d031      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a53      	ldr	r2, [pc, #332]	; (8002a18 <HAL_DMA_Abort_IT+0x1b8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d02c      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a52      	ldr	r2, [pc, #328]	; (8002a1c <HAL_DMA_Abort_IT+0x1bc>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d027      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a50      	ldr	r2, [pc, #320]	; (8002a20 <HAL_DMA_Abort_IT+0x1c0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d022      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a4f      	ldr	r2, [pc, #316]	; (8002a24 <HAL_DMA_Abort_IT+0x1c4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d01d      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a4d      	ldr	r2, [pc, #308]	; (8002a28 <HAL_DMA_Abort_IT+0x1c8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d018      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a4c      	ldr	r2, [pc, #304]	; (8002a2c <HAL_DMA_Abort_IT+0x1cc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d013      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a4a      	ldr	r2, [pc, #296]	; (8002a30 <HAL_DMA_Abort_IT+0x1d0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00e      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a49      	ldr	r2, [pc, #292]	; (8002a34 <HAL_DMA_Abort_IT+0x1d4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d009      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a47      	ldr	r2, [pc, #284]	; (8002a38 <HAL_DMA_Abort_IT+0x1d8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d004      	beq.n	8002928 <HAL_DMA_Abort_IT+0xc8>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a46      	ldr	r2, [pc, #280]	; (8002a3c <HAL_DMA_Abort_IT+0x1dc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d101      	bne.n	800292c <HAL_DMA_Abort_IT+0xcc>
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <HAL_DMA_Abort_IT+0xce>
 800292c:	2300      	movs	r3, #0
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 8086 	beq.w	8002a40 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2204      	movs	r2, #4
 8002938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a2f      	ldr	r2, [pc, #188]	; (8002a00 <HAL_DMA_Abort_IT+0x1a0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d04a      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a2e      	ldr	r2, [pc, #184]	; (8002a04 <HAL_DMA_Abort_IT+0x1a4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d045      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a2c      	ldr	r2, [pc, #176]	; (8002a08 <HAL_DMA_Abort_IT+0x1a8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d040      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a2b      	ldr	r2, [pc, #172]	; (8002a0c <HAL_DMA_Abort_IT+0x1ac>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d03b      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a29      	ldr	r2, [pc, #164]	; (8002a10 <HAL_DMA_Abort_IT+0x1b0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d036      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a28      	ldr	r2, [pc, #160]	; (8002a14 <HAL_DMA_Abort_IT+0x1b4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d031      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a26      	ldr	r2, [pc, #152]	; (8002a18 <HAL_DMA_Abort_IT+0x1b8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d02c      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a25      	ldr	r2, [pc, #148]	; (8002a1c <HAL_DMA_Abort_IT+0x1bc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d027      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a23      	ldr	r2, [pc, #140]	; (8002a20 <HAL_DMA_Abort_IT+0x1c0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d022      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a22      	ldr	r2, [pc, #136]	; (8002a24 <HAL_DMA_Abort_IT+0x1c4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d01d      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a20      	ldr	r2, [pc, #128]	; (8002a28 <HAL_DMA_Abort_IT+0x1c8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d018      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a1f      	ldr	r2, [pc, #124]	; (8002a2c <HAL_DMA_Abort_IT+0x1cc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d013      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a1d      	ldr	r2, [pc, #116]	; (8002a30 <HAL_DMA_Abort_IT+0x1d0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00e      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a1c      	ldr	r2, [pc, #112]	; (8002a34 <HAL_DMA_Abort_IT+0x1d4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d009      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a1a      	ldr	r2, [pc, #104]	; (8002a38 <HAL_DMA_Abort_IT+0x1d8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d004      	beq.n	80029dc <HAL_DMA_Abort_IT+0x17c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a19      	ldr	r2, [pc, #100]	; (8002a3c <HAL_DMA_Abort_IT+0x1dc>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d108      	bne.n	80029ee <HAL_DMA_Abort_IT+0x18e>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0201 	bic.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	e178      	b.n	8002ce0 <HAL_DMA_Abort_IT+0x480>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0201 	bic.w	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	e16f      	b.n	8002ce0 <HAL_DMA_Abort_IT+0x480>
 8002a00:	40020010 	.word	0x40020010
 8002a04:	40020028 	.word	0x40020028
 8002a08:	40020040 	.word	0x40020040
 8002a0c:	40020058 	.word	0x40020058
 8002a10:	40020070 	.word	0x40020070
 8002a14:	40020088 	.word	0x40020088
 8002a18:	400200a0 	.word	0x400200a0
 8002a1c:	400200b8 	.word	0x400200b8
 8002a20:	40020410 	.word	0x40020410
 8002a24:	40020428 	.word	0x40020428
 8002a28:	40020440 	.word	0x40020440
 8002a2c:	40020458 	.word	0x40020458
 8002a30:	40020470 	.word	0x40020470
 8002a34:	40020488 	.word	0x40020488
 8002a38:	400204a0 	.word	0x400204a0
 8002a3c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 020e 	bic.w	r2, r2, #14
 8002a4e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a6c      	ldr	r2, [pc, #432]	; (8002c08 <HAL_DMA_Abort_IT+0x3a8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d04a      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a6b      	ldr	r2, [pc, #428]	; (8002c0c <HAL_DMA_Abort_IT+0x3ac>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d045      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a69      	ldr	r2, [pc, #420]	; (8002c10 <HAL_DMA_Abort_IT+0x3b0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d040      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a68      	ldr	r2, [pc, #416]	; (8002c14 <HAL_DMA_Abort_IT+0x3b4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d03b      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a66      	ldr	r2, [pc, #408]	; (8002c18 <HAL_DMA_Abort_IT+0x3b8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d036      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a65      	ldr	r2, [pc, #404]	; (8002c1c <HAL_DMA_Abort_IT+0x3bc>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d031      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a63      	ldr	r2, [pc, #396]	; (8002c20 <HAL_DMA_Abort_IT+0x3c0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d02c      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a62      	ldr	r2, [pc, #392]	; (8002c24 <HAL_DMA_Abort_IT+0x3c4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d027      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a60      	ldr	r2, [pc, #384]	; (8002c28 <HAL_DMA_Abort_IT+0x3c8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d022      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a5f      	ldr	r2, [pc, #380]	; (8002c2c <HAL_DMA_Abort_IT+0x3cc>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d01d      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a5d      	ldr	r2, [pc, #372]	; (8002c30 <HAL_DMA_Abort_IT+0x3d0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d018      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a5c      	ldr	r2, [pc, #368]	; (8002c34 <HAL_DMA_Abort_IT+0x3d4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d013      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a5a      	ldr	r2, [pc, #360]	; (8002c38 <HAL_DMA_Abort_IT+0x3d8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00e      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a59      	ldr	r2, [pc, #356]	; (8002c3c <HAL_DMA_Abort_IT+0x3dc>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d009      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a57      	ldr	r2, [pc, #348]	; (8002c40 <HAL_DMA_Abort_IT+0x3e0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d004      	beq.n	8002af0 <HAL_DMA_Abort_IT+0x290>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a56      	ldr	r2, [pc, #344]	; (8002c44 <HAL_DMA_Abort_IT+0x3e4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d108      	bne.n	8002b02 <HAL_DMA_Abort_IT+0x2a2>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0201 	bic.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	e007      	b.n	8002b12 <HAL_DMA_Abort_IT+0x2b2>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0201 	bic.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a3c      	ldr	r2, [pc, #240]	; (8002c08 <HAL_DMA_Abort_IT+0x3a8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d072      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a3a      	ldr	r2, [pc, #232]	; (8002c0c <HAL_DMA_Abort_IT+0x3ac>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d06d      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a39      	ldr	r2, [pc, #228]	; (8002c10 <HAL_DMA_Abort_IT+0x3b0>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d068      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a37      	ldr	r2, [pc, #220]	; (8002c14 <HAL_DMA_Abort_IT+0x3b4>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d063      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a36      	ldr	r2, [pc, #216]	; (8002c18 <HAL_DMA_Abort_IT+0x3b8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d05e      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a34      	ldr	r2, [pc, #208]	; (8002c1c <HAL_DMA_Abort_IT+0x3bc>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d059      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a33      	ldr	r2, [pc, #204]	; (8002c20 <HAL_DMA_Abort_IT+0x3c0>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d054      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a31      	ldr	r2, [pc, #196]	; (8002c24 <HAL_DMA_Abort_IT+0x3c4>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d04f      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a30      	ldr	r2, [pc, #192]	; (8002c28 <HAL_DMA_Abort_IT+0x3c8>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d04a      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a2e      	ldr	r2, [pc, #184]	; (8002c2c <HAL_DMA_Abort_IT+0x3cc>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d045      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a2d      	ldr	r2, [pc, #180]	; (8002c30 <HAL_DMA_Abort_IT+0x3d0>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d040      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a2b      	ldr	r2, [pc, #172]	; (8002c34 <HAL_DMA_Abort_IT+0x3d4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d03b      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a2a      	ldr	r2, [pc, #168]	; (8002c38 <HAL_DMA_Abort_IT+0x3d8>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d036      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a28      	ldr	r2, [pc, #160]	; (8002c3c <HAL_DMA_Abort_IT+0x3dc>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d031      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a27      	ldr	r2, [pc, #156]	; (8002c40 <HAL_DMA_Abort_IT+0x3e0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d02c      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a25      	ldr	r2, [pc, #148]	; (8002c44 <HAL_DMA_Abort_IT+0x3e4>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d027      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a24      	ldr	r2, [pc, #144]	; (8002c48 <HAL_DMA_Abort_IT+0x3e8>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d022      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a22      	ldr	r2, [pc, #136]	; (8002c4c <HAL_DMA_Abort_IT+0x3ec>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d01d      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a21      	ldr	r2, [pc, #132]	; (8002c50 <HAL_DMA_Abort_IT+0x3f0>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d018      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a1f      	ldr	r2, [pc, #124]	; (8002c54 <HAL_DMA_Abort_IT+0x3f4>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d013      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a1e      	ldr	r2, [pc, #120]	; (8002c58 <HAL_DMA_Abort_IT+0x3f8>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d00e      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a1c      	ldr	r2, [pc, #112]	; (8002c5c <HAL_DMA_Abort_IT+0x3fc>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d009      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a1b      	ldr	r2, [pc, #108]	; (8002c60 <HAL_DMA_Abort_IT+0x400>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d004      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x3a2>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a19      	ldr	r2, [pc, #100]	; (8002c64 <HAL_DMA_Abort_IT+0x404>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d132      	bne.n	8002c68 <HAL_DMA_Abort_IT+0x408>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e031      	b.n	8002c6a <HAL_DMA_Abort_IT+0x40a>
 8002c06:	bf00      	nop
 8002c08:	40020010 	.word	0x40020010
 8002c0c:	40020028 	.word	0x40020028
 8002c10:	40020040 	.word	0x40020040
 8002c14:	40020058 	.word	0x40020058
 8002c18:	40020070 	.word	0x40020070
 8002c1c:	40020088 	.word	0x40020088
 8002c20:	400200a0 	.word	0x400200a0
 8002c24:	400200b8 	.word	0x400200b8
 8002c28:	40020410 	.word	0x40020410
 8002c2c:	40020428 	.word	0x40020428
 8002c30:	40020440 	.word	0x40020440
 8002c34:	40020458 	.word	0x40020458
 8002c38:	40020470 	.word	0x40020470
 8002c3c:	40020488 	.word	0x40020488
 8002c40:	400204a0 	.word	0x400204a0
 8002c44:	400204b8 	.word	0x400204b8
 8002c48:	58025408 	.word	0x58025408
 8002c4c:	5802541c 	.word	0x5802541c
 8002c50:	58025430 	.word	0x58025430
 8002c54:	58025444 	.word	0x58025444
 8002c58:	58025458 	.word	0x58025458
 8002c5c:	5802546c 	.word	0x5802546c
 8002c60:	58025480 	.word	0x58025480
 8002c64:	58025494 	.word	0x58025494
 8002c68:	2300      	movs	r3, #0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d028      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c7c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c82:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002c9c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00c      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cb4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002cbe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop

08002cec <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode).
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	; 0x28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	76fb      	strb	r3, [r7, #27]
  uint32_t cpltlevel_mask;
  uint32_t tickstart = HAL_GetTick();
 8002cfe:	f7fe fc73 	bl	80015e8 <HAL_GetTick>
 8002d02:	6178      	str	r0, [r7, #20]
  __IO uint32_t *isr_reg;
  /* IT clear flag register */
  __IO uint32_t *ifcr_reg;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_DMA_PollForTransfer+0x22>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e374      	b.n	80033f8 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d008      	beq.n	8002d2c <HAL_DMA_PollForTransfer+0x40>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2280      	movs	r2, #128	; 0x80
 8002d1e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e365      	b.n	80033f8 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a7b      	ldr	r2, [pc, #492]	; (8002f20 <HAL_DMA_PollForTransfer+0x234>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d04a      	beq.n	8002dcc <HAL_DMA_PollForTransfer+0xe0>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a7a      	ldr	r2, [pc, #488]	; (8002f24 <HAL_DMA_PollForTransfer+0x238>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d045      	beq.n	8002dcc <HAL_DMA_PollForTransfer+0xe0>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a78      	ldr	r2, [pc, #480]	; (8002f28 <HAL_DMA_PollForTransfer+0x23c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d040      	beq.n	8002dcc <HAL_DMA_PollForTransfer+0xe0>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a77      	ldr	r2, [pc, #476]	; (8002f2c <HAL_DMA_PollForTransfer+0x240>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d03b      	beq.n	8002dcc <HAL_DMA_PollForTransfer+0xe0>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a75      	ldr	r2, [pc, #468]	; (8002f30 <HAL_DMA_PollForTransfer+0x244>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d036      	beq.n	8002dcc <HAL_DMA_PollForTransfer+0xe0>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a74      	ldr	r2, [pc, #464]	; (8002f34 <HAL_DMA_PollForTransfer+0x248>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d031      	beq.n	8002dcc <HAL_DMA_PollForTransfer+0xe0>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a72      	ldr	r2, [pc, #456]	; (8002f38 <HAL_DMA_PollForTransfer+0x24c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d02c      	beq.n	8002dcc <HAL_DMA_PollForTransfer+0xe0>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a71      	ldr	r2, [pc, #452]	; (8002f3c <HAL_DMA_PollForTransfer+0x250>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d027      	beq.n	8002dcc <HAL_DMA_PollForTransfer+0xe0>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a6f      	ldr	r2, [pc, #444]	; (8002f40 <HAL_DMA_PollForTransfer+0x254>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d022      	beq.n	8002dcc <HAL_DMA_PollForTransfer+0xe0>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a6e      	ldr	r2, [pc, #440]	; (8002f44 <HAL_DMA_PollForTransfer+0x258>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d01d      	beq.n	8002dcc <HAL_DMA_PollForTransfer+0xe0>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a6c      	ldr	r2, [pc, #432]	; (8002f48 <HAL_DMA_PollForTransfer+0x25c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d018      	beq.n	8002dcc <HAL_DMA_PollForTransfer+0xe0>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a6b      	ldr	r2, [pc, #428]	; (8002f4c <HAL_DMA_PollForTransfer+0x260>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d013      	beq.n	8002dcc <HAL_DMA_PollForTransfer+0xe0>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a69      	ldr	r2, [pc, #420]	; (8002f50 <HAL_DMA_PollForTransfer+0x264>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00e      	beq.n	8002dcc <HAL_DMA_PollForTransfer+0xe0>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a68      	ldr	r2, [pc, #416]	; (8002f54 <HAL_DMA_PollForTransfer+0x268>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d009      	beq.n	8002dcc <HAL_DMA_PollForTransfer+0xe0>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a66      	ldr	r2, [pc, #408]	; (8002f58 <HAL_DMA_PollForTransfer+0x26c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d004      	beq.n	8002dcc <HAL_DMA_PollForTransfer+0xe0>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a65      	ldr	r2, [pc, #404]	; (8002f5c <HAL_DMA_PollForTransfer+0x270>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d101      	bne.n	8002dd0 <HAL_DMA_PollForTransfer+0xe4>
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e000      	b.n	8002dd2 <HAL_DMA_PollForTransfer+0xe6>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d028      	beq.n	8002e28 <HAL_DMA_PollForTransfer+0x13c>
  {
    /* Polling mode not supported in circular mode and double buffering mode */
    if ((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) != 0U)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_DMA_PollForTransfer+0x104>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e303      	b.n	80033f8 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8002df0:	7afb      	ldrb	r3, [r7, #11]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d108      	bne.n	8002e08 <HAL_DMA_PollForTransfer+0x11c>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfa:	f003 031f 	and.w	r3, r3, #31
 8002dfe:	2220      	movs	r2, #32
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
 8002e06:	e007      	b.n	8002e18 <HAL_DMA_PollForTransfer+0x12c>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	2210      	movs	r2, #16
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24
    }

    isr_reg  = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1c:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e22:	3308      	adds	r3, #8
 8002e24:	61fb      	str	r3, [r7, #28]
 8002e26:	e1d5      	b.n	80031d4 <HAL_DMA_PollForTransfer+0x4e8>
  }
  else /* BDMA channel */
  {
    /* Polling mode not supported in circular mode */
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_DMA_PollForTransfer+0x156>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e2da      	b.n	80033f8 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8002e42:	7afb      	ldrb	r3, [r7, #11]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d108      	bne.n	8002e5a <HAL_DMA_PollForTransfer+0x16e>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4c:	f003 031f 	and.w	r3, r3, #31
 8002e50:	2202      	movs	r2, #2
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
 8002e58:	e007      	b.n	8002e6a <HAL_DMA_PollForTransfer+0x17e>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5e:	f003 031f 	and.w	r3, r3, #31
 8002e62:	2204      	movs	r2, #4
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
    }

    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6e:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e74:	3304      	adds	r3, #4
 8002e76:	61fb      	str	r3, [r7, #28]
  }

  while(((*isr_reg) & cpltlevel_mask) == 0U)
 8002e78:	e1ac      	b.n	80031d4 <HAL_DMA_PollForTransfer+0x4e8>
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a28      	ldr	r2, [pc, #160]	; (8002f20 <HAL_DMA_PollForTransfer+0x234>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d04a      	beq.n	8002f1a <HAL_DMA_PollForTransfer+0x22e>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a26      	ldr	r2, [pc, #152]	; (8002f24 <HAL_DMA_PollForTransfer+0x238>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d045      	beq.n	8002f1a <HAL_DMA_PollForTransfer+0x22e>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a25      	ldr	r2, [pc, #148]	; (8002f28 <HAL_DMA_PollForTransfer+0x23c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d040      	beq.n	8002f1a <HAL_DMA_PollForTransfer+0x22e>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a23      	ldr	r2, [pc, #140]	; (8002f2c <HAL_DMA_PollForTransfer+0x240>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d03b      	beq.n	8002f1a <HAL_DMA_PollForTransfer+0x22e>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a22      	ldr	r2, [pc, #136]	; (8002f30 <HAL_DMA_PollForTransfer+0x244>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d036      	beq.n	8002f1a <HAL_DMA_PollForTransfer+0x22e>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a20      	ldr	r2, [pc, #128]	; (8002f34 <HAL_DMA_PollForTransfer+0x248>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d031      	beq.n	8002f1a <HAL_DMA_PollForTransfer+0x22e>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a1f      	ldr	r2, [pc, #124]	; (8002f38 <HAL_DMA_PollForTransfer+0x24c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d02c      	beq.n	8002f1a <HAL_DMA_PollForTransfer+0x22e>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a1d      	ldr	r2, [pc, #116]	; (8002f3c <HAL_DMA_PollForTransfer+0x250>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d027      	beq.n	8002f1a <HAL_DMA_PollForTransfer+0x22e>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a1c      	ldr	r2, [pc, #112]	; (8002f40 <HAL_DMA_PollForTransfer+0x254>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d022      	beq.n	8002f1a <HAL_DMA_PollForTransfer+0x22e>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a1a      	ldr	r2, [pc, #104]	; (8002f44 <HAL_DMA_PollForTransfer+0x258>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d01d      	beq.n	8002f1a <HAL_DMA_PollForTransfer+0x22e>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a19      	ldr	r2, [pc, #100]	; (8002f48 <HAL_DMA_PollForTransfer+0x25c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d018      	beq.n	8002f1a <HAL_DMA_PollForTransfer+0x22e>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a17      	ldr	r2, [pc, #92]	; (8002f4c <HAL_DMA_PollForTransfer+0x260>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d013      	beq.n	8002f1a <HAL_DMA_PollForTransfer+0x22e>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a16      	ldr	r2, [pc, #88]	; (8002f50 <HAL_DMA_PollForTransfer+0x264>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d00e      	beq.n	8002f1a <HAL_DMA_PollForTransfer+0x22e>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <HAL_DMA_PollForTransfer+0x268>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d009      	beq.n	8002f1a <HAL_DMA_PollForTransfer+0x22e>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a13      	ldr	r2, [pc, #76]	; (8002f58 <HAL_DMA_PollForTransfer+0x26c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d004      	beq.n	8002f1a <HAL_DMA_PollForTransfer+0x22e>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a11      	ldr	r2, [pc, #68]	; (8002f5c <HAL_DMA_PollForTransfer+0x270>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d122      	bne.n	8002f60 <HAL_DMA_PollForTransfer+0x274>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e021      	b.n	8002f62 <HAL_DMA_PollForTransfer+0x276>
 8002f1e:	bf00      	nop
 8002f20:	40020010 	.word	0x40020010
 8002f24:	40020028 	.word	0x40020028
 8002f28:	40020040 	.word	0x40020040
 8002f2c:	40020058 	.word	0x40020058
 8002f30:	40020070 	.word	0x40020070
 8002f34:	40020088 	.word	0x40020088
 8002f38:	400200a0 	.word	0x400200a0
 8002f3c:	400200b8 	.word	0x400200b8
 8002f40:	40020410 	.word	0x40020410
 8002f44:	40020428 	.word	0x40020428
 8002f48:	40020440 	.word	0x40020440
 8002f4c:	40020458 	.word	0x40020458
 8002f50:	40020470 	.word	0x40020470
 8002f54:	40020488 	.word	0x40020488
 8002f58:	400204a0 	.word	0x400204a0
 8002f5c:	400204b8 	.word	0x400204b8
 8002f60:	2300      	movs	r3, #0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d057      	beq.n	8003016 <HAL_DMA_PollForTransfer+0x32a>
    {
      if(((*isr_reg) & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6e:	f003 031f 	and.w	r3, r3, #31
 8002f72:	fa22 f303 	lsr.w	r3, r2, r3
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00d      	beq.n	8002f9a <HAL_DMA_PollForTransfer+0x2ae>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f82:	f043 0202 	orr.w	r2, r3, #2
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the FIFO error flag */
        (*ifcr_reg) = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8e:	f003 031f 	and.w	r3, r3, #31
 8002f92:	2201      	movs	r2, #1
 8002f94:	409a      	lsls	r2, r3
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa2:	f003 031f 	and.w	r3, r3, #31
 8002fa6:	2104      	movs	r1, #4
 8002fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00d      	beq.n	8002fce <HAL_DMA_PollForTransfer+0x2e2>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb6:	f043 0204 	orr.w	r2, r3, #4
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the Direct Mode error flag */
        (*ifcr_reg) = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc2:	f003 031f 	and.w	r3, r3, #31
 8002fc6:	2204      	movs	r2, #4
 8002fc8:	409a      	lsls	r2, r3
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd6:	f003 031f 	and.w	r3, r3, #31
 8002fda:	2108      	movs	r1, #8
 8002fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d038      	beq.n	8003058 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fea:	f043 0201 	orr.w	r2, r3, #1
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the transfer error flag */
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff6:	f003 031f 	and.w	r3, r3, #31
 8002ffa:	2208      	movs	r2, #8
 8002ffc:	409a      	lsls	r2, r3
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e1f0      	b.n	80033f8 <HAL_DMA_PollForTransfer+0x70c>
      }
    }
    else /* BDMA channel */
    {
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301e:	f003 031f 	and.w	r3, r3, #31
 8003022:	2108      	movs	r1, #8
 8003024:	fa01 f303 	lsl.w	r3, r1, r3
 8003028:	4013      	ands	r3, r2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d014      	beq.n	8003058 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* When a DMA transfer error occurs */
        /* A hardware clear of its EN bits is performed */
        /* Clear all flags */
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003032:	f003 031f 	and.w	r3, r3, #31
 8003036:	2201      	movs	r2, #1
 8003038:	409a      	lsls	r2, r3
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	601a      	str	r2, [r3, #0]

        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2201      	movs	r2, #1
 8003042:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e1cf      	b.n	80033f8 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800305e:	d012      	beq.n	8003086 <HAL_DMA_PollForTransfer+0x39a>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003060:	f7fe fac2 	bl	80015e8 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	429a      	cmp	r2, r3
 800306e:	d302      	bcc.n	8003076 <HAL_DMA_PollForTransfer+0x38a>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d107      	bne.n	8003086 <HAL_DMA_PollForTransfer+0x39a>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2220      	movs	r2, #32
 800307a:	655a      	str	r2, [r3, #84]	; 0x54

        /* if timeout then abort the current transfer */
        /* No need to check return value: as in this case we will return HAL_ERROR with HAL_DMA_ERROR_TIMEOUT error code  */
        (void) HAL_DMA_Abort(hdma);
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f7ff f8d1 	bl	8002224 <HAL_DMA_Abort>
              - Clear the transfer error flags
              - Unlock
              - Set the State
          */

        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e1b8      	b.n	80033f8 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a81      	ldr	r2, [pc, #516]	; (8003290 <HAL_DMA_PollForTransfer+0x5a4>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d072      	beq.n	8003176 <HAL_DMA_PollForTransfer+0x48a>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a7f      	ldr	r2, [pc, #508]	; (8003294 <HAL_DMA_PollForTransfer+0x5a8>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d06d      	beq.n	8003176 <HAL_DMA_PollForTransfer+0x48a>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a7e      	ldr	r2, [pc, #504]	; (8003298 <HAL_DMA_PollForTransfer+0x5ac>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d068      	beq.n	8003176 <HAL_DMA_PollForTransfer+0x48a>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a7c      	ldr	r2, [pc, #496]	; (800329c <HAL_DMA_PollForTransfer+0x5b0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d063      	beq.n	8003176 <HAL_DMA_PollForTransfer+0x48a>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a7b      	ldr	r2, [pc, #492]	; (80032a0 <HAL_DMA_PollForTransfer+0x5b4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d05e      	beq.n	8003176 <HAL_DMA_PollForTransfer+0x48a>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a79      	ldr	r2, [pc, #484]	; (80032a4 <HAL_DMA_PollForTransfer+0x5b8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d059      	beq.n	8003176 <HAL_DMA_PollForTransfer+0x48a>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a78      	ldr	r2, [pc, #480]	; (80032a8 <HAL_DMA_PollForTransfer+0x5bc>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d054      	beq.n	8003176 <HAL_DMA_PollForTransfer+0x48a>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a76      	ldr	r2, [pc, #472]	; (80032ac <HAL_DMA_PollForTransfer+0x5c0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d04f      	beq.n	8003176 <HAL_DMA_PollForTransfer+0x48a>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a75      	ldr	r2, [pc, #468]	; (80032b0 <HAL_DMA_PollForTransfer+0x5c4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d04a      	beq.n	8003176 <HAL_DMA_PollForTransfer+0x48a>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a73      	ldr	r2, [pc, #460]	; (80032b4 <HAL_DMA_PollForTransfer+0x5c8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d045      	beq.n	8003176 <HAL_DMA_PollForTransfer+0x48a>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a72      	ldr	r2, [pc, #456]	; (80032b8 <HAL_DMA_PollForTransfer+0x5cc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d040      	beq.n	8003176 <HAL_DMA_PollForTransfer+0x48a>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a70      	ldr	r2, [pc, #448]	; (80032bc <HAL_DMA_PollForTransfer+0x5d0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d03b      	beq.n	8003176 <HAL_DMA_PollForTransfer+0x48a>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a6f      	ldr	r2, [pc, #444]	; (80032c0 <HAL_DMA_PollForTransfer+0x5d4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d036      	beq.n	8003176 <HAL_DMA_PollForTransfer+0x48a>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a6d      	ldr	r2, [pc, #436]	; (80032c4 <HAL_DMA_PollForTransfer+0x5d8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d031      	beq.n	8003176 <HAL_DMA_PollForTransfer+0x48a>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a6c      	ldr	r2, [pc, #432]	; (80032c8 <HAL_DMA_PollForTransfer+0x5dc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d02c      	beq.n	8003176 <HAL_DMA_PollForTransfer+0x48a>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a6a      	ldr	r2, [pc, #424]	; (80032cc <HAL_DMA_PollForTransfer+0x5e0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d027      	beq.n	8003176 <HAL_DMA_PollForTransfer+0x48a>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a69      	ldr	r2, [pc, #420]	; (80032d0 <HAL_DMA_PollForTransfer+0x5e4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d022      	beq.n	8003176 <HAL_DMA_PollForTransfer+0x48a>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a67      	ldr	r2, [pc, #412]	; (80032d4 <HAL_DMA_PollForTransfer+0x5e8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d01d      	beq.n	8003176 <HAL_DMA_PollForTransfer+0x48a>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a66      	ldr	r2, [pc, #408]	; (80032d8 <HAL_DMA_PollForTransfer+0x5ec>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d018      	beq.n	8003176 <HAL_DMA_PollForTransfer+0x48a>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a64      	ldr	r2, [pc, #400]	; (80032dc <HAL_DMA_PollForTransfer+0x5f0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d013      	beq.n	8003176 <HAL_DMA_PollForTransfer+0x48a>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a63      	ldr	r2, [pc, #396]	; (80032e0 <HAL_DMA_PollForTransfer+0x5f4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d00e      	beq.n	8003176 <HAL_DMA_PollForTransfer+0x48a>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a61      	ldr	r2, [pc, #388]	; (80032e4 <HAL_DMA_PollForTransfer+0x5f8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d009      	beq.n	8003176 <HAL_DMA_PollForTransfer+0x48a>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a60      	ldr	r2, [pc, #384]	; (80032e8 <HAL_DMA_PollForTransfer+0x5fc>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d004      	beq.n	8003176 <HAL_DMA_PollForTransfer+0x48a>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a5e      	ldr	r2, [pc, #376]	; (80032ec <HAL_DMA_PollForTransfer+0x600>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d101      	bne.n	800317a <HAL_DMA_PollForTransfer+0x48e>
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <HAL_DMA_PollForTransfer+0x490>
 800317a:	2300      	movs	r3, #0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d029      	beq.n	80031d4 <HAL_DMA_PollForTransfer+0x4e8>
    {
      /* Check for DMAMUX Request generator (if used) overrun status */
      if(hdma->DMAmuxRequestGen != 0U)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003184:	2b00      	cmp	r3, #0
 8003186:	d012      	beq.n	80031ae <HAL_DMA_PollForTransfer+0x4c2>
      {
        /* if using DMAMUX request generator Check for DMAMUX request generator overrun */
        if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003192:	4013      	ands	r3, r2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00a      	beq.n	80031ae <HAL_DMA_PollForTransfer+0x4c2>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80031a0:	605a      	str	r2, [r3, #4]

          /* Update error code */
          hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }

      /* Check for DMAMUX Synchronization overrun */
      if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <HAL_DMA_PollForTransfer+0x4e8>
      {
        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80031c6:	605a      	str	r2, [r3, #4]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54
  while(((*isr_reg) & cpltlevel_mask) == 0U)
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	4013      	ands	r3, r2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f43f ae4c 	beq.w	8002e7a <HAL_DMA_PollForTransfer+0x18e>
    }
  }


  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80031e2:	7afb      	ldrb	r3, [r7, #11]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f040 80a0 	bne.w	800332a <HAL_DMA_PollForTransfer+0x63e>
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a28      	ldr	r2, [pc, #160]	; (8003290 <HAL_DMA_PollForTransfer+0x5a4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d04a      	beq.n	800328a <HAL_DMA_PollForTransfer+0x59e>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a26      	ldr	r2, [pc, #152]	; (8003294 <HAL_DMA_PollForTransfer+0x5a8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d045      	beq.n	800328a <HAL_DMA_PollForTransfer+0x59e>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a25      	ldr	r2, [pc, #148]	; (8003298 <HAL_DMA_PollForTransfer+0x5ac>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d040      	beq.n	800328a <HAL_DMA_PollForTransfer+0x59e>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a23      	ldr	r2, [pc, #140]	; (800329c <HAL_DMA_PollForTransfer+0x5b0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d03b      	beq.n	800328a <HAL_DMA_PollForTransfer+0x59e>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a22      	ldr	r2, [pc, #136]	; (80032a0 <HAL_DMA_PollForTransfer+0x5b4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d036      	beq.n	800328a <HAL_DMA_PollForTransfer+0x59e>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a20      	ldr	r2, [pc, #128]	; (80032a4 <HAL_DMA_PollForTransfer+0x5b8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d031      	beq.n	800328a <HAL_DMA_PollForTransfer+0x59e>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a1f      	ldr	r2, [pc, #124]	; (80032a8 <HAL_DMA_PollForTransfer+0x5bc>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d02c      	beq.n	800328a <HAL_DMA_PollForTransfer+0x59e>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a1d      	ldr	r2, [pc, #116]	; (80032ac <HAL_DMA_PollForTransfer+0x5c0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d027      	beq.n	800328a <HAL_DMA_PollForTransfer+0x59e>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a1c      	ldr	r2, [pc, #112]	; (80032b0 <HAL_DMA_PollForTransfer+0x5c4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d022      	beq.n	800328a <HAL_DMA_PollForTransfer+0x59e>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a1a      	ldr	r2, [pc, #104]	; (80032b4 <HAL_DMA_PollForTransfer+0x5c8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d01d      	beq.n	800328a <HAL_DMA_PollForTransfer+0x59e>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a19      	ldr	r2, [pc, #100]	; (80032b8 <HAL_DMA_PollForTransfer+0x5cc>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d018      	beq.n	800328a <HAL_DMA_PollForTransfer+0x59e>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a17      	ldr	r2, [pc, #92]	; (80032bc <HAL_DMA_PollForTransfer+0x5d0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d013      	beq.n	800328a <HAL_DMA_PollForTransfer+0x59e>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a16      	ldr	r2, [pc, #88]	; (80032c0 <HAL_DMA_PollForTransfer+0x5d4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d00e      	beq.n	800328a <HAL_DMA_PollForTransfer+0x59e>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a14      	ldr	r2, [pc, #80]	; (80032c4 <HAL_DMA_PollForTransfer+0x5d8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d009      	beq.n	800328a <HAL_DMA_PollForTransfer+0x59e>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a13      	ldr	r2, [pc, #76]	; (80032c8 <HAL_DMA_PollForTransfer+0x5dc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d004      	beq.n	800328a <HAL_DMA_PollForTransfer+0x59e>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a11      	ldr	r2, [pc, #68]	; (80032cc <HAL_DMA_PollForTransfer+0x5e0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d132      	bne.n	80032f0 <HAL_DMA_PollForTransfer+0x604>
 800328a:	2301      	movs	r3, #1
 800328c:	e031      	b.n	80032f2 <HAL_DMA_PollForTransfer+0x606>
 800328e:	bf00      	nop
 8003290:	40020010 	.word	0x40020010
 8003294:	40020028 	.word	0x40020028
 8003298:	40020040 	.word	0x40020040
 800329c:	40020058 	.word	0x40020058
 80032a0:	40020070 	.word	0x40020070
 80032a4:	40020088 	.word	0x40020088
 80032a8:	400200a0 	.word	0x400200a0
 80032ac:	400200b8 	.word	0x400200b8
 80032b0:	40020410 	.word	0x40020410
 80032b4:	40020428 	.word	0x40020428
 80032b8:	40020440 	.word	0x40020440
 80032bc:	40020458 	.word	0x40020458
 80032c0:	40020470 	.word	0x40020470
 80032c4:	40020488 	.word	0x40020488
 80032c8:	400204a0 	.word	0x400204a0
 80032cc:	400204b8 	.word	0x400204b8
 80032d0:	58025408 	.word	0x58025408
 80032d4:	5802541c 	.word	0x5802541c
 80032d8:	58025430 	.word	0x58025430
 80032dc:	58025444 	.word	0x58025444
 80032e0:	58025458 	.word	0x58025458
 80032e4:	5802546c 	.word	0x5802546c
 80032e8:	58025480 	.word	0x58025480
 80032ec:	58025494 	.word	0x58025494
 80032f0:	2300      	movs	r3, #0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <HAL_DMA_PollForTransfer+0x61c>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	2230      	movs	r2, #48	; 0x30
 8003300:	409a      	lsls	r2, r3
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	e007      	b.n	8003318 <HAL_DMA_PollForTransfer+0x62c>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	2202      	movs	r2, #2
 8003312:	409a      	lsls	r2, r3
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	601a      	str	r2, [r3, #0]
    }

    hdma->State = HAL_DMA_STATE_READY;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003328:	e065      	b.n	80033f6 <HAL_DMA_PollForTransfer+0x70a>
  }
  else /*CompleteLevel = HAL_DMA_HALF_TRANSFER*/
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a34      	ldr	r2, [pc, #208]	; (8003400 <HAL_DMA_PollForTransfer+0x714>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d04a      	beq.n	80033ca <HAL_DMA_PollForTransfer+0x6de>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a32      	ldr	r2, [pc, #200]	; (8003404 <HAL_DMA_PollForTransfer+0x718>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d045      	beq.n	80033ca <HAL_DMA_PollForTransfer+0x6de>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a31      	ldr	r2, [pc, #196]	; (8003408 <HAL_DMA_PollForTransfer+0x71c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d040      	beq.n	80033ca <HAL_DMA_PollForTransfer+0x6de>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a2f      	ldr	r2, [pc, #188]	; (800340c <HAL_DMA_PollForTransfer+0x720>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d03b      	beq.n	80033ca <HAL_DMA_PollForTransfer+0x6de>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a2e      	ldr	r2, [pc, #184]	; (8003410 <HAL_DMA_PollForTransfer+0x724>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d036      	beq.n	80033ca <HAL_DMA_PollForTransfer+0x6de>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a2c      	ldr	r2, [pc, #176]	; (8003414 <HAL_DMA_PollForTransfer+0x728>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d031      	beq.n	80033ca <HAL_DMA_PollForTransfer+0x6de>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a2b      	ldr	r2, [pc, #172]	; (8003418 <HAL_DMA_PollForTransfer+0x72c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d02c      	beq.n	80033ca <HAL_DMA_PollForTransfer+0x6de>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a29      	ldr	r2, [pc, #164]	; (800341c <HAL_DMA_PollForTransfer+0x730>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d027      	beq.n	80033ca <HAL_DMA_PollForTransfer+0x6de>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a28      	ldr	r2, [pc, #160]	; (8003420 <HAL_DMA_PollForTransfer+0x734>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d022      	beq.n	80033ca <HAL_DMA_PollForTransfer+0x6de>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a26      	ldr	r2, [pc, #152]	; (8003424 <HAL_DMA_PollForTransfer+0x738>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d01d      	beq.n	80033ca <HAL_DMA_PollForTransfer+0x6de>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a25      	ldr	r2, [pc, #148]	; (8003428 <HAL_DMA_PollForTransfer+0x73c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d018      	beq.n	80033ca <HAL_DMA_PollForTransfer+0x6de>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a23      	ldr	r2, [pc, #140]	; (800342c <HAL_DMA_PollForTransfer+0x740>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d013      	beq.n	80033ca <HAL_DMA_PollForTransfer+0x6de>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a22      	ldr	r2, [pc, #136]	; (8003430 <HAL_DMA_PollForTransfer+0x744>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00e      	beq.n	80033ca <HAL_DMA_PollForTransfer+0x6de>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a20      	ldr	r2, [pc, #128]	; (8003434 <HAL_DMA_PollForTransfer+0x748>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d009      	beq.n	80033ca <HAL_DMA_PollForTransfer+0x6de>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a1f      	ldr	r2, [pc, #124]	; (8003438 <HAL_DMA_PollForTransfer+0x74c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d004      	beq.n	80033ca <HAL_DMA_PollForTransfer+0x6de>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a1d      	ldr	r2, [pc, #116]	; (800343c <HAL_DMA_PollForTransfer+0x750>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d101      	bne.n	80033ce <HAL_DMA_PollForTransfer+0x6e2>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <HAL_DMA_PollForTransfer+0x6e4>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_DMA_PollForTransfer+0x6fa>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	2210      	movs	r2, #16
 80033de:	409a      	lsls	r2, r3
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	e007      	b.n	80033f6 <HAL_DMA_PollForTransfer+0x70a>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ea:	f003 031f 	and.w	r3, r3, #31
 80033ee:	2204      	movs	r2, #4
 80033f0:	409a      	lsls	r2, r3
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 80033f6:	7efb      	ldrb	r3, [r7, #27]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3728      	adds	r7, #40	; 0x28
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40020010 	.word	0x40020010
 8003404:	40020028 	.word	0x40020028
 8003408:	40020040 	.word	0x40020040
 800340c:	40020058 	.word	0x40020058
 8003410:	40020070 	.word	0x40020070
 8003414:	40020088 	.word	0x40020088
 8003418:	400200a0 	.word	0x400200a0
 800341c:	400200b8 	.word	0x400200b8
 8003420:	40020410 	.word	0x40020410
 8003424:	40020428 	.word	0x40020428
 8003428:	40020440 	.word	0x40020440
 800342c:	40020458 	.word	0x40020458
 8003430:	40020470 	.word	0x40020470
 8003434:	40020488 	.word	0x40020488
 8003438:	400204a0 	.word	0x400204a0
 800343c:	400204b8 	.word	0x400204b8

08003440 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08a      	sub	sp, #40	; 0x28
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800344c:	4b67      	ldr	r3, [pc, #412]	; (80035ec <HAL_DMA_IRQHandler+0x1ac>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a67      	ldr	r2, [pc, #412]	; (80035f0 <HAL_DMA_IRQHandler+0x1b0>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	0a9b      	lsrs	r3, r3, #10
 8003458:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003464:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a5f      	ldr	r2, [pc, #380]	; (80035f4 <HAL_DMA_IRQHandler+0x1b4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d04a      	beq.n	8003512 <HAL_DMA_IRQHandler+0xd2>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a5d      	ldr	r2, [pc, #372]	; (80035f8 <HAL_DMA_IRQHandler+0x1b8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d045      	beq.n	8003512 <HAL_DMA_IRQHandler+0xd2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a5c      	ldr	r2, [pc, #368]	; (80035fc <HAL_DMA_IRQHandler+0x1bc>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d040      	beq.n	8003512 <HAL_DMA_IRQHandler+0xd2>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a5a      	ldr	r2, [pc, #360]	; (8003600 <HAL_DMA_IRQHandler+0x1c0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d03b      	beq.n	8003512 <HAL_DMA_IRQHandler+0xd2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a59      	ldr	r2, [pc, #356]	; (8003604 <HAL_DMA_IRQHandler+0x1c4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d036      	beq.n	8003512 <HAL_DMA_IRQHandler+0xd2>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a57      	ldr	r2, [pc, #348]	; (8003608 <HAL_DMA_IRQHandler+0x1c8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d031      	beq.n	8003512 <HAL_DMA_IRQHandler+0xd2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a56      	ldr	r2, [pc, #344]	; (800360c <HAL_DMA_IRQHandler+0x1cc>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d02c      	beq.n	8003512 <HAL_DMA_IRQHandler+0xd2>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a54      	ldr	r2, [pc, #336]	; (8003610 <HAL_DMA_IRQHandler+0x1d0>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d027      	beq.n	8003512 <HAL_DMA_IRQHandler+0xd2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a53      	ldr	r2, [pc, #332]	; (8003614 <HAL_DMA_IRQHandler+0x1d4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d022      	beq.n	8003512 <HAL_DMA_IRQHandler+0xd2>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a51      	ldr	r2, [pc, #324]	; (8003618 <HAL_DMA_IRQHandler+0x1d8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d01d      	beq.n	8003512 <HAL_DMA_IRQHandler+0xd2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a50      	ldr	r2, [pc, #320]	; (800361c <HAL_DMA_IRQHandler+0x1dc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d018      	beq.n	8003512 <HAL_DMA_IRQHandler+0xd2>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a4e      	ldr	r2, [pc, #312]	; (8003620 <HAL_DMA_IRQHandler+0x1e0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d013      	beq.n	8003512 <HAL_DMA_IRQHandler+0xd2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a4d      	ldr	r2, [pc, #308]	; (8003624 <HAL_DMA_IRQHandler+0x1e4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d00e      	beq.n	8003512 <HAL_DMA_IRQHandler+0xd2>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a4b      	ldr	r2, [pc, #300]	; (8003628 <HAL_DMA_IRQHandler+0x1e8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d009      	beq.n	8003512 <HAL_DMA_IRQHandler+0xd2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a4a      	ldr	r2, [pc, #296]	; (800362c <HAL_DMA_IRQHandler+0x1ec>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d004      	beq.n	8003512 <HAL_DMA_IRQHandler+0xd2>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a48      	ldr	r2, [pc, #288]	; (8003630 <HAL_DMA_IRQHandler+0x1f0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d101      	bne.n	8003516 <HAL_DMA_IRQHandler+0xd6>
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <HAL_DMA_IRQHandler+0xd8>
 8003516:	2300      	movs	r3, #0
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 842b 	beq.w	8003d74 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	2208      	movs	r2, #8
 8003528:	409a      	lsls	r2, r3
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	4013      	ands	r3, r2
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 80a2 	beq.w	8003678 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a2e      	ldr	r2, [pc, #184]	; (80035f4 <HAL_DMA_IRQHandler+0x1b4>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d04a      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x194>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a2d      	ldr	r2, [pc, #180]	; (80035f8 <HAL_DMA_IRQHandler+0x1b8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d045      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x194>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a2b      	ldr	r2, [pc, #172]	; (80035fc <HAL_DMA_IRQHandler+0x1bc>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d040      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x194>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a2a      	ldr	r2, [pc, #168]	; (8003600 <HAL_DMA_IRQHandler+0x1c0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d03b      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x194>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a28      	ldr	r2, [pc, #160]	; (8003604 <HAL_DMA_IRQHandler+0x1c4>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d036      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x194>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a27      	ldr	r2, [pc, #156]	; (8003608 <HAL_DMA_IRQHandler+0x1c8>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d031      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x194>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a25      	ldr	r2, [pc, #148]	; (800360c <HAL_DMA_IRQHandler+0x1cc>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d02c      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x194>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a24      	ldr	r2, [pc, #144]	; (8003610 <HAL_DMA_IRQHandler+0x1d0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d027      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x194>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a22      	ldr	r2, [pc, #136]	; (8003614 <HAL_DMA_IRQHandler+0x1d4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d022      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x194>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a21      	ldr	r2, [pc, #132]	; (8003618 <HAL_DMA_IRQHandler+0x1d8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d01d      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x194>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a1f      	ldr	r2, [pc, #124]	; (800361c <HAL_DMA_IRQHandler+0x1dc>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d018      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x194>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1e      	ldr	r2, [pc, #120]	; (8003620 <HAL_DMA_IRQHandler+0x1e0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d013      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x194>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a1c      	ldr	r2, [pc, #112]	; (8003624 <HAL_DMA_IRQHandler+0x1e4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00e      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x194>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1b      	ldr	r2, [pc, #108]	; (8003628 <HAL_DMA_IRQHandler+0x1e8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d009      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x194>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a19      	ldr	r2, [pc, #100]	; (800362c <HAL_DMA_IRQHandler+0x1ec>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d004      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x194>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a18      	ldr	r2, [pc, #96]	; (8003630 <HAL_DMA_IRQHandler+0x1f0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d12f      	bne.n	8003634 <HAL_DMA_IRQHandler+0x1f4>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	2b00      	cmp	r3, #0
 80035e0:	bf14      	ite	ne
 80035e2:	2301      	movne	r3, #1
 80035e4:	2300      	moveq	r3, #0
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	e02e      	b.n	8003648 <HAL_DMA_IRQHandler+0x208>
 80035ea:	bf00      	nop
 80035ec:	24000000 	.word	0x24000000
 80035f0:	1b4e81b5 	.word	0x1b4e81b5
 80035f4:	40020010 	.word	0x40020010
 80035f8:	40020028 	.word	0x40020028
 80035fc:	40020040 	.word	0x40020040
 8003600:	40020058 	.word	0x40020058
 8003604:	40020070 	.word	0x40020070
 8003608:	40020088 	.word	0x40020088
 800360c:	400200a0 	.word	0x400200a0
 8003610:	400200b8 	.word	0x400200b8
 8003614:	40020410 	.word	0x40020410
 8003618:	40020428 	.word	0x40020428
 800361c:	40020440 	.word	0x40020440
 8003620:	40020458 	.word	0x40020458
 8003624:	40020470 	.word	0x40020470
 8003628:	40020488 	.word	0x40020488
 800362c:	400204a0 	.word	0x400204a0
 8003630:	400204b8 	.word	0x400204b8
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	bf14      	ite	ne
 8003642:	2301      	movne	r3, #1
 8003644:	2300      	moveq	r3, #0
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d015      	beq.n	8003678 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0204 	bic.w	r2, r2, #4
 800365a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003660:	f003 031f 	and.w	r3, r3, #31
 8003664:	2208      	movs	r2, #8
 8003666:	409a      	lsls	r2, r3
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003670:	f043 0201 	orr.w	r2, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367c:	f003 031f 	and.w	r3, r3, #31
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	fa22 f303 	lsr.w	r3, r2, r3
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d06e      	beq.n	800376c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a69      	ldr	r2, [pc, #420]	; (8003838 <HAL_DMA_IRQHandler+0x3f8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d04a      	beq.n	800372e <HAL_DMA_IRQHandler+0x2ee>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a67      	ldr	r2, [pc, #412]	; (800383c <HAL_DMA_IRQHandler+0x3fc>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d045      	beq.n	800372e <HAL_DMA_IRQHandler+0x2ee>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a66      	ldr	r2, [pc, #408]	; (8003840 <HAL_DMA_IRQHandler+0x400>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d040      	beq.n	800372e <HAL_DMA_IRQHandler+0x2ee>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a64      	ldr	r2, [pc, #400]	; (8003844 <HAL_DMA_IRQHandler+0x404>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d03b      	beq.n	800372e <HAL_DMA_IRQHandler+0x2ee>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a63      	ldr	r2, [pc, #396]	; (8003848 <HAL_DMA_IRQHandler+0x408>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d036      	beq.n	800372e <HAL_DMA_IRQHandler+0x2ee>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a61      	ldr	r2, [pc, #388]	; (800384c <HAL_DMA_IRQHandler+0x40c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d031      	beq.n	800372e <HAL_DMA_IRQHandler+0x2ee>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a60      	ldr	r2, [pc, #384]	; (8003850 <HAL_DMA_IRQHandler+0x410>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d02c      	beq.n	800372e <HAL_DMA_IRQHandler+0x2ee>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a5e      	ldr	r2, [pc, #376]	; (8003854 <HAL_DMA_IRQHandler+0x414>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d027      	beq.n	800372e <HAL_DMA_IRQHandler+0x2ee>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a5d      	ldr	r2, [pc, #372]	; (8003858 <HAL_DMA_IRQHandler+0x418>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d022      	beq.n	800372e <HAL_DMA_IRQHandler+0x2ee>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a5b      	ldr	r2, [pc, #364]	; (800385c <HAL_DMA_IRQHandler+0x41c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d01d      	beq.n	800372e <HAL_DMA_IRQHandler+0x2ee>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a5a      	ldr	r2, [pc, #360]	; (8003860 <HAL_DMA_IRQHandler+0x420>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d018      	beq.n	800372e <HAL_DMA_IRQHandler+0x2ee>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a58      	ldr	r2, [pc, #352]	; (8003864 <HAL_DMA_IRQHandler+0x424>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d013      	beq.n	800372e <HAL_DMA_IRQHandler+0x2ee>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a57      	ldr	r2, [pc, #348]	; (8003868 <HAL_DMA_IRQHandler+0x428>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00e      	beq.n	800372e <HAL_DMA_IRQHandler+0x2ee>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a55      	ldr	r2, [pc, #340]	; (800386c <HAL_DMA_IRQHandler+0x42c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d009      	beq.n	800372e <HAL_DMA_IRQHandler+0x2ee>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a54      	ldr	r2, [pc, #336]	; (8003870 <HAL_DMA_IRQHandler+0x430>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d004      	beq.n	800372e <HAL_DMA_IRQHandler+0x2ee>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a52      	ldr	r2, [pc, #328]	; (8003874 <HAL_DMA_IRQHandler+0x434>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d10a      	bne.n	8003744 <HAL_DMA_IRQHandler+0x304>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003738:	2b00      	cmp	r3, #0
 800373a:	bf14      	ite	ne
 800373c:	2301      	movne	r3, #1
 800373e:	2300      	moveq	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	e003      	b.n	800374c <HAL_DMA_IRQHandler+0x30c>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2300      	movs	r3, #0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00d      	beq.n	800376c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003754:	f003 031f 	and.w	r3, r3, #31
 8003758:	2201      	movs	r2, #1
 800375a:	409a      	lsls	r2, r3
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003764:	f043 0202 	orr.w	r2, r3, #2
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	2204      	movs	r2, #4
 8003776:	409a      	lsls	r2, r3
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 808f 	beq.w	80038a0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a2c      	ldr	r2, [pc, #176]	; (8003838 <HAL_DMA_IRQHandler+0x3f8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d04a      	beq.n	8003822 <HAL_DMA_IRQHandler+0x3e2>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a2a      	ldr	r2, [pc, #168]	; (800383c <HAL_DMA_IRQHandler+0x3fc>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d045      	beq.n	8003822 <HAL_DMA_IRQHandler+0x3e2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a29      	ldr	r2, [pc, #164]	; (8003840 <HAL_DMA_IRQHandler+0x400>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d040      	beq.n	8003822 <HAL_DMA_IRQHandler+0x3e2>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a27      	ldr	r2, [pc, #156]	; (8003844 <HAL_DMA_IRQHandler+0x404>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d03b      	beq.n	8003822 <HAL_DMA_IRQHandler+0x3e2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a26      	ldr	r2, [pc, #152]	; (8003848 <HAL_DMA_IRQHandler+0x408>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d036      	beq.n	8003822 <HAL_DMA_IRQHandler+0x3e2>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a24      	ldr	r2, [pc, #144]	; (800384c <HAL_DMA_IRQHandler+0x40c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d031      	beq.n	8003822 <HAL_DMA_IRQHandler+0x3e2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a23      	ldr	r2, [pc, #140]	; (8003850 <HAL_DMA_IRQHandler+0x410>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d02c      	beq.n	8003822 <HAL_DMA_IRQHandler+0x3e2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a21      	ldr	r2, [pc, #132]	; (8003854 <HAL_DMA_IRQHandler+0x414>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d027      	beq.n	8003822 <HAL_DMA_IRQHandler+0x3e2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a20      	ldr	r2, [pc, #128]	; (8003858 <HAL_DMA_IRQHandler+0x418>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d022      	beq.n	8003822 <HAL_DMA_IRQHandler+0x3e2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a1e      	ldr	r2, [pc, #120]	; (800385c <HAL_DMA_IRQHandler+0x41c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d01d      	beq.n	8003822 <HAL_DMA_IRQHandler+0x3e2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a1d      	ldr	r2, [pc, #116]	; (8003860 <HAL_DMA_IRQHandler+0x420>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d018      	beq.n	8003822 <HAL_DMA_IRQHandler+0x3e2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a1b      	ldr	r2, [pc, #108]	; (8003864 <HAL_DMA_IRQHandler+0x424>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d013      	beq.n	8003822 <HAL_DMA_IRQHandler+0x3e2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a1a      	ldr	r2, [pc, #104]	; (8003868 <HAL_DMA_IRQHandler+0x428>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d00e      	beq.n	8003822 <HAL_DMA_IRQHandler+0x3e2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a18      	ldr	r2, [pc, #96]	; (800386c <HAL_DMA_IRQHandler+0x42c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d009      	beq.n	8003822 <HAL_DMA_IRQHandler+0x3e2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a17      	ldr	r2, [pc, #92]	; (8003870 <HAL_DMA_IRQHandler+0x430>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d004      	beq.n	8003822 <HAL_DMA_IRQHandler+0x3e2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a15      	ldr	r2, [pc, #84]	; (8003874 <HAL_DMA_IRQHandler+0x434>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d12a      	bne.n	8003878 <HAL_DMA_IRQHandler+0x438>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	bf14      	ite	ne
 8003830:	2301      	movne	r3, #1
 8003832:	2300      	moveq	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	e023      	b.n	8003880 <HAL_DMA_IRQHandler+0x440>
 8003838:	40020010 	.word	0x40020010
 800383c:	40020028 	.word	0x40020028
 8003840:	40020040 	.word	0x40020040
 8003844:	40020058 	.word	0x40020058
 8003848:	40020070 	.word	0x40020070
 800384c:	40020088 	.word	0x40020088
 8003850:	400200a0 	.word	0x400200a0
 8003854:	400200b8 	.word	0x400200b8
 8003858:	40020410 	.word	0x40020410
 800385c:	40020428 	.word	0x40020428
 8003860:	40020440 	.word	0x40020440
 8003864:	40020458 	.word	0x40020458
 8003868:	40020470 	.word	0x40020470
 800386c:	40020488 	.word	0x40020488
 8003870:	400204a0 	.word	0x400204a0
 8003874:	400204b8 	.word	0x400204b8
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2300      	movs	r3, #0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00d      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	2204      	movs	r2, #4
 800388e:	409a      	lsls	r2, r3
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003898:	f043 0204 	orr.w	r2, r3, #4
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a4:	f003 031f 	and.w	r3, r3, #31
 80038a8:	2210      	movs	r2, #16
 80038aa:	409a      	lsls	r2, r3
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	4013      	ands	r3, r2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 80a6 	beq.w	8003a02 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a85      	ldr	r2, [pc, #532]	; (8003ad0 <HAL_DMA_IRQHandler+0x690>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d04a      	beq.n	8003956 <HAL_DMA_IRQHandler+0x516>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a83      	ldr	r2, [pc, #524]	; (8003ad4 <HAL_DMA_IRQHandler+0x694>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d045      	beq.n	8003956 <HAL_DMA_IRQHandler+0x516>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a82      	ldr	r2, [pc, #520]	; (8003ad8 <HAL_DMA_IRQHandler+0x698>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d040      	beq.n	8003956 <HAL_DMA_IRQHandler+0x516>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a80      	ldr	r2, [pc, #512]	; (8003adc <HAL_DMA_IRQHandler+0x69c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d03b      	beq.n	8003956 <HAL_DMA_IRQHandler+0x516>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a7f      	ldr	r2, [pc, #508]	; (8003ae0 <HAL_DMA_IRQHandler+0x6a0>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d036      	beq.n	8003956 <HAL_DMA_IRQHandler+0x516>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a7d      	ldr	r2, [pc, #500]	; (8003ae4 <HAL_DMA_IRQHandler+0x6a4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d031      	beq.n	8003956 <HAL_DMA_IRQHandler+0x516>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a7c      	ldr	r2, [pc, #496]	; (8003ae8 <HAL_DMA_IRQHandler+0x6a8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d02c      	beq.n	8003956 <HAL_DMA_IRQHandler+0x516>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a7a      	ldr	r2, [pc, #488]	; (8003aec <HAL_DMA_IRQHandler+0x6ac>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d027      	beq.n	8003956 <HAL_DMA_IRQHandler+0x516>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a79      	ldr	r2, [pc, #484]	; (8003af0 <HAL_DMA_IRQHandler+0x6b0>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d022      	beq.n	8003956 <HAL_DMA_IRQHandler+0x516>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a77      	ldr	r2, [pc, #476]	; (8003af4 <HAL_DMA_IRQHandler+0x6b4>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d01d      	beq.n	8003956 <HAL_DMA_IRQHandler+0x516>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a76      	ldr	r2, [pc, #472]	; (8003af8 <HAL_DMA_IRQHandler+0x6b8>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d018      	beq.n	8003956 <HAL_DMA_IRQHandler+0x516>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a74      	ldr	r2, [pc, #464]	; (8003afc <HAL_DMA_IRQHandler+0x6bc>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d013      	beq.n	8003956 <HAL_DMA_IRQHandler+0x516>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a73      	ldr	r2, [pc, #460]	; (8003b00 <HAL_DMA_IRQHandler+0x6c0>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d00e      	beq.n	8003956 <HAL_DMA_IRQHandler+0x516>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a71      	ldr	r2, [pc, #452]	; (8003b04 <HAL_DMA_IRQHandler+0x6c4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d009      	beq.n	8003956 <HAL_DMA_IRQHandler+0x516>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a70      	ldr	r2, [pc, #448]	; (8003b08 <HAL_DMA_IRQHandler+0x6c8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d004      	beq.n	8003956 <HAL_DMA_IRQHandler+0x516>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a6e      	ldr	r2, [pc, #440]	; (8003b0c <HAL_DMA_IRQHandler+0x6cc>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d10a      	bne.n	800396c <HAL_DMA_IRQHandler+0x52c>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b00      	cmp	r3, #0
 8003962:	bf14      	ite	ne
 8003964:	2301      	movne	r3, #1
 8003966:	2300      	moveq	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	e009      	b.n	8003980 <HAL_DMA_IRQHandler+0x540>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b00      	cmp	r3, #0
 8003978:	bf14      	ite	ne
 800397a:	2301      	movne	r3, #1
 800397c:	2300      	moveq	r3, #0
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d03e      	beq.n	8003a02 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	2210      	movs	r2, #16
 800398e:	409a      	lsls	r2, r3
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d018      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d108      	bne.n	80039c2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d024      	beq.n	8003a02 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	4798      	blx	r3
 80039c0:	e01f      	b.n	8003a02 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d01b      	beq.n	8003a02 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	4798      	blx	r3
 80039d2:	e016      	b.n	8003a02 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d107      	bne.n	80039f2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0208 	bic.w	r2, r2, #8
 80039f0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	409a      	lsls	r2, r3
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	4013      	ands	r3, r2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 8110 	beq.w	8003c38 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a2c      	ldr	r2, [pc, #176]	; (8003ad0 <HAL_DMA_IRQHandler+0x690>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d04a      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x678>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a2b      	ldr	r2, [pc, #172]	; (8003ad4 <HAL_DMA_IRQHandler+0x694>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d045      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x678>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a29      	ldr	r2, [pc, #164]	; (8003ad8 <HAL_DMA_IRQHandler+0x698>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d040      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x678>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a28      	ldr	r2, [pc, #160]	; (8003adc <HAL_DMA_IRQHandler+0x69c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d03b      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x678>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a26      	ldr	r2, [pc, #152]	; (8003ae0 <HAL_DMA_IRQHandler+0x6a0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d036      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x678>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a25      	ldr	r2, [pc, #148]	; (8003ae4 <HAL_DMA_IRQHandler+0x6a4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d031      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x678>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a23      	ldr	r2, [pc, #140]	; (8003ae8 <HAL_DMA_IRQHandler+0x6a8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d02c      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x678>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a22      	ldr	r2, [pc, #136]	; (8003aec <HAL_DMA_IRQHandler+0x6ac>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d027      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x678>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a20      	ldr	r2, [pc, #128]	; (8003af0 <HAL_DMA_IRQHandler+0x6b0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d022      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x678>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a1f      	ldr	r2, [pc, #124]	; (8003af4 <HAL_DMA_IRQHandler+0x6b4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d01d      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x678>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a1d      	ldr	r2, [pc, #116]	; (8003af8 <HAL_DMA_IRQHandler+0x6b8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d018      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x678>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a1c      	ldr	r2, [pc, #112]	; (8003afc <HAL_DMA_IRQHandler+0x6bc>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d013      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x678>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a1a      	ldr	r2, [pc, #104]	; (8003b00 <HAL_DMA_IRQHandler+0x6c0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d00e      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x678>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a19      	ldr	r2, [pc, #100]	; (8003b04 <HAL_DMA_IRQHandler+0x6c4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d009      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x678>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a17      	ldr	r2, [pc, #92]	; (8003b08 <HAL_DMA_IRQHandler+0x6c8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d004      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x678>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a16      	ldr	r2, [pc, #88]	; (8003b0c <HAL_DMA_IRQHandler+0x6cc>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d12b      	bne.n	8003b10 <HAL_DMA_IRQHandler+0x6d0>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	bf14      	ite	ne
 8003ac6:	2301      	movne	r3, #1
 8003ac8:	2300      	moveq	r3, #0
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	e02a      	b.n	8003b24 <HAL_DMA_IRQHandler+0x6e4>
 8003ace:	bf00      	nop
 8003ad0:	40020010 	.word	0x40020010
 8003ad4:	40020028 	.word	0x40020028
 8003ad8:	40020040 	.word	0x40020040
 8003adc:	40020058 	.word	0x40020058
 8003ae0:	40020070 	.word	0x40020070
 8003ae4:	40020088 	.word	0x40020088
 8003ae8:	400200a0 	.word	0x400200a0
 8003aec:	400200b8 	.word	0x400200b8
 8003af0:	40020410 	.word	0x40020410
 8003af4:	40020428 	.word	0x40020428
 8003af8:	40020440 	.word	0x40020440
 8003afc:	40020458 	.word	0x40020458
 8003b00:	40020470 	.word	0x40020470
 8003b04:	40020488 	.word	0x40020488
 8003b08:	400204a0 	.word	0x400204a0
 8003b0c:	400204b8 	.word	0x400204b8
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	bf14      	ite	ne
 8003b1e:	2301      	movne	r3, #1
 8003b20:	2300      	moveq	r3, #0
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8087 	beq.w	8003c38 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2e:	f003 031f 	and.w	r3, r3, #31
 8003b32:	2220      	movs	r2, #32
 8003b34:	409a      	lsls	r2, r3
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d139      	bne.n	8003bba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0216 	bic.w	r2, r2, #22
 8003b54:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695a      	ldr	r2, [r3, #20]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b64:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d103      	bne.n	8003b76 <HAL_DMA_IRQHandler+0x736>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d007      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0208 	bic.w	r2, r2, #8
 8003b84:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	223f      	movs	r2, #63	; 0x3f
 8003b90:	409a      	lsls	r2, r3
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 834a 	beq.w	8004244 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	4798      	blx	r3
          }
          return;
 8003bb8:	e344      	b.n	8004244 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d018      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d108      	bne.n	8003be8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d02c      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	4798      	blx	r3
 8003be6:	e027      	b.n	8003c38 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d023      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	4798      	blx	r3
 8003bf8:	e01e      	b.n	8003c38 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10f      	bne.n	8003c28 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0210 	bic.w	r2, r2, #16
 8003c16:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 8306 	beq.w	800424e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 8088 	beq.w	8003d60 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2204      	movs	r2, #4
 8003c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a7a      	ldr	r2, [pc, #488]	; (8003e48 <HAL_DMA_IRQHandler+0xa08>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d04a      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x8b8>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a79      	ldr	r2, [pc, #484]	; (8003e4c <HAL_DMA_IRQHandler+0xa0c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d045      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x8b8>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a77      	ldr	r2, [pc, #476]	; (8003e50 <HAL_DMA_IRQHandler+0xa10>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d040      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x8b8>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a76      	ldr	r2, [pc, #472]	; (8003e54 <HAL_DMA_IRQHandler+0xa14>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d03b      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x8b8>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a74      	ldr	r2, [pc, #464]	; (8003e58 <HAL_DMA_IRQHandler+0xa18>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d036      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x8b8>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a73      	ldr	r2, [pc, #460]	; (8003e5c <HAL_DMA_IRQHandler+0xa1c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d031      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x8b8>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a71      	ldr	r2, [pc, #452]	; (8003e60 <HAL_DMA_IRQHandler+0xa20>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d02c      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x8b8>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a70      	ldr	r2, [pc, #448]	; (8003e64 <HAL_DMA_IRQHandler+0xa24>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d027      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x8b8>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a6e      	ldr	r2, [pc, #440]	; (8003e68 <HAL_DMA_IRQHandler+0xa28>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d022      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x8b8>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a6d      	ldr	r2, [pc, #436]	; (8003e6c <HAL_DMA_IRQHandler+0xa2c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d01d      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x8b8>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a6b      	ldr	r2, [pc, #428]	; (8003e70 <HAL_DMA_IRQHandler+0xa30>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d018      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x8b8>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a6a      	ldr	r2, [pc, #424]	; (8003e74 <HAL_DMA_IRQHandler+0xa34>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d013      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x8b8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a68      	ldr	r2, [pc, #416]	; (8003e78 <HAL_DMA_IRQHandler+0xa38>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00e      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x8b8>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a67      	ldr	r2, [pc, #412]	; (8003e7c <HAL_DMA_IRQHandler+0xa3c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d009      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x8b8>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a65      	ldr	r2, [pc, #404]	; (8003e80 <HAL_DMA_IRQHandler+0xa40>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d004      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x8b8>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a64      	ldr	r2, [pc, #400]	; (8003e84 <HAL_DMA_IRQHandler+0xa44>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d108      	bne.n	8003d0a <HAL_DMA_IRQHandler+0x8ca>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0201 	bic.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	e007      	b.n	8003d1a <HAL_DMA_IRQHandler+0x8da>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0201 	bic.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d307      	bcc.n	8003d36 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1f2      	bne.n	8003d1a <HAL_DMA_IRQHandler+0x8da>
 8003d34:	e000      	b.n	8003d38 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003d36:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d004      	beq.n	8003d50 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2203      	movs	r2, #3
 8003d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003d4e:	e003      	b.n	8003d58 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 8272 	beq.w	800424e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	4798      	blx	r3
 8003d72:	e26c      	b.n	800424e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a43      	ldr	r2, [pc, #268]	; (8003e88 <HAL_DMA_IRQHandler+0xa48>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d022      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0x984>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a42      	ldr	r2, [pc, #264]	; (8003e8c <HAL_DMA_IRQHandler+0xa4c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d01d      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0x984>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a40      	ldr	r2, [pc, #256]	; (8003e90 <HAL_DMA_IRQHandler+0xa50>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d018      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0x984>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a3f      	ldr	r2, [pc, #252]	; (8003e94 <HAL_DMA_IRQHandler+0xa54>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d013      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0x984>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a3d      	ldr	r2, [pc, #244]	; (8003e98 <HAL_DMA_IRQHandler+0xa58>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00e      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0x984>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a3c      	ldr	r2, [pc, #240]	; (8003e9c <HAL_DMA_IRQHandler+0xa5c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d009      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0x984>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a3a      	ldr	r2, [pc, #232]	; (8003ea0 <HAL_DMA_IRQHandler+0xa60>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d004      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0x984>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a39      	ldr	r2, [pc, #228]	; (8003ea4 <HAL_DMA_IRQHandler+0xa64>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d101      	bne.n	8003dc8 <HAL_DMA_IRQHandler+0x988>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <HAL_DMA_IRQHandler+0x98a>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 823f 	beq.w	800424e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ddc:	f003 031f 	and.w	r3, r3, #31
 8003de0:	2204      	movs	r2, #4
 8003de2:	409a      	lsls	r2, r3
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	4013      	ands	r3, r2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 80cd 	beq.w	8003f88 <HAL_DMA_IRQHandler+0xb48>
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 80c7 	beq.w	8003f88 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dfe:	f003 031f 	and.w	r3, r3, #31
 8003e02:	2204      	movs	r2, #4
 8003e04:	409a      	lsls	r2, r3
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d049      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 8210 	beq.w	8004248 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e30:	e20a      	b.n	8004248 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 8206 	beq.w	8004248 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e44:	e200      	b.n	8004248 <HAL_DMA_IRQHandler+0xe08>
 8003e46:	bf00      	nop
 8003e48:	40020010 	.word	0x40020010
 8003e4c:	40020028 	.word	0x40020028
 8003e50:	40020040 	.word	0x40020040
 8003e54:	40020058 	.word	0x40020058
 8003e58:	40020070 	.word	0x40020070
 8003e5c:	40020088 	.word	0x40020088
 8003e60:	400200a0 	.word	0x400200a0
 8003e64:	400200b8 	.word	0x400200b8
 8003e68:	40020410 	.word	0x40020410
 8003e6c:	40020428 	.word	0x40020428
 8003e70:	40020440 	.word	0x40020440
 8003e74:	40020458 	.word	0x40020458
 8003e78:	40020470 	.word	0x40020470
 8003e7c:	40020488 	.word	0x40020488
 8003e80:	400204a0 	.word	0x400204a0
 8003e84:	400204b8 	.word	0x400204b8
 8003e88:	58025408 	.word	0x58025408
 8003e8c:	5802541c 	.word	0x5802541c
 8003e90:	58025430 	.word	0x58025430
 8003e94:	58025444 	.word	0x58025444
 8003e98:	58025458 	.word	0x58025458
 8003e9c:	5802546c 	.word	0x5802546c
 8003ea0:	58025480 	.word	0x58025480
 8003ea4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d160      	bne.n	8003f74 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a7f      	ldr	r2, [pc, #508]	; (80040b4 <HAL_DMA_IRQHandler+0xc74>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d04a      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xb12>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a7d      	ldr	r2, [pc, #500]	; (80040b8 <HAL_DMA_IRQHandler+0xc78>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d045      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xb12>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a7c      	ldr	r2, [pc, #496]	; (80040bc <HAL_DMA_IRQHandler+0xc7c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d040      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xb12>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a7a      	ldr	r2, [pc, #488]	; (80040c0 <HAL_DMA_IRQHandler+0xc80>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d03b      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xb12>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a79      	ldr	r2, [pc, #484]	; (80040c4 <HAL_DMA_IRQHandler+0xc84>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d036      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xb12>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a77      	ldr	r2, [pc, #476]	; (80040c8 <HAL_DMA_IRQHandler+0xc88>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d031      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xb12>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a76      	ldr	r2, [pc, #472]	; (80040cc <HAL_DMA_IRQHandler+0xc8c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d02c      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xb12>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a74      	ldr	r2, [pc, #464]	; (80040d0 <HAL_DMA_IRQHandler+0xc90>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d027      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xb12>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a73      	ldr	r2, [pc, #460]	; (80040d4 <HAL_DMA_IRQHandler+0xc94>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d022      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xb12>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a71      	ldr	r2, [pc, #452]	; (80040d8 <HAL_DMA_IRQHandler+0xc98>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d01d      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xb12>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a70      	ldr	r2, [pc, #448]	; (80040dc <HAL_DMA_IRQHandler+0xc9c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d018      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xb12>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a6e      	ldr	r2, [pc, #440]	; (80040e0 <HAL_DMA_IRQHandler+0xca0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d013      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xb12>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a6d      	ldr	r2, [pc, #436]	; (80040e4 <HAL_DMA_IRQHandler+0xca4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00e      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xb12>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a6b      	ldr	r2, [pc, #428]	; (80040e8 <HAL_DMA_IRQHandler+0xca8>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d009      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xb12>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a6a      	ldr	r2, [pc, #424]	; (80040ec <HAL_DMA_IRQHandler+0xcac>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d004      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xb12>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a68      	ldr	r2, [pc, #416]	; (80040f0 <HAL_DMA_IRQHandler+0xcb0>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d108      	bne.n	8003f64 <HAL_DMA_IRQHandler+0xb24>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0208 	bic.w	r2, r2, #8
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	e007      	b.n	8003f74 <HAL_DMA_IRQHandler+0xb34>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0204 	bic.w	r2, r2, #4
 8003f72:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 8165 	beq.w	8004248 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f86:	e15f      	b.n	8004248 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8c:	f003 031f 	and.w	r3, r3, #31
 8003f90:	2202      	movs	r2, #2
 8003f92:	409a      	lsls	r2, r3
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 80c5 	beq.w	8004128 <HAL_DMA_IRQHandler+0xce8>
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 80bf 	beq.w	8004128 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fae:	f003 031f 	and.w	r3, r3, #31
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	409a      	lsls	r2, r3
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d018      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d109      	bne.n	8003fe2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 813a 	beq.w	800424c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fe0:	e134      	b.n	800424c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 8130 	beq.w	800424c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ff4:	e12a      	b.n	800424c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f003 0320 	and.w	r3, r3, #32
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f040 8089 	bne.w	8004114 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a2b      	ldr	r2, [pc, #172]	; (80040b4 <HAL_DMA_IRQHandler+0xc74>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d04a      	beq.n	80040a2 <HAL_DMA_IRQHandler+0xc62>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a29      	ldr	r2, [pc, #164]	; (80040b8 <HAL_DMA_IRQHandler+0xc78>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d045      	beq.n	80040a2 <HAL_DMA_IRQHandler+0xc62>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a28      	ldr	r2, [pc, #160]	; (80040bc <HAL_DMA_IRQHandler+0xc7c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d040      	beq.n	80040a2 <HAL_DMA_IRQHandler+0xc62>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a26      	ldr	r2, [pc, #152]	; (80040c0 <HAL_DMA_IRQHandler+0xc80>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d03b      	beq.n	80040a2 <HAL_DMA_IRQHandler+0xc62>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a25      	ldr	r2, [pc, #148]	; (80040c4 <HAL_DMA_IRQHandler+0xc84>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d036      	beq.n	80040a2 <HAL_DMA_IRQHandler+0xc62>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a23      	ldr	r2, [pc, #140]	; (80040c8 <HAL_DMA_IRQHandler+0xc88>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d031      	beq.n	80040a2 <HAL_DMA_IRQHandler+0xc62>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a22      	ldr	r2, [pc, #136]	; (80040cc <HAL_DMA_IRQHandler+0xc8c>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d02c      	beq.n	80040a2 <HAL_DMA_IRQHandler+0xc62>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a20      	ldr	r2, [pc, #128]	; (80040d0 <HAL_DMA_IRQHandler+0xc90>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d027      	beq.n	80040a2 <HAL_DMA_IRQHandler+0xc62>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a1f      	ldr	r2, [pc, #124]	; (80040d4 <HAL_DMA_IRQHandler+0xc94>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d022      	beq.n	80040a2 <HAL_DMA_IRQHandler+0xc62>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a1d      	ldr	r2, [pc, #116]	; (80040d8 <HAL_DMA_IRQHandler+0xc98>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d01d      	beq.n	80040a2 <HAL_DMA_IRQHandler+0xc62>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1c      	ldr	r2, [pc, #112]	; (80040dc <HAL_DMA_IRQHandler+0xc9c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d018      	beq.n	80040a2 <HAL_DMA_IRQHandler+0xc62>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a1a      	ldr	r2, [pc, #104]	; (80040e0 <HAL_DMA_IRQHandler+0xca0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d013      	beq.n	80040a2 <HAL_DMA_IRQHandler+0xc62>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a19      	ldr	r2, [pc, #100]	; (80040e4 <HAL_DMA_IRQHandler+0xca4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00e      	beq.n	80040a2 <HAL_DMA_IRQHandler+0xc62>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a17      	ldr	r2, [pc, #92]	; (80040e8 <HAL_DMA_IRQHandler+0xca8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d009      	beq.n	80040a2 <HAL_DMA_IRQHandler+0xc62>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a16      	ldr	r2, [pc, #88]	; (80040ec <HAL_DMA_IRQHandler+0xcac>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d004      	beq.n	80040a2 <HAL_DMA_IRQHandler+0xc62>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a14      	ldr	r2, [pc, #80]	; (80040f0 <HAL_DMA_IRQHandler+0xcb0>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d128      	bne.n	80040f4 <HAL_DMA_IRQHandler+0xcb4>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0214 	bic.w	r2, r2, #20
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	e027      	b.n	8004104 <HAL_DMA_IRQHandler+0xcc4>
 80040b4:	40020010 	.word	0x40020010
 80040b8:	40020028 	.word	0x40020028
 80040bc:	40020040 	.word	0x40020040
 80040c0:	40020058 	.word	0x40020058
 80040c4:	40020070 	.word	0x40020070
 80040c8:	40020088 	.word	0x40020088
 80040cc:	400200a0 	.word	0x400200a0
 80040d0:	400200b8 	.word	0x400200b8
 80040d4:	40020410 	.word	0x40020410
 80040d8:	40020428 	.word	0x40020428
 80040dc:	40020440 	.word	0x40020440
 80040e0:	40020458 	.word	0x40020458
 80040e4:	40020470 	.word	0x40020470
 80040e8:	40020488 	.word	0x40020488
 80040ec:	400204a0 	.word	0x400204a0
 80040f0:	400204b8 	.word	0x400204b8
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 020a 	bic.w	r2, r2, #10
 8004102:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 8097 	beq.w	800424c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004126:	e091      	b.n	800424c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412c:	f003 031f 	and.w	r3, r3, #31
 8004130:	2208      	movs	r2, #8
 8004132:	409a      	lsls	r2, r3
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	4013      	ands	r3, r2
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 8088 	beq.w	800424e <HAL_DMA_IRQHandler+0xe0e>
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 8082 	beq.w	800424e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a41      	ldr	r2, [pc, #260]	; (8004254 <HAL_DMA_IRQHandler+0xe14>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d04a      	beq.n	80041ea <HAL_DMA_IRQHandler+0xdaa>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a3f      	ldr	r2, [pc, #252]	; (8004258 <HAL_DMA_IRQHandler+0xe18>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d045      	beq.n	80041ea <HAL_DMA_IRQHandler+0xdaa>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a3e      	ldr	r2, [pc, #248]	; (800425c <HAL_DMA_IRQHandler+0xe1c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d040      	beq.n	80041ea <HAL_DMA_IRQHandler+0xdaa>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a3c      	ldr	r2, [pc, #240]	; (8004260 <HAL_DMA_IRQHandler+0xe20>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d03b      	beq.n	80041ea <HAL_DMA_IRQHandler+0xdaa>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a3b      	ldr	r2, [pc, #236]	; (8004264 <HAL_DMA_IRQHandler+0xe24>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d036      	beq.n	80041ea <HAL_DMA_IRQHandler+0xdaa>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a39      	ldr	r2, [pc, #228]	; (8004268 <HAL_DMA_IRQHandler+0xe28>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d031      	beq.n	80041ea <HAL_DMA_IRQHandler+0xdaa>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a38      	ldr	r2, [pc, #224]	; (800426c <HAL_DMA_IRQHandler+0xe2c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d02c      	beq.n	80041ea <HAL_DMA_IRQHandler+0xdaa>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a36      	ldr	r2, [pc, #216]	; (8004270 <HAL_DMA_IRQHandler+0xe30>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d027      	beq.n	80041ea <HAL_DMA_IRQHandler+0xdaa>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a35      	ldr	r2, [pc, #212]	; (8004274 <HAL_DMA_IRQHandler+0xe34>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d022      	beq.n	80041ea <HAL_DMA_IRQHandler+0xdaa>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a33      	ldr	r2, [pc, #204]	; (8004278 <HAL_DMA_IRQHandler+0xe38>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d01d      	beq.n	80041ea <HAL_DMA_IRQHandler+0xdaa>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a32      	ldr	r2, [pc, #200]	; (800427c <HAL_DMA_IRQHandler+0xe3c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d018      	beq.n	80041ea <HAL_DMA_IRQHandler+0xdaa>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a30      	ldr	r2, [pc, #192]	; (8004280 <HAL_DMA_IRQHandler+0xe40>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d013      	beq.n	80041ea <HAL_DMA_IRQHandler+0xdaa>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a2f      	ldr	r2, [pc, #188]	; (8004284 <HAL_DMA_IRQHandler+0xe44>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00e      	beq.n	80041ea <HAL_DMA_IRQHandler+0xdaa>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a2d      	ldr	r2, [pc, #180]	; (8004288 <HAL_DMA_IRQHandler+0xe48>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d009      	beq.n	80041ea <HAL_DMA_IRQHandler+0xdaa>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a2c      	ldr	r2, [pc, #176]	; (800428c <HAL_DMA_IRQHandler+0xe4c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d004      	beq.n	80041ea <HAL_DMA_IRQHandler+0xdaa>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a2a      	ldr	r2, [pc, #168]	; (8004290 <HAL_DMA_IRQHandler+0xe50>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d108      	bne.n	80041fc <HAL_DMA_IRQHandler+0xdbc>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 021c 	bic.w	r2, r2, #28
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	e007      	b.n	800420c <HAL_DMA_IRQHandler+0xdcc>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 020e 	bic.w	r2, r2, #14
 800420a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	2201      	movs	r2, #1
 8004216:	409a      	lsls	r2, r3
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004236:	2b00      	cmp	r3, #0
 8004238:	d009      	beq.n	800424e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	4798      	blx	r3
 8004242:	e004      	b.n	800424e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004244:	bf00      	nop
 8004246:	e002      	b.n	800424e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004248:	bf00      	nop
 800424a:	e000      	b.n	800424e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800424c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800424e:	3728      	adds	r7, #40	; 0x28
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40020010 	.word	0x40020010
 8004258:	40020028 	.word	0x40020028
 800425c:	40020040 	.word	0x40020040
 8004260:	40020058 	.word	0x40020058
 8004264:	40020070 	.word	0x40020070
 8004268:	40020088 	.word	0x40020088
 800426c:	400200a0 	.word	0x400200a0
 8004270:	400200b8 	.word	0x400200b8
 8004274:	40020410 	.word	0x40020410
 8004278:	40020428 	.word	0x40020428
 800427c:	40020440 	.word	0x40020440
 8004280:	40020458 	.word	0x40020458
 8004284:	40020470 	.word	0x40020470
 8004288:	40020488 	.word	0x40020488
 800428c:	400204a0 	.word	0x400204a0
 8004290:	400204b8 	.word	0x400204b8

08004294 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ac:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a7f      	ldr	r2, [pc, #508]	; (80044b0 <DMA_SetConfig+0x21c>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d072      	beq.n	800439e <DMA_SetConfig+0x10a>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a7d      	ldr	r2, [pc, #500]	; (80044b4 <DMA_SetConfig+0x220>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d06d      	beq.n	800439e <DMA_SetConfig+0x10a>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a7c      	ldr	r2, [pc, #496]	; (80044b8 <DMA_SetConfig+0x224>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d068      	beq.n	800439e <DMA_SetConfig+0x10a>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a7a      	ldr	r2, [pc, #488]	; (80044bc <DMA_SetConfig+0x228>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d063      	beq.n	800439e <DMA_SetConfig+0x10a>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a79      	ldr	r2, [pc, #484]	; (80044c0 <DMA_SetConfig+0x22c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d05e      	beq.n	800439e <DMA_SetConfig+0x10a>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a77      	ldr	r2, [pc, #476]	; (80044c4 <DMA_SetConfig+0x230>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d059      	beq.n	800439e <DMA_SetConfig+0x10a>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a76      	ldr	r2, [pc, #472]	; (80044c8 <DMA_SetConfig+0x234>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d054      	beq.n	800439e <DMA_SetConfig+0x10a>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a74      	ldr	r2, [pc, #464]	; (80044cc <DMA_SetConfig+0x238>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d04f      	beq.n	800439e <DMA_SetConfig+0x10a>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a73      	ldr	r2, [pc, #460]	; (80044d0 <DMA_SetConfig+0x23c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d04a      	beq.n	800439e <DMA_SetConfig+0x10a>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a71      	ldr	r2, [pc, #452]	; (80044d4 <DMA_SetConfig+0x240>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d045      	beq.n	800439e <DMA_SetConfig+0x10a>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a70      	ldr	r2, [pc, #448]	; (80044d8 <DMA_SetConfig+0x244>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d040      	beq.n	800439e <DMA_SetConfig+0x10a>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a6e      	ldr	r2, [pc, #440]	; (80044dc <DMA_SetConfig+0x248>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d03b      	beq.n	800439e <DMA_SetConfig+0x10a>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a6d      	ldr	r2, [pc, #436]	; (80044e0 <DMA_SetConfig+0x24c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d036      	beq.n	800439e <DMA_SetConfig+0x10a>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a6b      	ldr	r2, [pc, #428]	; (80044e4 <DMA_SetConfig+0x250>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d031      	beq.n	800439e <DMA_SetConfig+0x10a>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a6a      	ldr	r2, [pc, #424]	; (80044e8 <DMA_SetConfig+0x254>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d02c      	beq.n	800439e <DMA_SetConfig+0x10a>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a68      	ldr	r2, [pc, #416]	; (80044ec <DMA_SetConfig+0x258>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d027      	beq.n	800439e <DMA_SetConfig+0x10a>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a67      	ldr	r2, [pc, #412]	; (80044f0 <DMA_SetConfig+0x25c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d022      	beq.n	800439e <DMA_SetConfig+0x10a>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a65      	ldr	r2, [pc, #404]	; (80044f4 <DMA_SetConfig+0x260>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d01d      	beq.n	800439e <DMA_SetConfig+0x10a>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a64      	ldr	r2, [pc, #400]	; (80044f8 <DMA_SetConfig+0x264>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d018      	beq.n	800439e <DMA_SetConfig+0x10a>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a62      	ldr	r2, [pc, #392]	; (80044fc <DMA_SetConfig+0x268>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d013      	beq.n	800439e <DMA_SetConfig+0x10a>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a61      	ldr	r2, [pc, #388]	; (8004500 <DMA_SetConfig+0x26c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d00e      	beq.n	800439e <DMA_SetConfig+0x10a>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a5f      	ldr	r2, [pc, #380]	; (8004504 <DMA_SetConfig+0x270>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d009      	beq.n	800439e <DMA_SetConfig+0x10a>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a5e      	ldr	r2, [pc, #376]	; (8004508 <DMA_SetConfig+0x274>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d004      	beq.n	800439e <DMA_SetConfig+0x10a>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a5c      	ldr	r2, [pc, #368]	; (800450c <DMA_SetConfig+0x278>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d101      	bne.n	80043a2 <DMA_SetConfig+0x10e>
 800439e:	2301      	movs	r3, #1
 80043a0:	e000      	b.n	80043a4 <DMA_SetConfig+0x110>
 80043a2:	2300      	movs	r3, #0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00d      	beq.n	80043c4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80043b0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d004      	beq.n	80043c4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80043c2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a39      	ldr	r2, [pc, #228]	; (80044b0 <DMA_SetConfig+0x21c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d04a      	beq.n	8004464 <DMA_SetConfig+0x1d0>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a38      	ldr	r2, [pc, #224]	; (80044b4 <DMA_SetConfig+0x220>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d045      	beq.n	8004464 <DMA_SetConfig+0x1d0>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a36      	ldr	r2, [pc, #216]	; (80044b8 <DMA_SetConfig+0x224>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d040      	beq.n	8004464 <DMA_SetConfig+0x1d0>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a35      	ldr	r2, [pc, #212]	; (80044bc <DMA_SetConfig+0x228>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d03b      	beq.n	8004464 <DMA_SetConfig+0x1d0>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a33      	ldr	r2, [pc, #204]	; (80044c0 <DMA_SetConfig+0x22c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d036      	beq.n	8004464 <DMA_SetConfig+0x1d0>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a32      	ldr	r2, [pc, #200]	; (80044c4 <DMA_SetConfig+0x230>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d031      	beq.n	8004464 <DMA_SetConfig+0x1d0>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a30      	ldr	r2, [pc, #192]	; (80044c8 <DMA_SetConfig+0x234>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d02c      	beq.n	8004464 <DMA_SetConfig+0x1d0>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a2f      	ldr	r2, [pc, #188]	; (80044cc <DMA_SetConfig+0x238>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d027      	beq.n	8004464 <DMA_SetConfig+0x1d0>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a2d      	ldr	r2, [pc, #180]	; (80044d0 <DMA_SetConfig+0x23c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d022      	beq.n	8004464 <DMA_SetConfig+0x1d0>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a2c      	ldr	r2, [pc, #176]	; (80044d4 <DMA_SetConfig+0x240>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d01d      	beq.n	8004464 <DMA_SetConfig+0x1d0>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a2a      	ldr	r2, [pc, #168]	; (80044d8 <DMA_SetConfig+0x244>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d018      	beq.n	8004464 <DMA_SetConfig+0x1d0>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a29      	ldr	r2, [pc, #164]	; (80044dc <DMA_SetConfig+0x248>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d013      	beq.n	8004464 <DMA_SetConfig+0x1d0>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a27      	ldr	r2, [pc, #156]	; (80044e0 <DMA_SetConfig+0x24c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d00e      	beq.n	8004464 <DMA_SetConfig+0x1d0>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a26      	ldr	r2, [pc, #152]	; (80044e4 <DMA_SetConfig+0x250>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d009      	beq.n	8004464 <DMA_SetConfig+0x1d0>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a24      	ldr	r2, [pc, #144]	; (80044e8 <DMA_SetConfig+0x254>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d004      	beq.n	8004464 <DMA_SetConfig+0x1d0>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a23      	ldr	r2, [pc, #140]	; (80044ec <DMA_SetConfig+0x258>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d101      	bne.n	8004468 <DMA_SetConfig+0x1d4>
 8004464:	2301      	movs	r3, #1
 8004466:	e000      	b.n	800446a <DMA_SetConfig+0x1d6>
 8004468:	2300      	movs	r3, #0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d059      	beq.n	8004522 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004472:	f003 031f 	and.w	r3, r3, #31
 8004476:	223f      	movs	r2, #63	; 0x3f
 8004478:	409a      	lsls	r2, r3
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800448c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	2b40      	cmp	r3, #64	; 0x40
 800449c:	d138      	bne.n	8004510 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80044ae:	e086      	b.n	80045be <DMA_SetConfig+0x32a>
 80044b0:	40020010 	.word	0x40020010
 80044b4:	40020028 	.word	0x40020028
 80044b8:	40020040 	.word	0x40020040
 80044bc:	40020058 	.word	0x40020058
 80044c0:	40020070 	.word	0x40020070
 80044c4:	40020088 	.word	0x40020088
 80044c8:	400200a0 	.word	0x400200a0
 80044cc:	400200b8 	.word	0x400200b8
 80044d0:	40020410 	.word	0x40020410
 80044d4:	40020428 	.word	0x40020428
 80044d8:	40020440 	.word	0x40020440
 80044dc:	40020458 	.word	0x40020458
 80044e0:	40020470 	.word	0x40020470
 80044e4:	40020488 	.word	0x40020488
 80044e8:	400204a0 	.word	0x400204a0
 80044ec:	400204b8 	.word	0x400204b8
 80044f0:	58025408 	.word	0x58025408
 80044f4:	5802541c 	.word	0x5802541c
 80044f8:	58025430 	.word	0x58025430
 80044fc:	58025444 	.word	0x58025444
 8004500:	58025458 	.word	0x58025458
 8004504:	5802546c 	.word	0x5802546c
 8004508:	58025480 	.word	0x58025480
 800450c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	60da      	str	r2, [r3, #12]
}
 8004520:	e04d      	b.n	80045be <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a29      	ldr	r2, [pc, #164]	; (80045cc <DMA_SetConfig+0x338>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d022      	beq.n	8004572 <DMA_SetConfig+0x2de>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a27      	ldr	r2, [pc, #156]	; (80045d0 <DMA_SetConfig+0x33c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d01d      	beq.n	8004572 <DMA_SetConfig+0x2de>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a26      	ldr	r2, [pc, #152]	; (80045d4 <DMA_SetConfig+0x340>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d018      	beq.n	8004572 <DMA_SetConfig+0x2de>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a24      	ldr	r2, [pc, #144]	; (80045d8 <DMA_SetConfig+0x344>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d013      	beq.n	8004572 <DMA_SetConfig+0x2de>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a23      	ldr	r2, [pc, #140]	; (80045dc <DMA_SetConfig+0x348>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d00e      	beq.n	8004572 <DMA_SetConfig+0x2de>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a21      	ldr	r2, [pc, #132]	; (80045e0 <DMA_SetConfig+0x34c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d009      	beq.n	8004572 <DMA_SetConfig+0x2de>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a20      	ldr	r2, [pc, #128]	; (80045e4 <DMA_SetConfig+0x350>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d004      	beq.n	8004572 <DMA_SetConfig+0x2de>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a1e      	ldr	r2, [pc, #120]	; (80045e8 <DMA_SetConfig+0x354>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d101      	bne.n	8004576 <DMA_SetConfig+0x2e2>
 8004572:	2301      	movs	r3, #1
 8004574:	e000      	b.n	8004578 <DMA_SetConfig+0x2e4>
 8004576:	2300      	movs	r3, #0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d020      	beq.n	80045be <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	2201      	movs	r2, #1
 8004586:	409a      	lsls	r2, r3
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2b40      	cmp	r3, #64	; 0x40
 800459a:	d108      	bne.n	80045ae <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	60da      	str	r2, [r3, #12]
}
 80045ac:	e007      	b.n	80045be <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	60da      	str	r2, [r3, #12]
}
 80045be:	bf00      	nop
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	58025408 	.word	0x58025408
 80045d0:	5802541c 	.word	0x5802541c
 80045d4:	58025430 	.word	0x58025430
 80045d8:	58025444 	.word	0x58025444
 80045dc:	58025458 	.word	0x58025458
 80045e0:	5802546c 	.word	0x5802546c
 80045e4:	58025480 	.word	0x58025480
 80045e8:	58025494 	.word	0x58025494

080045ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a42      	ldr	r2, [pc, #264]	; (8004704 <DMA_CalcBaseAndBitshift+0x118>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d04a      	beq.n	8004694 <DMA_CalcBaseAndBitshift+0xa8>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a41      	ldr	r2, [pc, #260]	; (8004708 <DMA_CalcBaseAndBitshift+0x11c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d045      	beq.n	8004694 <DMA_CalcBaseAndBitshift+0xa8>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a3f      	ldr	r2, [pc, #252]	; (800470c <DMA_CalcBaseAndBitshift+0x120>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d040      	beq.n	8004694 <DMA_CalcBaseAndBitshift+0xa8>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a3e      	ldr	r2, [pc, #248]	; (8004710 <DMA_CalcBaseAndBitshift+0x124>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d03b      	beq.n	8004694 <DMA_CalcBaseAndBitshift+0xa8>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a3c      	ldr	r2, [pc, #240]	; (8004714 <DMA_CalcBaseAndBitshift+0x128>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d036      	beq.n	8004694 <DMA_CalcBaseAndBitshift+0xa8>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a3b      	ldr	r2, [pc, #236]	; (8004718 <DMA_CalcBaseAndBitshift+0x12c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d031      	beq.n	8004694 <DMA_CalcBaseAndBitshift+0xa8>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a39      	ldr	r2, [pc, #228]	; (800471c <DMA_CalcBaseAndBitshift+0x130>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d02c      	beq.n	8004694 <DMA_CalcBaseAndBitshift+0xa8>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a38      	ldr	r2, [pc, #224]	; (8004720 <DMA_CalcBaseAndBitshift+0x134>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d027      	beq.n	8004694 <DMA_CalcBaseAndBitshift+0xa8>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a36      	ldr	r2, [pc, #216]	; (8004724 <DMA_CalcBaseAndBitshift+0x138>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d022      	beq.n	8004694 <DMA_CalcBaseAndBitshift+0xa8>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a35      	ldr	r2, [pc, #212]	; (8004728 <DMA_CalcBaseAndBitshift+0x13c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d01d      	beq.n	8004694 <DMA_CalcBaseAndBitshift+0xa8>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a33      	ldr	r2, [pc, #204]	; (800472c <DMA_CalcBaseAndBitshift+0x140>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d018      	beq.n	8004694 <DMA_CalcBaseAndBitshift+0xa8>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a32      	ldr	r2, [pc, #200]	; (8004730 <DMA_CalcBaseAndBitshift+0x144>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d013      	beq.n	8004694 <DMA_CalcBaseAndBitshift+0xa8>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a30      	ldr	r2, [pc, #192]	; (8004734 <DMA_CalcBaseAndBitshift+0x148>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d00e      	beq.n	8004694 <DMA_CalcBaseAndBitshift+0xa8>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a2f      	ldr	r2, [pc, #188]	; (8004738 <DMA_CalcBaseAndBitshift+0x14c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d009      	beq.n	8004694 <DMA_CalcBaseAndBitshift+0xa8>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a2d      	ldr	r2, [pc, #180]	; (800473c <DMA_CalcBaseAndBitshift+0x150>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d004      	beq.n	8004694 <DMA_CalcBaseAndBitshift+0xa8>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a2c      	ldr	r2, [pc, #176]	; (8004740 <DMA_CalcBaseAndBitshift+0x154>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d101      	bne.n	8004698 <DMA_CalcBaseAndBitshift+0xac>
 8004694:	2301      	movs	r3, #1
 8004696:	e000      	b.n	800469a <DMA_CalcBaseAndBitshift+0xae>
 8004698:	2300      	movs	r3, #0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d024      	beq.n	80046e8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	3b10      	subs	r3, #16
 80046a6:	4a27      	ldr	r2, [pc, #156]	; (8004744 <DMA_CalcBaseAndBitshift+0x158>)
 80046a8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ac:	091b      	lsrs	r3, r3, #4
 80046ae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	4a24      	ldr	r2, [pc, #144]	; (8004748 <DMA_CalcBaseAndBitshift+0x15c>)
 80046b8:	5cd3      	ldrb	r3, [r2, r3]
 80046ba:	461a      	mov	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d908      	bls.n	80046d8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	461a      	mov	r2, r3
 80046cc:	4b1f      	ldr	r3, [pc, #124]	; (800474c <DMA_CalcBaseAndBitshift+0x160>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	1d1a      	adds	r2, r3, #4
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	659a      	str	r2, [r3, #88]	; 0x58
 80046d6:	e00d      	b.n	80046f4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	4b1b      	ldr	r3, [pc, #108]	; (800474c <DMA_CalcBaseAndBitshift+0x160>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6593      	str	r3, [r2, #88]	; 0x58
 80046e6:	e005      	b.n	80046f4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	40020010 	.word	0x40020010
 8004708:	40020028 	.word	0x40020028
 800470c:	40020040 	.word	0x40020040
 8004710:	40020058 	.word	0x40020058
 8004714:	40020070 	.word	0x40020070
 8004718:	40020088 	.word	0x40020088
 800471c:	400200a0 	.word	0x400200a0
 8004720:	400200b8 	.word	0x400200b8
 8004724:	40020410 	.word	0x40020410
 8004728:	40020428 	.word	0x40020428
 800472c:	40020440 	.word	0x40020440
 8004730:	40020458 	.word	0x40020458
 8004734:	40020470 	.word	0x40020470
 8004738:	40020488 	.word	0x40020488
 800473c:	400204a0 	.word	0x400204a0
 8004740:	400204b8 	.word	0x400204b8
 8004744:	aaaaaaab 	.word	0xaaaaaaab
 8004748:	0800a1b0 	.word	0x0800a1b0
 800474c:	fffffc00 	.word	0xfffffc00

08004750 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d120      	bne.n	80047a6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004768:	2b03      	cmp	r3, #3
 800476a:	d858      	bhi.n	800481e <DMA_CheckFifoParam+0xce>
 800476c:	a201      	add	r2, pc, #4	; (adr r2, 8004774 <DMA_CheckFifoParam+0x24>)
 800476e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004772:	bf00      	nop
 8004774:	08004785 	.word	0x08004785
 8004778:	08004797 	.word	0x08004797
 800477c:	08004785 	.word	0x08004785
 8004780:	0800481f 	.word	0x0800481f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004788:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d048      	beq.n	8004822 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004794:	e045      	b.n	8004822 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800479e:	d142      	bne.n	8004826 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80047a4:	e03f      	b.n	8004826 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ae:	d123      	bne.n	80047f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b4:	2b03      	cmp	r3, #3
 80047b6:	d838      	bhi.n	800482a <DMA_CheckFifoParam+0xda>
 80047b8:	a201      	add	r2, pc, #4	; (adr r2, 80047c0 <DMA_CheckFifoParam+0x70>)
 80047ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047be:	bf00      	nop
 80047c0:	080047d1 	.word	0x080047d1
 80047c4:	080047d7 	.word	0x080047d7
 80047c8:	080047d1 	.word	0x080047d1
 80047cc:	080047e9 	.word	0x080047e9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	73fb      	strb	r3, [r7, #15]
        break;
 80047d4:	e030      	b.n	8004838 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d025      	beq.n	800482e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80047e6:	e022      	b.n	800482e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047f0:	d11f      	bne.n	8004832 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80047f6:	e01c      	b.n	8004832 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d902      	bls.n	8004806 <DMA_CheckFifoParam+0xb6>
 8004800:	2b03      	cmp	r3, #3
 8004802:	d003      	beq.n	800480c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004804:	e018      	b.n	8004838 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	73fb      	strb	r3, [r7, #15]
        break;
 800480a:	e015      	b.n	8004838 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00e      	beq.n	8004836 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	73fb      	strb	r3, [r7, #15]
    break;
 800481c:	e00b      	b.n	8004836 <DMA_CheckFifoParam+0xe6>
        break;
 800481e:	bf00      	nop
 8004820:	e00a      	b.n	8004838 <DMA_CheckFifoParam+0xe8>
        break;
 8004822:	bf00      	nop
 8004824:	e008      	b.n	8004838 <DMA_CheckFifoParam+0xe8>
        break;
 8004826:	bf00      	nop
 8004828:	e006      	b.n	8004838 <DMA_CheckFifoParam+0xe8>
        break;
 800482a:	bf00      	nop
 800482c:	e004      	b.n	8004838 <DMA_CheckFifoParam+0xe8>
        break;
 800482e:	bf00      	nop
 8004830:	e002      	b.n	8004838 <DMA_CheckFifoParam+0xe8>
        break;
 8004832:	bf00      	nop
 8004834:	e000      	b.n	8004838 <DMA_CheckFifoParam+0xe8>
    break;
 8004836:	bf00      	nop
    }
  }

  return status;
 8004838:	7bfb      	ldrb	r3, [r7, #15]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop

08004848 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a38      	ldr	r2, [pc, #224]	; (800493c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d022      	beq.n	80048a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a36      	ldr	r2, [pc, #216]	; (8004940 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d01d      	beq.n	80048a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a35      	ldr	r2, [pc, #212]	; (8004944 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d018      	beq.n	80048a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a33      	ldr	r2, [pc, #204]	; (8004948 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d013      	beq.n	80048a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a32      	ldr	r2, [pc, #200]	; (800494c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d00e      	beq.n	80048a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a30      	ldr	r2, [pc, #192]	; (8004950 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d009      	beq.n	80048a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a2f      	ldr	r2, [pc, #188]	; (8004954 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d004      	beq.n	80048a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a2d      	ldr	r2, [pc, #180]	; (8004958 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d101      	bne.n	80048aa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80048a6:	2301      	movs	r3, #1
 80048a8:	e000      	b.n	80048ac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80048aa:	2300      	movs	r3, #0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01a      	beq.n	80048e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	3b08      	subs	r3, #8
 80048b8:	4a28      	ldr	r2, [pc, #160]	; (800495c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80048ba:	fba2 2303 	umull	r2, r3, r2, r3
 80048be:	091b      	lsrs	r3, r3, #4
 80048c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	4b26      	ldr	r3, [pc, #152]	; (8004960 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	461a      	mov	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a24      	ldr	r2, [pc, #144]	; (8004964 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80048d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f003 031f 	and.w	r3, r3, #31
 80048dc:	2201      	movs	r2, #1
 80048de:	409a      	lsls	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80048e4:	e024      	b.n	8004930 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	3b10      	subs	r3, #16
 80048ee:	4a1e      	ldr	r2, [pc, #120]	; (8004968 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80048f0:	fba2 2303 	umull	r2, r3, r2, r3
 80048f4:	091b      	lsrs	r3, r3, #4
 80048f6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	4a1c      	ldr	r2, [pc, #112]	; (800496c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d806      	bhi.n	800490e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	4a1b      	ldr	r2, [pc, #108]	; (8004970 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d902      	bls.n	800490e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	3308      	adds	r3, #8
 800490c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	4b18      	ldr	r3, [pc, #96]	; (8004974 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004912:	4413      	add	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	461a      	mov	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a16      	ldr	r2, [pc, #88]	; (8004978 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004920:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f003 031f 	and.w	r3, r3, #31
 8004928:	2201      	movs	r2, #1
 800492a:	409a      	lsls	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004930:	bf00      	nop
 8004932:	3714      	adds	r7, #20
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	58025408 	.word	0x58025408
 8004940:	5802541c 	.word	0x5802541c
 8004944:	58025430 	.word	0x58025430
 8004948:	58025444 	.word	0x58025444
 800494c:	58025458 	.word	0x58025458
 8004950:	5802546c 	.word	0x5802546c
 8004954:	58025480 	.word	0x58025480
 8004958:	58025494 	.word	0x58025494
 800495c:	cccccccd 	.word	0xcccccccd
 8004960:	16009600 	.word	0x16009600
 8004964:	58025880 	.word	0x58025880
 8004968:	aaaaaaab 	.word	0xaaaaaaab
 800496c:	400204b8 	.word	0x400204b8
 8004970:	4002040f 	.word	0x4002040f
 8004974:	10008200 	.word	0x10008200
 8004978:	40020880 	.word	0x40020880

0800497c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	b2db      	uxtb	r3, r3
 800498a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d04a      	beq.n	8004a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2b08      	cmp	r3, #8
 8004996:	d847      	bhi.n	8004a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a25      	ldr	r2, [pc, #148]	; (8004a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d022      	beq.n	80049e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a24      	ldr	r2, [pc, #144]	; (8004a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d01d      	beq.n	80049e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a22      	ldr	r2, [pc, #136]	; (8004a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d018      	beq.n	80049e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a21      	ldr	r2, [pc, #132]	; (8004a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d013      	beq.n	80049e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a1f      	ldr	r2, [pc, #124]	; (8004a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00e      	beq.n	80049e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a1e      	ldr	r2, [pc, #120]	; (8004a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d009      	beq.n	80049e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a1c      	ldr	r2, [pc, #112]	; (8004a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d004      	beq.n	80049e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a1b      	ldr	r2, [pc, #108]	; (8004a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d101      	bne.n	80049ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80049e8:	2301      	movs	r3, #1
 80049ea:	e000      	b.n	80049ee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80049ec:	2300      	movs	r3, #0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	4b17      	ldr	r3, [pc, #92]	; (8004a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80049f6:	4413      	add	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	461a      	mov	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a15      	ldr	r2, [pc, #84]	; (8004a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004a04:	671a      	str	r2, [r3, #112]	; 0x70
 8004a06:	e009      	b.n	8004a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4b14      	ldr	r3, [pc, #80]	; (8004a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	461a      	mov	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a11      	ldr	r2, [pc, #68]	; (8004a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004a1a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	2201      	movs	r2, #1
 8004a22:	409a      	lsls	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004a28:	bf00      	nop
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	58025408 	.word	0x58025408
 8004a38:	5802541c 	.word	0x5802541c
 8004a3c:	58025430 	.word	0x58025430
 8004a40:	58025444 	.word	0x58025444
 8004a44:	58025458 	.word	0x58025458
 8004a48:	5802546c 	.word	0x5802546c
 8004a4c:	58025480 	.word	0x58025480
 8004a50:	58025494 	.word	0x58025494
 8004a54:	1600963f 	.word	0x1600963f
 8004a58:	58025940 	.word	0x58025940
 8004a5c:	1000823f 	.word	0x1000823f
 8004a60:	40020940 	.word	0x40020940

08004a64 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e04f      	b.n	8004b16 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7fc fa48 	bl	8000f20 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	4b20      	ldr	r3, [pc, #128]	; (8004b20 <HAL_DMA2D_Init+0xbc>)
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6851      	ldr	r1, [r2, #4]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	69d2      	ldr	r2, [r2, #28]
 8004aaa:	4311      	orrs	r1, r2
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aba:	4b1a      	ldr	r3, [pc, #104]	; (8004b24 <HAL_DMA2D_Init+0xc0>)
 8004abc:	4013      	ands	r3, r2
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6891      	ldr	r1, [r2, #8]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6992      	ldr	r2, [r2, #24]
 8004ac6:	4311      	orrs	r1, r2
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6812      	ldr	r2, [r2, #0]
 8004acc:	430b      	orrs	r3, r1
 8004ace:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ad6:	4b14      	ldr	r3, [pc, #80]	; (8004b28 <HAL_DMA2D_Init+0xc4>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	68d1      	ldr	r1, [r2, #12]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6812      	ldr	r2, [r2, #0]
 8004ae2:	430b      	orrs	r3, r1
 8004ae4:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aec:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	051a      	lsls	r2, r3, #20
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	055b      	lsls	r3, r3, #21
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	fff8ffbf 	.word	0xfff8ffbf
 8004b24:	fffffef8 	.word	0xfffffef8
 8004b28:	ffff0000 	.word	0xffff0000

08004b2c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_DMA2D_ConfigLayer+0x24>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e092      	b.n	8004c76 <HAL_DMA2D_ConfigLayer+0x14a>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	4613      	mov	r3, r2
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	1a9b      	subs	r3, r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	3328      	adds	r3, #40	; 0x28
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	4413      	add	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	041b      	lsls	r3, r3, #16
 8004b7c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004b84:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8004b90:	4b3c      	ldr	r3, [pc, #240]	; (8004c84 <HAL_DMA2D_ConfigLayer+0x158>)
 8004b92:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2b0a      	cmp	r3, #10
 8004b9a:	d003      	beq.n	8004ba4 <HAL_DMA2D_ConfigLayer+0x78>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	2b09      	cmp	r3, #9
 8004ba2:	d107      	bne.n	8004bb4 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	e005      	b.n	8004bc0 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	061b      	lsls	r3, r3, #24
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d120      	bne.n	8004c08 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	43db      	mvns	r3, r3
 8004bd0:	ea02 0103 	and.w	r1, r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	6812      	ldr	r2, [r2, #0]
 8004be6:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2b0a      	cmp	r3, #10
 8004bee:	d003      	beq.n	8004bf8 <HAL_DMA2D_ConfigLayer+0xcc>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b09      	cmp	r3, #9
 8004bf6:	d135      	bne.n	8004c64 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	68da      	ldr	r2, [r3, #12]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004c04:	629a      	str	r2, [r3, #40]	; 0x28
 8004c06:	e02d      	b.n	8004c64 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b0b      	cmp	r3, #11
 8004c0e:	d109      	bne.n	8004c24 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	049b      	lsls	r3, r3, #18
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8004c22:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	69da      	ldr	r2, [r3, #28]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	ea02 0103 	and.w	r1, r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	6812      	ldr	r2, [r2, #0]
 8004c44:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b0a      	cmp	r3, #10
 8004c4c:	d003      	beq.n	8004c56 <HAL_DMA2D_ConfigLayer+0x12a>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2b09      	cmp	r3, #9
 8004c54:	d106      	bne.n	8004c64 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004c62:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	371c      	adds	r7, #28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	ff33000f 	.word	0xff33000f

08004c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b089      	sub	sp, #36	; 0x24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004c96:	4b89      	ldr	r3, [pc, #548]	; (8004ebc <HAL_GPIO_Init+0x234>)
 8004c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c9a:	e194      	b.n	8004fc6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca8:	4013      	ands	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f000 8186 	beq.w	8004fc0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f003 0303 	and.w	r3, r3, #3
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d005      	beq.n	8004ccc <HAL_GPIO_Init+0x44>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f003 0303 	and.w	r3, r3, #3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d130      	bne.n	8004d2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	2203      	movs	r2, #3
 8004cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d02:	2201      	movs	r2, #1
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0a:	43db      	mvns	r3, r3
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	091b      	lsrs	r3, r3, #4
 8004d18:	f003 0201 	and.w	r2, r3, #1
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d017      	beq.n	8004d6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	2203      	movs	r2, #3
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	43db      	mvns	r3, r3
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d123      	bne.n	8004dbe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	08da      	lsrs	r2, r3, #3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3208      	adds	r2, #8
 8004d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	220f      	movs	r2, #15
 8004d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d92:	43db      	mvns	r3, r3
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	4013      	ands	r3, r2
 8004d98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	691a      	ldr	r2, [r3, #16]
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	f003 0307 	and.w	r3, r3, #7
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	fa02 f303 	lsl.w	r3, r2, r3
 8004daa:	69ba      	ldr	r2, [r7, #24]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	08da      	lsrs	r2, r3, #3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3208      	adds	r2, #8
 8004db8:	69b9      	ldr	r1, [r7, #24]
 8004dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	2203      	movs	r2, #3
 8004dca:	fa02 f303 	lsl.w	r3, r2, r3
 8004dce:	43db      	mvns	r3, r3
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f003 0203 	and.w	r2, r3, #3
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	fa02 f303 	lsl.w	r3, r2, r3
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 80e0 	beq.w	8004fc0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e00:	4b2f      	ldr	r3, [pc, #188]	; (8004ec0 <HAL_GPIO_Init+0x238>)
 8004e02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e06:	4a2e      	ldr	r2, [pc, #184]	; (8004ec0 <HAL_GPIO_Init+0x238>)
 8004e08:	f043 0302 	orr.w	r3, r3, #2
 8004e0c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004e10:	4b2b      	ldr	r3, [pc, #172]	; (8004ec0 <HAL_GPIO_Init+0x238>)
 8004e12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e1e:	4a29      	ldr	r2, [pc, #164]	; (8004ec4 <HAL_GPIO_Init+0x23c>)
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	089b      	lsrs	r3, r3, #2
 8004e24:	3302      	adds	r3, #2
 8004e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	f003 0303 	and.w	r3, r3, #3
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	220f      	movs	r2, #15
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a20      	ldr	r2, [pc, #128]	; (8004ec8 <HAL_GPIO_Init+0x240>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d052      	beq.n	8004ef0 <HAL_GPIO_Init+0x268>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a1f      	ldr	r2, [pc, #124]	; (8004ecc <HAL_GPIO_Init+0x244>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d031      	beq.n	8004eb6 <HAL_GPIO_Init+0x22e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a1e      	ldr	r2, [pc, #120]	; (8004ed0 <HAL_GPIO_Init+0x248>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d02b      	beq.n	8004eb2 <HAL_GPIO_Init+0x22a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a1d      	ldr	r2, [pc, #116]	; (8004ed4 <HAL_GPIO_Init+0x24c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d025      	beq.n	8004eae <HAL_GPIO_Init+0x226>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a1c      	ldr	r2, [pc, #112]	; (8004ed8 <HAL_GPIO_Init+0x250>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d01f      	beq.n	8004eaa <HAL_GPIO_Init+0x222>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a1b      	ldr	r2, [pc, #108]	; (8004edc <HAL_GPIO_Init+0x254>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d019      	beq.n	8004ea6 <HAL_GPIO_Init+0x21e>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a1a      	ldr	r2, [pc, #104]	; (8004ee0 <HAL_GPIO_Init+0x258>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d013      	beq.n	8004ea2 <HAL_GPIO_Init+0x21a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a19      	ldr	r2, [pc, #100]	; (8004ee4 <HAL_GPIO_Init+0x25c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00d      	beq.n	8004e9e <HAL_GPIO_Init+0x216>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a18      	ldr	r2, [pc, #96]	; (8004ee8 <HAL_GPIO_Init+0x260>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d007      	beq.n	8004e9a <HAL_GPIO_Init+0x212>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a17      	ldr	r2, [pc, #92]	; (8004eec <HAL_GPIO_Init+0x264>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d101      	bne.n	8004e96 <HAL_GPIO_Init+0x20e>
 8004e92:	2309      	movs	r3, #9
 8004e94:	e02d      	b.n	8004ef2 <HAL_GPIO_Init+0x26a>
 8004e96:	230a      	movs	r3, #10
 8004e98:	e02b      	b.n	8004ef2 <HAL_GPIO_Init+0x26a>
 8004e9a:	2308      	movs	r3, #8
 8004e9c:	e029      	b.n	8004ef2 <HAL_GPIO_Init+0x26a>
 8004e9e:	2307      	movs	r3, #7
 8004ea0:	e027      	b.n	8004ef2 <HAL_GPIO_Init+0x26a>
 8004ea2:	2306      	movs	r3, #6
 8004ea4:	e025      	b.n	8004ef2 <HAL_GPIO_Init+0x26a>
 8004ea6:	2305      	movs	r3, #5
 8004ea8:	e023      	b.n	8004ef2 <HAL_GPIO_Init+0x26a>
 8004eaa:	2304      	movs	r3, #4
 8004eac:	e021      	b.n	8004ef2 <HAL_GPIO_Init+0x26a>
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e01f      	b.n	8004ef2 <HAL_GPIO_Init+0x26a>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e01d      	b.n	8004ef2 <HAL_GPIO_Init+0x26a>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e01b      	b.n	8004ef2 <HAL_GPIO_Init+0x26a>
 8004eba:	bf00      	nop
 8004ebc:	58000080 	.word	0x58000080
 8004ec0:	58024400 	.word	0x58024400
 8004ec4:	58000400 	.word	0x58000400
 8004ec8:	58020000 	.word	0x58020000
 8004ecc:	58020400 	.word	0x58020400
 8004ed0:	58020800 	.word	0x58020800
 8004ed4:	58020c00 	.word	0x58020c00
 8004ed8:	58021000 	.word	0x58021000
 8004edc:	58021400 	.word	0x58021400
 8004ee0:	58021800 	.word	0x58021800
 8004ee4:	58021c00 	.word	0x58021c00
 8004ee8:	58022000 	.word	0x58022000
 8004eec:	58022400 	.word	0x58022400
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	69fa      	ldr	r2, [r7, #28]
 8004ef4:	f002 0203 	and.w	r2, r2, #3
 8004ef8:	0092      	lsls	r2, r2, #2
 8004efa:	4093      	lsls	r3, r2
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f02:	4938      	ldr	r1, [pc, #224]	; (8004fe4 <HAL_GPIO_Init+0x35c>)
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	089b      	lsrs	r3, r3, #2
 8004f08:	3302      	adds	r3, #2
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004f36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004f64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	43db      	mvns	r3, r3
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d003      	beq.n	8004f90 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	43db      	mvns	r3, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f47f ae63 	bne.w	8004c9c <HAL_GPIO_Init+0x14>
  }
}
 8004fd6:	bf00      	nop
 8004fd8:	bf00      	nop
 8004fda:	3724      	adds	r7, #36	; 0x24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	58000400 	.word	0x58000400

08004fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	807b      	strh	r3, [r7, #2]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ff8:	787b      	ldrb	r3, [r7, #1]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ffe:	887a      	ldrh	r2, [r7, #2]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005004:	e003      	b.n	800500e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005006:	887b      	ldrh	r3, [r7, #2]
 8005008:	041a      	lsls	r2, r3, #16
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	619a      	str	r2, [r3, #24]
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800501a:	b480      	push	{r7}
 800501c:	b085      	sub	sp, #20
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	460b      	mov	r3, r1
 8005024:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800502c:	887a      	ldrh	r2, [r7, #2]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	4013      	ands	r3, r2
 8005032:	041a      	lsls	r2, r3, #16
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	43d9      	mvns	r1, r3
 8005038:	887b      	ldrh	r3, [r7, #2]
 800503a:	400b      	ands	r3, r1
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	619a      	str	r2, [r3, #24]
}
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
	...

08005050 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e07f      	b.n	8005162 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d106      	bne.n	800507c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7fb ff74 	bl	8000f64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2224      	movs	r2, #36	; 0x24
 8005080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0201 	bic.w	r2, r2, #1
 8005092:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80050a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d107      	bne.n	80050ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050c6:	609a      	str	r2, [r3, #8]
 80050c8:	e006      	b.n	80050d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689a      	ldr	r2, [r3, #8]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80050d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d104      	bne.n	80050ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6859      	ldr	r1, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	4b1d      	ldr	r3, [pc, #116]	; (800516c <HAL_I2C_Init+0x11c>)
 80050f6:	430b      	orrs	r3, r1
 80050f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005108:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691a      	ldr	r2, [r3, #16]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	69d9      	ldr	r1, [r3, #28]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1a      	ldr	r2, [r3, #32]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2220      	movs	r2, #32
 800514e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	02008000 	.word	0x02008000

08005170 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b20      	cmp	r3, #32
 8005184:	d138      	bne.n	80051f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005190:	2302      	movs	r3, #2
 8005192:	e032      	b.n	80051fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2224      	movs	r2, #36	; 0x24
 80051a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0201 	bic.w	r2, r2, #1
 80051b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6819      	ldr	r1, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0201 	orr.w	r2, r2, #1
 80051e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2220      	movs	r2, #32
 80051e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051f4:	2300      	movs	r3, #0
 80051f6:	e000      	b.n	80051fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051f8:	2302      	movs	r3, #2
  }
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005206:	b480      	push	{r7}
 8005208:	b085      	sub	sp, #20
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b20      	cmp	r3, #32
 800521a:	d139      	bne.n	8005290 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005222:	2b01      	cmp	r3, #1
 8005224:	d101      	bne.n	800522a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005226:	2302      	movs	r3, #2
 8005228:	e033      	b.n	8005292 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2224      	movs	r2, #36	; 0x24
 8005236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 0201 	bic.w	r2, r2, #1
 8005248:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005258:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	021b      	lsls	r3, r3, #8
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	4313      	orrs	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0201 	orr.w	r2, r2, #1
 800527a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800528c:	2300      	movs	r3, #0
 800528e:	e000      	b.n	8005292 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005290:	2302      	movs	r3, #2
  }
}
 8005292:	4618      	mov	r0, r3
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
	...

080052a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80052a8:	4b19      	ldr	r3, [pc, #100]	; (8005310 <HAL_PWREx_ConfigSupply+0x70>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b04      	cmp	r3, #4
 80052b2:	d00a      	beq.n	80052ca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80052b4:	4b16      	ldr	r3, [pc, #88]	; (8005310 <HAL_PWREx_ConfigSupply+0x70>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d001      	beq.n	80052c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e01f      	b.n	8005306 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	e01d      	b.n	8005306 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80052ca:	4b11      	ldr	r3, [pc, #68]	; (8005310 <HAL_PWREx_ConfigSupply+0x70>)
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f023 0207 	bic.w	r2, r3, #7
 80052d2:	490f      	ldr	r1, [pc, #60]	; (8005310 <HAL_PWREx_ConfigSupply+0x70>)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80052da:	f7fc f985 	bl	80015e8 <HAL_GetTick>
 80052de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052e0:	e009      	b.n	80052f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80052e2:	f7fc f981 	bl	80015e8 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052f0:	d901      	bls.n	80052f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e007      	b.n	8005306 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052f6:	4b06      	ldr	r3, [pc, #24]	; (8005310 <HAL_PWREx_ConfigSupply+0x70>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005302:	d1ee      	bne.n	80052e2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	58024800 	.word	0x58024800

08005314 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b08c      	sub	sp, #48	; 0x30
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d102      	bne.n	8005328 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	f000 bc1d 	b.w	8005b62 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 8087 	beq.w	8005444 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005336:	4b99      	ldr	r3, [pc, #612]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800533e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005340:	4b96      	ldr	r3, [pc, #600]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005348:	2b10      	cmp	r3, #16
 800534a:	d007      	beq.n	800535c <HAL_RCC_OscConfig+0x48>
 800534c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534e:	2b18      	cmp	r3, #24
 8005350:	d110      	bne.n	8005374 <HAL_RCC_OscConfig+0x60>
 8005352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005354:	f003 0303 	and.w	r3, r3, #3
 8005358:	2b02      	cmp	r3, #2
 800535a:	d10b      	bne.n	8005374 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800535c:	4b8f      	ldr	r3, [pc, #572]	; (800559c <HAL_RCC_OscConfig+0x288>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d06c      	beq.n	8005442 <HAL_RCC_OscConfig+0x12e>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d168      	bne.n	8005442 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e3f6      	b.n	8005b62 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800537c:	d106      	bne.n	800538c <HAL_RCC_OscConfig+0x78>
 800537e:	4b87      	ldr	r3, [pc, #540]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a86      	ldr	r2, [pc, #536]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	e02e      	b.n	80053ea <HAL_RCC_OscConfig+0xd6>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10c      	bne.n	80053ae <HAL_RCC_OscConfig+0x9a>
 8005394:	4b81      	ldr	r3, [pc, #516]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a80      	ldr	r2, [pc, #512]	; (800559c <HAL_RCC_OscConfig+0x288>)
 800539a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	4b7e      	ldr	r3, [pc, #504]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a7d      	ldr	r2, [pc, #500]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80053a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	e01d      	b.n	80053ea <HAL_RCC_OscConfig+0xd6>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053b6:	d10c      	bne.n	80053d2 <HAL_RCC_OscConfig+0xbe>
 80053b8:	4b78      	ldr	r3, [pc, #480]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a77      	ldr	r2, [pc, #476]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80053be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053c2:	6013      	str	r3, [r2, #0]
 80053c4:	4b75      	ldr	r3, [pc, #468]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a74      	ldr	r2, [pc, #464]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80053ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053ce:	6013      	str	r3, [r2, #0]
 80053d0:	e00b      	b.n	80053ea <HAL_RCC_OscConfig+0xd6>
 80053d2:	4b72      	ldr	r3, [pc, #456]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a71      	ldr	r2, [pc, #452]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80053d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	4b6f      	ldr	r3, [pc, #444]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a6e      	ldr	r2, [pc, #440]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80053e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d013      	beq.n	800541a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f2:	f7fc f8f9 	bl	80015e8 <HAL_GetTick>
 80053f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053f8:	e008      	b.n	800540c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053fa:	f7fc f8f5 	bl	80015e8 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b64      	cmp	r3, #100	; 0x64
 8005406:	d901      	bls.n	800540c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e3aa      	b.n	8005b62 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800540c:	4b63      	ldr	r3, [pc, #396]	; (800559c <HAL_RCC_OscConfig+0x288>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0f0      	beq.n	80053fa <HAL_RCC_OscConfig+0xe6>
 8005418:	e014      	b.n	8005444 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541a:	f7fc f8e5 	bl	80015e8 <HAL_GetTick>
 800541e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005420:	e008      	b.n	8005434 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005422:	f7fc f8e1 	bl	80015e8 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b64      	cmp	r3, #100	; 0x64
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e396      	b.n	8005b62 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005434:	4b59      	ldr	r3, [pc, #356]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1f0      	bne.n	8005422 <HAL_RCC_OscConfig+0x10e>
 8005440:	e000      	b.n	8005444 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005442:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 80cb 	beq.w	80055e8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005452:	4b52      	ldr	r3, [pc, #328]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800545a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800545c:	4b4f      	ldr	r3, [pc, #316]	; (800559c <HAL_RCC_OscConfig+0x288>)
 800545e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005460:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d007      	beq.n	8005478 <HAL_RCC_OscConfig+0x164>
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	2b18      	cmp	r3, #24
 800546c:	d156      	bne.n	800551c <HAL_RCC_OscConfig+0x208>
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	f003 0303 	and.w	r3, r3, #3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d151      	bne.n	800551c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005478:	4b48      	ldr	r3, [pc, #288]	; (800559c <HAL_RCC_OscConfig+0x288>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0304 	and.w	r3, r3, #4
 8005480:	2b00      	cmp	r3, #0
 8005482:	d005      	beq.n	8005490 <HAL_RCC_OscConfig+0x17c>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e368      	b.n	8005b62 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005490:	4b42      	ldr	r3, [pc, #264]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f023 0219 	bic.w	r2, r3, #25
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	493f      	ldr	r1, [pc, #252]	; (800559c <HAL_RCC_OscConfig+0x288>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054a2:	f7fc f8a1 	bl	80015e8 <HAL_GetTick>
 80054a6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054a8:	e008      	b.n	80054bc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054aa:	f7fc f89d 	bl	80015e8 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d901      	bls.n	80054bc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e352      	b.n	8005b62 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054bc:	4b37      	ldr	r3, [pc, #220]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d0f0      	beq.n	80054aa <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c8:	f7fc f89a 	bl	8001600 <HAL_GetREVID>
 80054cc:	4603      	mov	r3, r0
 80054ce:	f241 0203 	movw	r2, #4099	; 0x1003
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d817      	bhi.n	8005506 <HAL_RCC_OscConfig+0x1f2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	2b40      	cmp	r3, #64	; 0x40
 80054dc:	d108      	bne.n	80054f0 <HAL_RCC_OscConfig+0x1dc>
 80054de:	4b2f      	ldr	r3, [pc, #188]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80054e6:	4a2d      	ldr	r2, [pc, #180]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80054e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054ec:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054ee:	e07b      	b.n	80055e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f0:	4b2a      	ldr	r3, [pc, #168]	; (800559c <HAL_RCC_OscConfig+0x288>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	031b      	lsls	r3, r3, #12
 80054fe:	4927      	ldr	r1, [pc, #156]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005500:	4313      	orrs	r3, r2
 8005502:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005504:	e070      	b.n	80055e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005506:	4b25      	ldr	r3, [pc, #148]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	061b      	lsls	r3, r3, #24
 8005514:	4921      	ldr	r1, [pc, #132]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005516:	4313      	orrs	r3, r2
 8005518:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800551a:	e065      	b.n	80055e8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d048      	beq.n	80055b6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005524:	4b1d      	ldr	r3, [pc, #116]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f023 0219 	bic.w	r2, r3, #25
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	491a      	ldr	r1, [pc, #104]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005532:	4313      	orrs	r3, r2
 8005534:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005536:	f7fc f857 	bl	80015e8 <HAL_GetTick>
 800553a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800553c:	e008      	b.n	8005550 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800553e:	f7fc f853 	bl	80015e8 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d901      	bls.n	8005550 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e308      	b.n	8005b62 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005550:	4b12      	ldr	r3, [pc, #72]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b00      	cmp	r3, #0
 800555a:	d0f0      	beq.n	800553e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800555c:	f7fc f850 	bl	8001600 <HAL_GetREVID>
 8005560:	4603      	mov	r3, r0
 8005562:	f241 0203 	movw	r2, #4099	; 0x1003
 8005566:	4293      	cmp	r3, r2
 8005568:	d81a      	bhi.n	80055a0 <HAL_RCC_OscConfig+0x28c>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	2b40      	cmp	r3, #64	; 0x40
 8005570:	d108      	bne.n	8005584 <HAL_RCC_OscConfig+0x270>
 8005572:	4b0a      	ldr	r3, [pc, #40]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800557a:	4a08      	ldr	r2, [pc, #32]	; (800559c <HAL_RCC_OscConfig+0x288>)
 800557c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005580:	6053      	str	r3, [r2, #4]
 8005582:	e031      	b.n	80055e8 <HAL_RCC_OscConfig+0x2d4>
 8005584:	4b05      	ldr	r3, [pc, #20]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	031b      	lsls	r3, r3, #12
 8005592:	4902      	ldr	r1, [pc, #8]	; (800559c <HAL_RCC_OscConfig+0x288>)
 8005594:	4313      	orrs	r3, r2
 8005596:	604b      	str	r3, [r1, #4]
 8005598:	e026      	b.n	80055e8 <HAL_RCC_OscConfig+0x2d4>
 800559a:	bf00      	nop
 800559c:	58024400 	.word	0x58024400
 80055a0:	4b9a      	ldr	r3, [pc, #616]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	061b      	lsls	r3, r3, #24
 80055ae:	4997      	ldr	r1, [pc, #604]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	604b      	str	r3, [r1, #4]
 80055b4:	e018      	b.n	80055e8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055b6:	4b95      	ldr	r3, [pc, #596]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a94      	ldr	r2, [pc, #592]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 80055bc:	f023 0301 	bic.w	r3, r3, #1
 80055c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c2:	f7fc f811 	bl	80015e8 <HAL_GetTick>
 80055c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055c8:	e008      	b.n	80055dc <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055ca:	f7fc f80d 	bl	80015e8 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d901      	bls.n	80055dc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e2c2      	b.n	8005b62 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055dc:	4b8b      	ldr	r3, [pc, #556]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1f0      	bne.n	80055ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0310 	and.w	r3, r3, #16
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 80a9 	beq.w	8005748 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055f6:	4b85      	ldr	r3, [pc, #532]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005600:	4b82      	ldr	r3, [pc, #520]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 8005602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005604:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	2b08      	cmp	r3, #8
 800560a:	d007      	beq.n	800561c <HAL_RCC_OscConfig+0x308>
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	2b18      	cmp	r3, #24
 8005610:	d13a      	bne.n	8005688 <HAL_RCC_OscConfig+0x374>
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f003 0303 	and.w	r3, r3, #3
 8005618:	2b01      	cmp	r3, #1
 800561a:	d135      	bne.n	8005688 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800561c:	4b7b      	ldr	r3, [pc, #492]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005624:	2b00      	cmp	r3, #0
 8005626:	d005      	beq.n	8005634 <HAL_RCC_OscConfig+0x320>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	2b80      	cmp	r3, #128	; 0x80
 800562e:	d001      	beq.n	8005634 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e296      	b.n	8005b62 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005634:	f7fb ffe4 	bl	8001600 <HAL_GetREVID>
 8005638:	4603      	mov	r3, r0
 800563a:	f241 0203 	movw	r2, #4099	; 0x1003
 800563e:	4293      	cmp	r3, r2
 8005640:	d817      	bhi.n	8005672 <HAL_RCC_OscConfig+0x35e>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	2b20      	cmp	r3, #32
 8005648:	d108      	bne.n	800565c <HAL_RCC_OscConfig+0x348>
 800564a:	4b70      	ldr	r3, [pc, #448]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005652:	4a6e      	ldr	r2, [pc, #440]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 8005654:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005658:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800565a:	e075      	b.n	8005748 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800565c:	4b6b      	ldr	r3, [pc, #428]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	069b      	lsls	r3, r3, #26
 800566a:	4968      	ldr	r1, [pc, #416]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 800566c:	4313      	orrs	r3, r2
 800566e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005670:	e06a      	b.n	8005748 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005672:	4b66      	ldr	r3, [pc, #408]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	061b      	lsls	r3, r3, #24
 8005680:	4962      	ldr	r1, [pc, #392]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 8005682:	4313      	orrs	r3, r2
 8005684:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005686:	e05f      	b.n	8005748 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d042      	beq.n	8005716 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005690:	4b5e      	ldr	r3, [pc, #376]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a5d      	ldr	r2, [pc, #372]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 8005696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800569a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569c:	f7fb ffa4 	bl	80015e8 <HAL_GetTick>
 80056a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80056a4:	f7fb ffa0 	bl	80015e8 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e255      	b.n	8005b62 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056b6:	4b55      	ldr	r3, [pc, #340]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0f0      	beq.n	80056a4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056c2:	f7fb ff9d 	bl	8001600 <HAL_GetREVID>
 80056c6:	4603      	mov	r3, r0
 80056c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d817      	bhi.n	8005700 <HAL_RCC_OscConfig+0x3ec>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	2b20      	cmp	r3, #32
 80056d6:	d108      	bne.n	80056ea <HAL_RCC_OscConfig+0x3d6>
 80056d8:	4b4c      	ldr	r3, [pc, #304]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80056e0:	4a4a      	ldr	r2, [pc, #296]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 80056e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056e6:	6053      	str	r3, [r2, #4]
 80056e8:	e02e      	b.n	8005748 <HAL_RCC_OscConfig+0x434>
 80056ea:	4b48      	ldr	r3, [pc, #288]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	069b      	lsls	r3, r3, #26
 80056f8:	4944      	ldr	r1, [pc, #272]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	604b      	str	r3, [r1, #4]
 80056fe:	e023      	b.n	8005748 <HAL_RCC_OscConfig+0x434>
 8005700:	4b42      	ldr	r3, [pc, #264]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a1b      	ldr	r3, [r3, #32]
 800570c:	061b      	lsls	r3, r3, #24
 800570e:	493f      	ldr	r1, [pc, #252]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 8005710:	4313      	orrs	r3, r2
 8005712:	60cb      	str	r3, [r1, #12]
 8005714:	e018      	b.n	8005748 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005716:	4b3d      	ldr	r3, [pc, #244]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a3c      	ldr	r2, [pc, #240]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 800571c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005722:	f7fb ff61 	bl	80015e8 <HAL_GetTick>
 8005726:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005728:	e008      	b.n	800573c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800572a:	f7fb ff5d 	bl	80015e8 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d901      	bls.n	800573c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e212      	b.n	8005b62 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800573c:	4b33      	ldr	r3, [pc, #204]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1f0      	bne.n	800572a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0308 	and.w	r3, r3, #8
 8005750:	2b00      	cmp	r3, #0
 8005752:	d036      	beq.n	80057c2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d019      	beq.n	8005790 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800575c:	4b2b      	ldr	r3, [pc, #172]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 800575e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005760:	4a2a      	ldr	r2, [pc, #168]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 8005762:	f043 0301 	orr.w	r3, r3, #1
 8005766:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005768:	f7fb ff3e 	bl	80015e8 <HAL_GetTick>
 800576c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800576e:	e008      	b.n	8005782 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005770:	f7fb ff3a 	bl	80015e8 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b02      	cmp	r3, #2
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e1ef      	b.n	8005b62 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005782:	4b22      	ldr	r3, [pc, #136]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 8005784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0f0      	beq.n	8005770 <HAL_RCC_OscConfig+0x45c>
 800578e:	e018      	b.n	80057c2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005790:	4b1e      	ldr	r3, [pc, #120]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 8005792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005794:	4a1d      	ldr	r2, [pc, #116]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 8005796:	f023 0301 	bic.w	r3, r3, #1
 800579a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800579c:	f7fb ff24 	bl	80015e8 <HAL_GetTick>
 80057a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057a2:	e008      	b.n	80057b6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057a4:	f7fb ff20 	bl	80015e8 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d901      	bls.n	80057b6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e1d5      	b.n	8005b62 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057b6:	4b15      	ldr	r3, [pc, #84]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 80057b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1f0      	bne.n	80057a4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0320 	and.w	r3, r3, #32
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d039      	beq.n	8005842 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d01c      	beq.n	8005810 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057d6:	4b0d      	ldr	r3, [pc, #52]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a0c      	ldr	r2, [pc, #48]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 80057dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80057e2:	f7fb ff01 	bl	80015e8 <HAL_GetTick>
 80057e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057e8:	e008      	b.n	80057fc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80057ea:	f7fb fefd 	bl	80015e8 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d901      	bls.n	80057fc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e1b2      	b.n	8005b62 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057fc:	4b03      	ldr	r3, [pc, #12]	; (800580c <HAL_RCC_OscConfig+0x4f8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d0f0      	beq.n	80057ea <HAL_RCC_OscConfig+0x4d6>
 8005808:	e01b      	b.n	8005842 <HAL_RCC_OscConfig+0x52e>
 800580a:	bf00      	nop
 800580c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005810:	4b9b      	ldr	r3, [pc, #620]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a9a      	ldr	r2, [pc, #616]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 8005816:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800581a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800581c:	f7fb fee4 	bl	80015e8 <HAL_GetTick>
 8005820:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005824:	f7fb fee0 	bl	80015e8 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e195      	b.n	8005b62 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005836:	4b92      	ldr	r3, [pc, #584]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1f0      	bne.n	8005824 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0304 	and.w	r3, r3, #4
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 8081 	beq.w	8005952 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005850:	4b8c      	ldr	r3, [pc, #560]	; (8005a84 <HAL_RCC_OscConfig+0x770>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a8b      	ldr	r2, [pc, #556]	; (8005a84 <HAL_RCC_OscConfig+0x770>)
 8005856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800585a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800585c:	f7fb fec4 	bl	80015e8 <HAL_GetTick>
 8005860:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005862:	e008      	b.n	8005876 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005864:	f7fb fec0 	bl	80015e8 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b64      	cmp	r3, #100	; 0x64
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e175      	b.n	8005b62 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005876:	4b83      	ldr	r3, [pc, #524]	; (8005a84 <HAL_RCC_OscConfig+0x770>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0f0      	beq.n	8005864 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d106      	bne.n	8005898 <HAL_RCC_OscConfig+0x584>
 800588a:	4b7d      	ldr	r3, [pc, #500]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 800588c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588e:	4a7c      	ldr	r2, [pc, #496]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 8005890:	f043 0301 	orr.w	r3, r3, #1
 8005894:	6713      	str	r3, [r2, #112]	; 0x70
 8005896:	e02d      	b.n	80058f4 <HAL_RCC_OscConfig+0x5e0>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10c      	bne.n	80058ba <HAL_RCC_OscConfig+0x5a6>
 80058a0:	4b77      	ldr	r3, [pc, #476]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 80058a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a4:	4a76      	ldr	r2, [pc, #472]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 80058a6:	f023 0301 	bic.w	r3, r3, #1
 80058aa:	6713      	str	r3, [r2, #112]	; 0x70
 80058ac:	4b74      	ldr	r3, [pc, #464]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 80058ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b0:	4a73      	ldr	r2, [pc, #460]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 80058b2:	f023 0304 	bic.w	r3, r3, #4
 80058b6:	6713      	str	r3, [r2, #112]	; 0x70
 80058b8:	e01c      	b.n	80058f4 <HAL_RCC_OscConfig+0x5e0>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	2b05      	cmp	r3, #5
 80058c0:	d10c      	bne.n	80058dc <HAL_RCC_OscConfig+0x5c8>
 80058c2:	4b6f      	ldr	r3, [pc, #444]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 80058c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c6:	4a6e      	ldr	r2, [pc, #440]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 80058c8:	f043 0304 	orr.w	r3, r3, #4
 80058cc:	6713      	str	r3, [r2, #112]	; 0x70
 80058ce:	4b6c      	ldr	r3, [pc, #432]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 80058d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d2:	4a6b      	ldr	r2, [pc, #428]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 80058d4:	f043 0301 	orr.w	r3, r3, #1
 80058d8:	6713      	str	r3, [r2, #112]	; 0x70
 80058da:	e00b      	b.n	80058f4 <HAL_RCC_OscConfig+0x5e0>
 80058dc:	4b68      	ldr	r3, [pc, #416]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 80058de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e0:	4a67      	ldr	r2, [pc, #412]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 80058e2:	f023 0301 	bic.w	r3, r3, #1
 80058e6:	6713      	str	r3, [r2, #112]	; 0x70
 80058e8:	4b65      	ldr	r3, [pc, #404]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 80058ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ec:	4a64      	ldr	r2, [pc, #400]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 80058ee:	f023 0304 	bic.w	r3, r3, #4
 80058f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d015      	beq.n	8005928 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058fc:	f7fb fe74 	bl	80015e8 <HAL_GetTick>
 8005900:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005902:	e00a      	b.n	800591a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005904:	f7fb fe70 	bl	80015e8 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005912:	4293      	cmp	r3, r2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e123      	b.n	8005b62 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800591a:	4b59      	ldr	r3, [pc, #356]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 800591c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0ee      	beq.n	8005904 <HAL_RCC_OscConfig+0x5f0>
 8005926:	e014      	b.n	8005952 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005928:	f7fb fe5e 	bl	80015e8 <HAL_GetTick>
 800592c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800592e:	e00a      	b.n	8005946 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005930:	f7fb fe5a 	bl	80015e8 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	f241 3288 	movw	r2, #5000	; 0x1388
 800593e:	4293      	cmp	r3, r2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e10d      	b.n	8005b62 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005946:	4b4e      	ldr	r3, [pc, #312]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 8005948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1ee      	bne.n	8005930 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 8102 	beq.w	8005b60 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800595c:	4b48      	ldr	r3, [pc, #288]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005964:	2b18      	cmp	r3, #24
 8005966:	f000 80bd 	beq.w	8005ae4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596e:	2b02      	cmp	r3, #2
 8005970:	f040 809e 	bne.w	8005ab0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005974:	4b42      	ldr	r3, [pc, #264]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a41      	ldr	r2, [pc, #260]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 800597a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800597e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005980:	f7fb fe32 	bl	80015e8 <HAL_GetTick>
 8005984:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005988:	f7fb fe2e 	bl	80015e8 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e0e3      	b.n	8005b62 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800599a:	4b39      	ldr	r3, [pc, #228]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1f0      	bne.n	8005988 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059a6:	4b36      	ldr	r3, [pc, #216]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 80059a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059aa:	4b37      	ldr	r3, [pc, #220]	; (8005a88 <HAL_RCC_OscConfig+0x774>)
 80059ac:	4013      	ands	r3, r2
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80059b6:	0112      	lsls	r2, r2, #4
 80059b8:	430a      	orrs	r2, r1
 80059ba:	4931      	ldr	r1, [pc, #196]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	628b      	str	r3, [r1, #40]	; 0x28
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c4:	3b01      	subs	r3, #1
 80059c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ce:	3b01      	subs	r3, #1
 80059d0:	025b      	lsls	r3, r3, #9
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	431a      	orrs	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059da:	3b01      	subs	r3, #1
 80059dc:	041b      	lsls	r3, r3, #16
 80059de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e8:	3b01      	subs	r3, #1
 80059ea:	061b      	lsls	r3, r3, #24
 80059ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80059f0:	4923      	ldr	r1, [pc, #140]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80059f6:	4b22      	ldr	r3, [pc, #136]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 80059f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fa:	4a21      	ldr	r2, [pc, #132]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 80059fc:	f023 0301 	bic.w	r3, r3, #1
 8005a00:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a02:	4b1f      	ldr	r3, [pc, #124]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 8005a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a06:	4b21      	ldr	r3, [pc, #132]	; (8005a8c <HAL_RCC_OscConfig+0x778>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a0e:	00d2      	lsls	r2, r2, #3
 8005a10:	491b      	ldr	r1, [pc, #108]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005a16:	4b1a      	ldr	r3, [pc, #104]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 8005a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1a:	f023 020c 	bic.w	r2, r3, #12
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	4917      	ldr	r1, [pc, #92]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005a28:	4b15      	ldr	r3, [pc, #84]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	f023 0202 	bic.w	r2, r3, #2
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a34:	4912      	ldr	r1, [pc, #72]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a3a:	4b11      	ldr	r3, [pc, #68]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 8005a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3e:	4a10      	ldr	r2, [pc, #64]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 8005a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a46:	4b0e      	ldr	r3, [pc, #56]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 8005a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4a:	4a0d      	ldr	r2, [pc, #52]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 8005a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005a52:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 8005a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a56:	4a0a      	ldr	r2, [pc, #40]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 8005a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005a5e:	4b08      	ldr	r3, [pc, #32]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 8005a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a62:	4a07      	ldr	r2, [pc, #28]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 8005a64:	f043 0301 	orr.w	r3, r3, #1
 8005a68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a6a:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a04      	ldr	r2, [pc, #16]	; (8005a80 <HAL_RCC_OscConfig+0x76c>)
 8005a70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a76:	f7fb fdb7 	bl	80015e8 <HAL_GetTick>
 8005a7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a7c:	e011      	b.n	8005aa2 <HAL_RCC_OscConfig+0x78e>
 8005a7e:	bf00      	nop
 8005a80:	58024400 	.word	0x58024400
 8005a84:	58024800 	.word	0x58024800
 8005a88:	fffffc0c 	.word	0xfffffc0c
 8005a8c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a90:	f7fb fdaa 	bl	80015e8 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e05f      	b.n	8005b62 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005aa2:	4b32      	ldr	r3, [pc, #200]	; (8005b6c <HAL_RCC_OscConfig+0x858>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d0f0      	beq.n	8005a90 <HAL_RCC_OscConfig+0x77c>
 8005aae:	e057      	b.n	8005b60 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ab0:	4b2e      	ldr	r3, [pc, #184]	; (8005b6c <HAL_RCC_OscConfig+0x858>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a2d      	ldr	r2, [pc, #180]	; (8005b6c <HAL_RCC_OscConfig+0x858>)
 8005ab6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005abc:	f7fb fd94 	bl	80015e8 <HAL_GetTick>
 8005ac0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ac4:	f7fb fd90 	bl	80015e8 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e045      	b.n	8005b62 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ad6:	4b25      	ldr	r3, [pc, #148]	; (8005b6c <HAL_RCC_OscConfig+0x858>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1f0      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x7b0>
 8005ae2:	e03d      	b.n	8005b60 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005ae4:	4b21      	ldr	r3, [pc, #132]	; (8005b6c <HAL_RCC_OscConfig+0x858>)
 8005ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005aea:	4b20      	ldr	r3, [pc, #128]	; (8005b6c <HAL_RCC_OscConfig+0x858>)
 8005aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aee:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d031      	beq.n	8005b5c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f003 0203 	and.w	r2, r3, #3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d12a      	bne.n	8005b5c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	091b      	lsrs	r3, r3, #4
 8005b0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d122      	bne.n	8005b5c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b20:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d11a      	bne.n	8005b5c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	0a5b      	lsrs	r3, r3, #9
 8005b2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b32:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d111      	bne.n	8005b5c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	0c1b      	lsrs	r3, r3, #16
 8005b3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b44:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d108      	bne.n	8005b5c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	0e1b      	lsrs	r3, r3, #24
 8005b4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b56:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d001      	beq.n	8005b60 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e000      	b.n	8005b62 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3730      	adds	r7, #48	; 0x30
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	58024400 	.word	0x58024400

08005b70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e19c      	b.n	8005ebe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b84:	4b8a      	ldr	r3, [pc, #552]	; (8005db0 <HAL_RCC_ClockConfig+0x240>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 030f 	and.w	r3, r3, #15
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d910      	bls.n	8005bb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b92:	4b87      	ldr	r3, [pc, #540]	; (8005db0 <HAL_RCC_ClockConfig+0x240>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f023 020f 	bic.w	r2, r3, #15
 8005b9a:	4985      	ldr	r1, [pc, #532]	; (8005db0 <HAL_RCC_ClockConfig+0x240>)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ba2:	4b83      	ldr	r3, [pc, #524]	; (8005db0 <HAL_RCC_ClockConfig+0x240>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d001      	beq.n	8005bb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e184      	b.n	8005ebe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d010      	beq.n	8005be2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	691a      	ldr	r2, [r3, #16]
 8005bc4:	4b7b      	ldr	r3, [pc, #492]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d908      	bls.n	8005be2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005bd0:	4b78      	ldr	r3, [pc, #480]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	4975      	ldr	r1, [pc, #468]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0308 	and.w	r3, r3, #8
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d010      	beq.n	8005c10 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	695a      	ldr	r2, [r3, #20]
 8005bf2:	4b70      	ldr	r3, [pc, #448]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d908      	bls.n	8005c10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005bfe:	4b6d      	ldr	r3, [pc, #436]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	496a      	ldr	r1, [pc, #424]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0310 	and.w	r3, r3, #16
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d010      	beq.n	8005c3e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	699a      	ldr	r2, [r3, #24]
 8005c20:	4b64      	ldr	r3, [pc, #400]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d908      	bls.n	8005c3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c2c:	4b61      	ldr	r3, [pc, #388]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	495e      	ldr	r1, [pc, #376]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0320 	and.w	r3, r3, #32
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d010      	beq.n	8005c6c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69da      	ldr	r2, [r3, #28]
 8005c4e:	4b59      	ldr	r3, [pc, #356]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d908      	bls.n	8005c6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005c5a:	4b56      	ldr	r3, [pc, #344]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	4953      	ldr	r1, [pc, #332]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d010      	beq.n	8005c9a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68da      	ldr	r2, [r3, #12]
 8005c7c:	4b4d      	ldr	r3, [pc, #308]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	f003 030f 	and.w	r3, r3, #15
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d908      	bls.n	8005c9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c88:	4b4a      	ldr	r3, [pc, #296]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	f023 020f 	bic.w	r2, r3, #15
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	4947      	ldr	r1, [pc, #284]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d055      	beq.n	8005d52 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005ca6:	4b43      	ldr	r3, [pc, #268]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	4940      	ldr	r1, [pc, #256]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d107      	bne.n	8005cd0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cc0:	4b3c      	ldr	r3, [pc, #240]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d121      	bne.n	8005d10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e0f6      	b.n	8005ebe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2b03      	cmp	r3, #3
 8005cd6:	d107      	bne.n	8005ce8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cd8:	4b36      	ldr	r3, [pc, #216]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d115      	bne.n	8005d10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e0ea      	b.n	8005ebe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d107      	bne.n	8005d00 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005cf0:	4b30      	ldr	r3, [pc, #192]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d109      	bne.n	8005d10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e0de      	b.n	8005ebe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d00:	4b2c      	ldr	r3, [pc, #176]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e0d6      	b.n	8005ebe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d10:	4b28      	ldr	r3, [pc, #160]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	f023 0207 	bic.w	r2, r3, #7
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	4925      	ldr	r1, [pc, #148]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d22:	f7fb fc61 	bl	80015e8 <HAL_GetTick>
 8005d26:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d28:	e00a      	b.n	8005d40 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d2a:	f7fb fc5d 	bl	80015e8 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d901      	bls.n	8005d40 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e0be      	b.n	8005ebe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d40:	4b1c      	ldr	r3, [pc, #112]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	00db      	lsls	r3, r3, #3
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d1eb      	bne.n	8005d2a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d010      	beq.n	8005d80 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68da      	ldr	r2, [r3, #12]
 8005d62:	4b14      	ldr	r3, [pc, #80]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	f003 030f 	and.w	r3, r3, #15
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d208      	bcs.n	8005d80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d6e:	4b11      	ldr	r3, [pc, #68]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	f023 020f 	bic.w	r2, r3, #15
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	490e      	ldr	r1, [pc, #56]	; (8005db4 <HAL_RCC_ClockConfig+0x244>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d80:	4b0b      	ldr	r3, [pc, #44]	; (8005db0 <HAL_RCC_ClockConfig+0x240>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 030f 	and.w	r3, r3, #15
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d214      	bcs.n	8005db8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d8e:	4b08      	ldr	r3, [pc, #32]	; (8005db0 <HAL_RCC_ClockConfig+0x240>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f023 020f 	bic.w	r2, r3, #15
 8005d96:	4906      	ldr	r1, [pc, #24]	; (8005db0 <HAL_RCC_ClockConfig+0x240>)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d9e:	4b04      	ldr	r3, [pc, #16]	; (8005db0 <HAL_RCC_ClockConfig+0x240>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 030f 	and.w	r3, r3, #15
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d005      	beq.n	8005db8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e086      	b.n	8005ebe <HAL_RCC_ClockConfig+0x34e>
 8005db0:	52002000 	.word	0x52002000
 8005db4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d010      	beq.n	8005de6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691a      	ldr	r2, [r3, #16]
 8005dc8:	4b3f      	ldr	r3, [pc, #252]	; (8005ec8 <HAL_RCC_ClockConfig+0x358>)
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d208      	bcs.n	8005de6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005dd4:	4b3c      	ldr	r3, [pc, #240]	; (8005ec8 <HAL_RCC_ClockConfig+0x358>)
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	4939      	ldr	r1, [pc, #228]	; (8005ec8 <HAL_RCC_ClockConfig+0x358>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0308 	and.w	r3, r3, #8
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d010      	beq.n	8005e14 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	695a      	ldr	r2, [r3, #20]
 8005df6:	4b34      	ldr	r3, [pc, #208]	; (8005ec8 <HAL_RCC_ClockConfig+0x358>)
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d208      	bcs.n	8005e14 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e02:	4b31      	ldr	r3, [pc, #196]	; (8005ec8 <HAL_RCC_ClockConfig+0x358>)
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	492e      	ldr	r1, [pc, #184]	; (8005ec8 <HAL_RCC_ClockConfig+0x358>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0310 	and.w	r3, r3, #16
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d010      	beq.n	8005e42 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	699a      	ldr	r2, [r3, #24]
 8005e24:	4b28      	ldr	r3, [pc, #160]	; (8005ec8 <HAL_RCC_ClockConfig+0x358>)
 8005e26:	69db      	ldr	r3, [r3, #28]
 8005e28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d208      	bcs.n	8005e42 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e30:	4b25      	ldr	r3, [pc, #148]	; (8005ec8 <HAL_RCC_ClockConfig+0x358>)
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	4922      	ldr	r1, [pc, #136]	; (8005ec8 <HAL_RCC_ClockConfig+0x358>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d010      	beq.n	8005e70 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	69da      	ldr	r2, [r3, #28]
 8005e52:	4b1d      	ldr	r3, [pc, #116]	; (8005ec8 <HAL_RCC_ClockConfig+0x358>)
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d208      	bcs.n	8005e70 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005e5e:	4b1a      	ldr	r3, [pc, #104]	; (8005ec8 <HAL_RCC_ClockConfig+0x358>)
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	4917      	ldr	r1, [pc, #92]	; (8005ec8 <HAL_RCC_ClockConfig+0x358>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005e70:	f000 f834 	bl	8005edc <HAL_RCC_GetSysClockFreq>
 8005e74:	4602      	mov	r2, r0
 8005e76:	4b14      	ldr	r3, [pc, #80]	; (8005ec8 <HAL_RCC_ClockConfig+0x358>)
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	0a1b      	lsrs	r3, r3, #8
 8005e7c:	f003 030f 	and.w	r3, r3, #15
 8005e80:	4912      	ldr	r1, [pc, #72]	; (8005ecc <HAL_RCC_ClockConfig+0x35c>)
 8005e82:	5ccb      	ldrb	r3, [r1, r3]
 8005e84:	f003 031f 	and.w	r3, r3, #31
 8005e88:	fa22 f303 	lsr.w	r3, r2, r3
 8005e8c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e8e:	4b0e      	ldr	r3, [pc, #56]	; (8005ec8 <HAL_RCC_ClockConfig+0x358>)
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	f003 030f 	and.w	r3, r3, #15
 8005e96:	4a0d      	ldr	r2, [pc, #52]	; (8005ecc <HAL_RCC_ClockConfig+0x35c>)
 8005e98:	5cd3      	ldrb	r3, [r2, r3]
 8005e9a:	f003 031f 	and.w	r3, r3, #31
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea4:	4a0a      	ldr	r2, [pc, #40]	; (8005ed0 <HAL_RCC_ClockConfig+0x360>)
 8005ea6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ea8:	4a0a      	ldr	r2, [pc, #40]	; (8005ed4 <HAL_RCC_ClockConfig+0x364>)
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005eae:	4b0a      	ldr	r3, [pc, #40]	; (8005ed8 <HAL_RCC_ClockConfig+0x368>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fb fb4e 	bl	8001554 <HAL_InitTick>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3718      	adds	r7, #24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	58024400 	.word	0x58024400
 8005ecc:	0800a1a0 	.word	0x0800a1a0
 8005ed0:	24000004 	.word	0x24000004
 8005ed4:	24000000 	.word	0x24000000
 8005ed8:	24000008 	.word	0x24000008

08005edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b089      	sub	sp, #36	; 0x24
 8005ee0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ee2:	4bb3      	ldr	r3, [pc, #716]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eea:	2b18      	cmp	r3, #24
 8005eec:	f200 8155 	bhi.w	800619a <HAL_RCC_GetSysClockFreq+0x2be>
 8005ef0:	a201      	add	r2, pc, #4	; (adr r2, 8005ef8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef6:	bf00      	nop
 8005ef8:	08005f5d 	.word	0x08005f5d
 8005efc:	0800619b 	.word	0x0800619b
 8005f00:	0800619b 	.word	0x0800619b
 8005f04:	0800619b 	.word	0x0800619b
 8005f08:	0800619b 	.word	0x0800619b
 8005f0c:	0800619b 	.word	0x0800619b
 8005f10:	0800619b 	.word	0x0800619b
 8005f14:	0800619b 	.word	0x0800619b
 8005f18:	08005f83 	.word	0x08005f83
 8005f1c:	0800619b 	.word	0x0800619b
 8005f20:	0800619b 	.word	0x0800619b
 8005f24:	0800619b 	.word	0x0800619b
 8005f28:	0800619b 	.word	0x0800619b
 8005f2c:	0800619b 	.word	0x0800619b
 8005f30:	0800619b 	.word	0x0800619b
 8005f34:	0800619b 	.word	0x0800619b
 8005f38:	08005f89 	.word	0x08005f89
 8005f3c:	0800619b 	.word	0x0800619b
 8005f40:	0800619b 	.word	0x0800619b
 8005f44:	0800619b 	.word	0x0800619b
 8005f48:	0800619b 	.word	0x0800619b
 8005f4c:	0800619b 	.word	0x0800619b
 8005f50:	0800619b 	.word	0x0800619b
 8005f54:	0800619b 	.word	0x0800619b
 8005f58:	08005f8f 	.word	0x08005f8f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f5c:	4b94      	ldr	r3, [pc, #592]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d009      	beq.n	8005f7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f68:	4b91      	ldr	r3, [pc, #580]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	08db      	lsrs	r3, r3, #3
 8005f6e:	f003 0303 	and.w	r3, r3, #3
 8005f72:	4a90      	ldr	r2, [pc, #576]	; (80061b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f74:	fa22 f303 	lsr.w	r3, r2, r3
 8005f78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005f7a:	e111      	b.n	80061a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005f7c:	4b8d      	ldr	r3, [pc, #564]	; (80061b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f7e:	61bb      	str	r3, [r7, #24]
    break;
 8005f80:	e10e      	b.n	80061a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005f82:	4b8d      	ldr	r3, [pc, #564]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f84:	61bb      	str	r3, [r7, #24]
    break;
 8005f86:	e10b      	b.n	80061a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005f88:	4b8c      	ldr	r3, [pc, #560]	; (80061bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005f8a:	61bb      	str	r3, [r7, #24]
    break;
 8005f8c:	e108      	b.n	80061a0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f8e:	4b88      	ldr	r3, [pc, #544]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005f98:	4b85      	ldr	r3, [pc, #532]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9c:	091b      	lsrs	r3, r3, #4
 8005f9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fa2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005fa4:	4b82      	ldr	r3, [pc, #520]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005fae:	4b80      	ldr	r3, [pc, #512]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb2:	08db      	lsrs	r3, r3, #3
 8005fb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	fb02 f303 	mul.w	r3, r2, r3
 8005fbe:	ee07 3a90 	vmov	s15, r3
 8005fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 80e1 	beq.w	8006194 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	f000 8083 	beq.w	80060e0 <HAL_RCC_GetSysClockFreq+0x204>
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	f200 80a1 	bhi.w	8006124 <HAL_RCC_GetSysClockFreq+0x248>
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <HAL_RCC_GetSysClockFreq+0x114>
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d056      	beq.n	800609c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005fee:	e099      	b.n	8006124 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ff0:	4b6f      	ldr	r3, [pc, #444]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0320 	and.w	r3, r3, #32
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d02d      	beq.n	8006058 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ffc:	4b6c      	ldr	r3, [pc, #432]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	08db      	lsrs	r3, r3, #3
 8006002:	f003 0303 	and.w	r3, r3, #3
 8006006:	4a6b      	ldr	r2, [pc, #428]	; (80061b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006008:	fa22 f303 	lsr.w	r3, r2, r3
 800600c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	ee07 3a90 	vmov	s15, r3
 8006014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006026:	4b62      	ldr	r3, [pc, #392]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602e:	ee07 3a90 	vmov	s15, r3
 8006032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006036:	ed97 6a02 	vldr	s12, [r7, #8]
 800603a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80061c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800603e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800604a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800604e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006052:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006056:	e087      	b.n	8006168 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	ee07 3a90 	vmov	s15, r3
 800605e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006062:	eddf 6a58 	vldr	s13, [pc, #352]	; 80061c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800606a:	4b51      	ldr	r3, [pc, #324]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800606c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800607a:	ed97 6a02 	vldr	s12, [r7, #8]
 800607e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80061c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800608a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800608e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006096:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800609a:	e065      	b.n	8006168 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80061c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80060aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ae:	4b40      	ldr	r3, [pc, #256]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b6:	ee07 3a90 	vmov	s15, r3
 80060ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060be:	ed97 6a02 	vldr	s12, [r7, #8]
 80060c2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80061c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060de:	e043      	b.n	8006168 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	ee07 3a90 	vmov	s15, r3
 80060e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 80061cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80060ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060f2:	4b2f      	ldr	r3, [pc, #188]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060fa:	ee07 3a90 	vmov	s15, r3
 80060fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006102:	ed97 6a02 	vldr	s12, [r7, #8]
 8006106:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80061c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800610a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800610e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800611a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800611e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006122:	e021      	b.n	8006168 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	ee07 3a90 	vmov	s15, r3
 800612a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800612e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80061c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006136:	4b1e      	ldr	r3, [pc, #120]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800613e:	ee07 3a90 	vmov	s15, r3
 8006142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006146:	ed97 6a02 	vldr	s12, [r7, #8]
 800614a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80061c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800614e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800615a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800615e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006162:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006166:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006168:	4b11      	ldr	r3, [pc, #68]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800616a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616c:	0a5b      	lsrs	r3, r3, #9
 800616e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006172:	3301      	adds	r3, #1
 8006174:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	ee07 3a90 	vmov	s15, r3
 800617c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006180:	edd7 6a07 	vldr	s13, [r7, #28]
 8006184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800618c:	ee17 3a90 	vmov	r3, s15
 8006190:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006192:	e005      	b.n	80061a0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006194:	2300      	movs	r3, #0
 8006196:	61bb      	str	r3, [r7, #24]
    break;
 8006198:	e002      	b.n	80061a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800619a:	4b07      	ldr	r3, [pc, #28]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800619c:	61bb      	str	r3, [r7, #24]
    break;
 800619e:	bf00      	nop
  }

  return sysclockfreq;
 80061a0:	69bb      	ldr	r3, [r7, #24]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3724      	adds	r7, #36	; 0x24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	58024400 	.word	0x58024400
 80061b4:	03d09000 	.word	0x03d09000
 80061b8:	003d0900 	.word	0x003d0900
 80061bc:	017d7840 	.word	0x017d7840
 80061c0:	46000000 	.word	0x46000000
 80061c4:	4c742400 	.word	0x4c742400
 80061c8:	4a742400 	.word	0x4a742400
 80061cc:	4bbebc20 	.word	0x4bbebc20

080061d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80061d6:	f7ff fe81 	bl	8005edc <HAL_RCC_GetSysClockFreq>
 80061da:	4602      	mov	r2, r0
 80061dc:	4b10      	ldr	r3, [pc, #64]	; (8006220 <HAL_RCC_GetHCLKFreq+0x50>)
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	0a1b      	lsrs	r3, r3, #8
 80061e2:	f003 030f 	and.w	r3, r3, #15
 80061e6:	490f      	ldr	r1, [pc, #60]	; (8006224 <HAL_RCC_GetHCLKFreq+0x54>)
 80061e8:	5ccb      	ldrb	r3, [r1, r3]
 80061ea:	f003 031f 	and.w	r3, r3, #31
 80061ee:	fa22 f303 	lsr.w	r3, r2, r3
 80061f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061f4:	4b0a      	ldr	r3, [pc, #40]	; (8006220 <HAL_RCC_GetHCLKFreq+0x50>)
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	f003 030f 	and.w	r3, r3, #15
 80061fc:	4a09      	ldr	r2, [pc, #36]	; (8006224 <HAL_RCC_GetHCLKFreq+0x54>)
 80061fe:	5cd3      	ldrb	r3, [r2, r3]
 8006200:	f003 031f 	and.w	r3, r3, #31
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	fa22 f303 	lsr.w	r3, r2, r3
 800620a:	4a07      	ldr	r2, [pc, #28]	; (8006228 <HAL_RCC_GetHCLKFreq+0x58>)
 800620c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800620e:	4a07      	ldr	r2, [pc, #28]	; (800622c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006214:	4b04      	ldr	r3, [pc, #16]	; (8006228 <HAL_RCC_GetHCLKFreq+0x58>)
 8006216:	681b      	ldr	r3, [r3, #0]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	58024400 	.word	0x58024400
 8006224:	0800a1a0 	.word	0x0800a1a0
 8006228:	24000004 	.word	0x24000004
 800622c:	24000000 	.word	0x24000000

08006230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006234:	f7ff ffcc 	bl	80061d0 <HAL_RCC_GetHCLKFreq>
 8006238:	4602      	mov	r2, r0
 800623a:	4b06      	ldr	r3, [pc, #24]	; (8006254 <HAL_RCC_GetPCLK1Freq+0x24>)
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	091b      	lsrs	r3, r3, #4
 8006240:	f003 0307 	and.w	r3, r3, #7
 8006244:	4904      	ldr	r1, [pc, #16]	; (8006258 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006246:	5ccb      	ldrb	r3, [r1, r3]
 8006248:	f003 031f 	and.w	r3, r3, #31
 800624c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006250:	4618      	mov	r0, r3
 8006252:	bd80      	pop	{r7, pc}
 8006254:	58024400 	.word	0x58024400
 8006258:	0800a1a0 	.word	0x0800a1a0

0800625c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006260:	f7ff ffb6 	bl	80061d0 <HAL_RCC_GetHCLKFreq>
 8006264:	4602      	mov	r2, r0
 8006266:	4b06      	ldr	r3, [pc, #24]	; (8006280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	0a1b      	lsrs	r3, r3, #8
 800626c:	f003 0307 	and.w	r3, r3, #7
 8006270:	4904      	ldr	r1, [pc, #16]	; (8006284 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006272:	5ccb      	ldrb	r3, [r1, r3]
 8006274:	f003 031f 	and.w	r3, r3, #31
 8006278:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800627c:	4618      	mov	r0, r3
 800627e:	bd80      	pop	{r7, pc}
 8006280:	58024400 	.word	0x58024400
 8006284:	0800a1a0 	.word	0x0800a1a0

08006288 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006290:	2300      	movs	r3, #0
 8006292:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006294:	2300      	movs	r3, #0
 8006296:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d03f      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062ac:	d02a      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80062ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062b2:	d824      	bhi.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80062b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062b8:	d018      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80062ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062be:	d81e      	bhi.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d003      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80062c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062c8:	d007      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80062ca:	e018      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062cc:	4ba3      	ldr	r3, [pc, #652]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	4aa2      	ldr	r2, [pc, #648]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80062d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80062d8:	e015      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	3304      	adds	r3, #4
 80062de:	2102      	movs	r1, #2
 80062e0:	4618      	mov	r0, r3
 80062e2:	f001 f9d5 	bl	8007690 <RCCEx_PLL2_Config>
 80062e6:	4603      	mov	r3, r0
 80062e8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80062ea:	e00c      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3324      	adds	r3, #36	; 0x24
 80062f0:	2102      	movs	r1, #2
 80062f2:	4618      	mov	r0, r3
 80062f4:	f001 fa7e 	bl	80077f4 <RCCEx_PLL3_Config>
 80062f8:	4603      	mov	r3, r0
 80062fa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80062fc:	e003      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	75fb      	strb	r3, [r7, #23]
      break;
 8006302:	e000      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006306:	7dfb      	ldrb	r3, [r7, #23]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d109      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800630c:	4b93      	ldr	r3, [pc, #588]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800630e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006310:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006318:	4990      	ldr	r1, [pc, #576]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800631a:	4313      	orrs	r3, r2
 800631c:	650b      	str	r3, [r1, #80]	; 0x50
 800631e:	e001      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006320:	7dfb      	ldrb	r3, [r7, #23]
 8006322:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800632c:	2b00      	cmp	r3, #0
 800632e:	d03d      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006334:	2b04      	cmp	r3, #4
 8006336:	d826      	bhi.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006338:	a201      	add	r2, pc, #4	; (adr r2, 8006340 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800633a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633e:	bf00      	nop
 8006340:	08006355 	.word	0x08006355
 8006344:	08006363 	.word	0x08006363
 8006348:	08006375 	.word	0x08006375
 800634c:	0800638d 	.word	0x0800638d
 8006350:	0800638d 	.word	0x0800638d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006354:	4b81      	ldr	r3, [pc, #516]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006358:	4a80      	ldr	r2, [pc, #512]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800635a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800635e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006360:	e015      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	3304      	adds	r3, #4
 8006366:	2100      	movs	r1, #0
 8006368:	4618      	mov	r0, r3
 800636a:	f001 f991 	bl	8007690 <RCCEx_PLL2_Config>
 800636e:	4603      	mov	r3, r0
 8006370:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006372:	e00c      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	3324      	adds	r3, #36	; 0x24
 8006378:	2100      	movs	r1, #0
 800637a:	4618      	mov	r0, r3
 800637c:	f001 fa3a 	bl	80077f4 <RCCEx_PLL3_Config>
 8006380:	4603      	mov	r3, r0
 8006382:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006384:	e003      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	75fb      	strb	r3, [r7, #23]
      break;
 800638a:	e000      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800638c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800638e:	7dfb      	ldrb	r3, [r7, #23]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d109      	bne.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006394:	4b71      	ldr	r3, [pc, #452]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006398:	f023 0207 	bic.w	r2, r3, #7
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a0:	496e      	ldr	r1, [pc, #440]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	650b      	str	r3, [r1, #80]	; 0x50
 80063a6:	e001      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a8:	7dfb      	ldrb	r3, [r7, #23]
 80063aa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d042      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c0:	d02b      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80063c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c6:	d825      	bhi.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80063c8:	2bc0      	cmp	r3, #192	; 0xc0
 80063ca:	d028      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80063cc:	2bc0      	cmp	r3, #192	; 0xc0
 80063ce:	d821      	bhi.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80063d0:	2b80      	cmp	r3, #128	; 0x80
 80063d2:	d016      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80063d4:	2b80      	cmp	r3, #128	; 0x80
 80063d6:	d81d      	bhi.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d002      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80063dc:	2b40      	cmp	r3, #64	; 0x40
 80063de:	d007      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80063e0:	e018      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063e2:	4b5e      	ldr	r3, [pc, #376]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80063e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e6:	4a5d      	ldr	r2, [pc, #372]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80063e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80063ee:	e017      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	3304      	adds	r3, #4
 80063f4:	2100      	movs	r1, #0
 80063f6:	4618      	mov	r0, r3
 80063f8:	f001 f94a 	bl	8007690 <RCCEx_PLL2_Config>
 80063fc:	4603      	mov	r3, r0
 80063fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006400:	e00e      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	3324      	adds	r3, #36	; 0x24
 8006406:	2100      	movs	r1, #0
 8006408:	4618      	mov	r0, r3
 800640a:	f001 f9f3 	bl	80077f4 <RCCEx_PLL3_Config>
 800640e:	4603      	mov	r3, r0
 8006410:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006412:	e005      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	75fb      	strb	r3, [r7, #23]
      break;
 8006418:	e002      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800641a:	bf00      	nop
 800641c:	e000      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800641e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006420:	7dfb      	ldrb	r3, [r7, #23]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d109      	bne.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006426:	4b4d      	ldr	r3, [pc, #308]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800642a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006432:	494a      	ldr	r1, [pc, #296]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006434:	4313      	orrs	r3, r2
 8006436:	650b      	str	r3, [r1, #80]	; 0x50
 8006438:	e001      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800643a:	7dfb      	ldrb	r3, [r7, #23]
 800643c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006446:	2b00      	cmp	r3, #0
 8006448:	d049      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006450:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006454:	d030      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006456:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800645a:	d82a      	bhi.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800645c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006460:	d02c      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006462:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006466:	d824      	bhi.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800646c:	d018      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800646e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006472:	d81e      	bhi.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006474:	2b00      	cmp	r3, #0
 8006476:	d003      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006478:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800647c:	d007      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800647e:	e018      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006480:	4b36      	ldr	r3, [pc, #216]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006484:	4a35      	ldr	r2, [pc, #212]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800648a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800648c:	e017      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	3304      	adds	r3, #4
 8006492:	2100      	movs	r1, #0
 8006494:	4618      	mov	r0, r3
 8006496:	f001 f8fb 	bl	8007690 <RCCEx_PLL2_Config>
 800649a:	4603      	mov	r3, r0
 800649c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800649e:	e00e      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3324      	adds	r3, #36	; 0x24
 80064a4:	2100      	movs	r1, #0
 80064a6:	4618      	mov	r0, r3
 80064a8:	f001 f9a4 	bl	80077f4 <RCCEx_PLL3_Config>
 80064ac:	4603      	mov	r3, r0
 80064ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064b0:	e005      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	75fb      	strb	r3, [r7, #23]
      break;
 80064b6:	e002      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80064b8:	bf00      	nop
 80064ba:	e000      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80064bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064be:	7dfb      	ldrb	r3, [r7, #23]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10a      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80064c4:	4b25      	ldr	r3, [pc, #148]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80064c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064d2:	4922      	ldr	r1, [pc, #136]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	658b      	str	r3, [r1, #88]	; 0x58
 80064d8:	e001      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064da:	7dfb      	ldrb	r3, [r7, #23]
 80064dc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d04b      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80064f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064f4:	d030      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80064f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064fa:	d82a      	bhi.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80064fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006500:	d02e      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006502:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006506:	d824      	bhi.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006508:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800650c:	d018      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800650e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006512:	d81e      	bhi.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006514:	2b00      	cmp	r3, #0
 8006516:	d003      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800651c:	d007      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800651e:	e018      	b.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006520:	4b0e      	ldr	r3, [pc, #56]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	4a0d      	ldr	r2, [pc, #52]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800652a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800652c:	e019      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	3304      	adds	r3, #4
 8006532:	2100      	movs	r1, #0
 8006534:	4618      	mov	r0, r3
 8006536:	f001 f8ab 	bl	8007690 <RCCEx_PLL2_Config>
 800653a:	4603      	mov	r3, r0
 800653c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800653e:	e010      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	3324      	adds	r3, #36	; 0x24
 8006544:	2100      	movs	r1, #0
 8006546:	4618      	mov	r0, r3
 8006548:	f001 f954 	bl	80077f4 <RCCEx_PLL3_Config>
 800654c:	4603      	mov	r3, r0
 800654e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006550:	e007      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	75fb      	strb	r3, [r7, #23]
      break;
 8006556:	e004      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8006558:	bf00      	nop
 800655a:	e002      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800655c:	58024400 	.word	0x58024400
      break;
 8006560:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006562:	7dfb      	ldrb	r3, [r7, #23]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10a      	bne.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006568:	4b99      	ldr	r3, [pc, #612]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800656a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800656c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006576:	4996      	ldr	r1, [pc, #600]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006578:	4313      	orrs	r3, r2
 800657a:	658b      	str	r3, [r1, #88]	; 0x58
 800657c:	e001      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800657e:	7dfb      	ldrb	r3, [r7, #23]
 8006580:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d032      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006592:	2b30      	cmp	r3, #48	; 0x30
 8006594:	d01c      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006596:	2b30      	cmp	r3, #48	; 0x30
 8006598:	d817      	bhi.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x342>
 800659a:	2b20      	cmp	r3, #32
 800659c:	d00c      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800659e:	2b20      	cmp	r3, #32
 80065a0:	d813      	bhi.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x342>
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d016      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80065a6:	2b10      	cmp	r3, #16
 80065a8:	d10f      	bne.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065aa:	4b89      	ldr	r3, [pc, #548]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80065ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ae:	4a88      	ldr	r2, [pc, #544]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80065b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80065b6:	e00e      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	3304      	adds	r3, #4
 80065bc:	2102      	movs	r1, #2
 80065be:	4618      	mov	r0, r3
 80065c0:	f001 f866 	bl	8007690 <RCCEx_PLL2_Config>
 80065c4:	4603      	mov	r3, r0
 80065c6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80065c8:	e005      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	75fb      	strb	r3, [r7, #23]
      break;
 80065ce:	e002      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80065d0:	bf00      	nop
 80065d2:	e000      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80065d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d109      	bne.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80065dc:	4b7c      	ldr	r3, [pc, #496]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80065de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065e8:	4979      	ldr	r1, [pc, #484]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	64cb      	str	r3, [r1, #76]	; 0x4c
 80065ee:	e001      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f0:	7dfb      	ldrb	r3, [r7, #23]
 80065f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d047      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006604:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006608:	d030      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800660a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800660e:	d82a      	bhi.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006610:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006614:	d02c      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006616:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800661a:	d824      	bhi.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800661c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006620:	d018      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006626:	d81e      	bhi.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800662c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006630:	d007      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8006632:	e018      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006634:	4b66      	ldr	r3, [pc, #408]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006638:	4a65      	ldr	r2, [pc, #404]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800663a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800663e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006640:	e017      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	3304      	adds	r3, #4
 8006646:	2100      	movs	r1, #0
 8006648:	4618      	mov	r0, r3
 800664a:	f001 f821 	bl	8007690 <RCCEx_PLL2_Config>
 800664e:	4603      	mov	r3, r0
 8006650:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006652:	e00e      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3324      	adds	r3, #36	; 0x24
 8006658:	2100      	movs	r1, #0
 800665a:	4618      	mov	r0, r3
 800665c:	f001 f8ca 	bl	80077f4 <RCCEx_PLL3_Config>
 8006660:	4603      	mov	r3, r0
 8006662:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006664:	e005      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	75fb      	strb	r3, [r7, #23]
      break;
 800666a:	e002      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800666c:	bf00      	nop
 800666e:	e000      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006670:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006672:	7dfb      	ldrb	r3, [r7, #23]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d109      	bne.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006678:	4b55      	ldr	r3, [pc, #340]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800667a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800667c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006684:	4952      	ldr	r1, [pc, #328]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006686:	4313      	orrs	r3, r2
 8006688:	650b      	str	r3, [r1, #80]	; 0x50
 800668a:	e001      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800668c:	7dfb      	ldrb	r3, [r7, #23]
 800668e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d049      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066a4:	d02e      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80066a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066aa:	d828      	bhi.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x476>
 80066ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066b0:	d02a      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80066b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066b6:	d822      	bhi.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x476>
 80066b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066bc:	d026      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x484>
 80066be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066c2:	d81c      	bhi.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x476>
 80066c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066c8:	d010      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x464>
 80066ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066ce:	d816      	bhi.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x476>
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d01d      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80066d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066d8:	d111      	bne.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	3304      	adds	r3, #4
 80066de:	2101      	movs	r1, #1
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 ffd5 	bl	8007690 <RCCEx_PLL2_Config>
 80066e6:	4603      	mov	r3, r0
 80066e8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80066ea:	e012      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3324      	adds	r3, #36	; 0x24
 80066f0:	2101      	movs	r1, #1
 80066f2:	4618      	mov	r0, r3
 80066f4:	f001 f87e 	bl	80077f4 <RCCEx_PLL3_Config>
 80066f8:	4603      	mov	r3, r0
 80066fa:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80066fc:	e009      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	75fb      	strb	r3, [r7, #23]
      break;
 8006702:	e006      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006704:	bf00      	nop
 8006706:	e004      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006708:	bf00      	nop
 800670a:	e002      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800670c:	bf00      	nop
 800670e:	e000      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006710:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006712:	7dfb      	ldrb	r3, [r7, #23]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d109      	bne.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006718:	4b2d      	ldr	r3, [pc, #180]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800671a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800671c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006724:	492a      	ldr	r1, [pc, #168]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006726:	4313      	orrs	r3, r2
 8006728:	650b      	str	r3, [r1, #80]	; 0x50
 800672a:	e001      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672c:	7dfb      	ldrb	r3, [r7, #23]
 800672e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d04d      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006742:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006746:	d02e      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006748:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800674c:	d828      	bhi.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800674e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006752:	d02a      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006758:	d822      	bhi.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800675a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800675e:	d026      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006760:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006764:	d81c      	bhi.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800676a:	d010      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800676c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006770:	d816      	bhi.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006772:	2b00      	cmp	r3, #0
 8006774:	d01d      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006776:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800677a:	d111      	bne.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	3304      	adds	r3, #4
 8006780:	2101      	movs	r1, #1
 8006782:	4618      	mov	r0, r3
 8006784:	f000 ff84 	bl	8007690 <RCCEx_PLL2_Config>
 8006788:	4603      	mov	r3, r0
 800678a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800678c:	e012      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	3324      	adds	r3, #36	; 0x24
 8006792:	2101      	movs	r1, #1
 8006794:	4618      	mov	r0, r3
 8006796:	f001 f82d 	bl	80077f4 <RCCEx_PLL3_Config>
 800679a:	4603      	mov	r3, r0
 800679c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800679e:	e009      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	75fb      	strb	r3, [r7, #23]
      break;
 80067a4:	e006      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80067a6:	bf00      	nop
 80067a8:	e004      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80067aa:	bf00      	nop
 80067ac:	e002      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80067ae:	bf00      	nop
 80067b0:	e000      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80067b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067b4:	7dfb      	ldrb	r3, [r7, #23]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10c      	bne.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80067ba:	4b05      	ldr	r3, [pc, #20]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80067bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067be:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067c8:	4901      	ldr	r1, [pc, #4]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	658b      	str	r3, [r1, #88]	; 0x58
 80067ce:	e003      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80067d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d4:	7dfb      	ldrb	r3, [r7, #23]
 80067d6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d02f      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067ec:	d00e      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x584>
 80067ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067f2:	d814      	bhi.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x596>
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d015      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80067f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067fc:	d10f      	bne.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067fe:	4baf      	ldr	r3, [pc, #700]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006802:	4aae      	ldr	r2, [pc, #696]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006808:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800680a:	e00c      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	3304      	adds	r3, #4
 8006810:	2101      	movs	r1, #1
 8006812:	4618      	mov	r0, r3
 8006814:	f000 ff3c 	bl	8007690 <RCCEx_PLL2_Config>
 8006818:	4603      	mov	r3, r0
 800681a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800681c:	e003      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	75fb      	strb	r3, [r7, #23]
      break;
 8006822:	e000      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006824:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006826:	7dfb      	ldrb	r3, [r7, #23]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d109      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800682c:	4ba3      	ldr	r3, [pc, #652]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800682e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006830:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006838:	49a0      	ldr	r1, [pc, #640]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800683a:	4313      	orrs	r3, r2
 800683c:	650b      	str	r3, [r1, #80]	; 0x50
 800683e:	e001      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006840:	7dfb      	ldrb	r3, [r7, #23]
 8006842:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d032      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006854:	2b03      	cmp	r3, #3
 8006856:	d81b      	bhi.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006858:	a201      	add	r2, pc, #4	; (adr r2, 8006860 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800685a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685e:	bf00      	nop
 8006860:	08006897 	.word	0x08006897
 8006864:	08006871 	.word	0x08006871
 8006868:	0800687f 	.word	0x0800687f
 800686c:	08006897 	.word	0x08006897
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006870:	4b92      	ldr	r3, [pc, #584]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006874:	4a91      	ldr	r2, [pc, #580]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800687a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800687c:	e00c      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	3304      	adds	r3, #4
 8006882:	2102      	movs	r1, #2
 8006884:	4618      	mov	r0, r3
 8006886:	f000 ff03 	bl	8007690 <RCCEx_PLL2_Config>
 800688a:	4603      	mov	r3, r0
 800688c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800688e:	e003      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	75fb      	strb	r3, [r7, #23]
      break;
 8006894:	e000      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006896:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006898:	7dfb      	ldrb	r3, [r7, #23]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d109      	bne.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800689e:	4b87      	ldr	r3, [pc, #540]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80068a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068a2:	f023 0203 	bic.w	r2, r3, #3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068aa:	4984      	ldr	r1, [pc, #528]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068b0:	e001      	b.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b2:	7dfb      	ldrb	r3, [r7, #23]
 80068b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 8086 	beq.w	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068c4:	4b7e      	ldr	r3, [pc, #504]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a7d      	ldr	r2, [pc, #500]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80068ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068d0:	f7fa fe8a 	bl	80015e8 <HAL_GetTick>
 80068d4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068d6:	e009      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068d8:	f7fa fe86 	bl	80015e8 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b64      	cmp	r3, #100	; 0x64
 80068e4:	d902      	bls.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	75fb      	strb	r3, [r7, #23]
        break;
 80068ea:	e005      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068ec:	4b74      	ldr	r3, [pc, #464]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0ef      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80068f8:	7dfb      	ldrb	r3, [r7, #23]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d166      	bne.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80068fe:	4b6f      	ldr	r3, [pc, #444]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006900:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006908:	4053      	eors	r3, r2
 800690a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800690e:	2b00      	cmp	r3, #0
 8006910:	d013      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006912:	4b6a      	ldr	r3, [pc, #424]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800691a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800691c:	4b67      	ldr	r3, [pc, #412]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800691e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006920:	4a66      	ldr	r2, [pc, #408]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006926:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006928:	4b64      	ldr	r3, [pc, #400]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800692a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692c:	4a63      	ldr	r2, [pc, #396]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800692e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006932:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006934:	4a61      	ldr	r2, [pc, #388]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006944:	d115      	bne.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006946:	f7fa fe4f 	bl	80015e8 <HAL_GetTick>
 800694a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800694c:	e00b      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800694e:	f7fa fe4b 	bl	80015e8 <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	f241 3288 	movw	r2, #5000	; 0x1388
 800695c:	4293      	cmp	r3, r2
 800695e:	d902      	bls.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	75fb      	strb	r3, [r7, #23]
            break;
 8006964:	e005      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006966:	4b55      	ldr	r3, [pc, #340]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	2b00      	cmp	r3, #0
 8006970:	d0ed      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006972:	7dfb      	ldrb	r3, [r7, #23]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d126      	bne.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800697e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006986:	d10d      	bne.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006988:	4b4c      	ldr	r3, [pc, #304]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006996:	0919      	lsrs	r1, r3, #4
 8006998:	4b4a      	ldr	r3, [pc, #296]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800699a:	400b      	ands	r3, r1
 800699c:	4947      	ldr	r1, [pc, #284]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	610b      	str	r3, [r1, #16]
 80069a2:	e005      	b.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80069a4:	4b45      	ldr	r3, [pc, #276]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	4a44      	ldr	r2, [pc, #272]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80069ae:	6113      	str	r3, [r2, #16]
 80069b0:	4b42      	ldr	r3, [pc, #264]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069be:	493f      	ldr	r1, [pc, #252]	; (8006abc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	670b      	str	r3, [r1, #112]	; 0x70
 80069c4:	e004      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069c6:	7dfb      	ldrb	r3, [r7, #23]
 80069c8:	75bb      	strb	r3, [r7, #22]
 80069ca:	e001      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069cc:	7dfb      	ldrb	r3, [r7, #23]
 80069ce:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 8085 	beq.w	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069e2:	2b28      	cmp	r3, #40	; 0x28
 80069e4:	d866      	bhi.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80069e6:	a201      	add	r2, pc, #4	; (adr r2, 80069ec <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80069e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ec:	08006ac9 	.word	0x08006ac9
 80069f0:	08006ab5 	.word	0x08006ab5
 80069f4:	08006ab5 	.word	0x08006ab5
 80069f8:	08006ab5 	.word	0x08006ab5
 80069fc:	08006ab5 	.word	0x08006ab5
 8006a00:	08006ab5 	.word	0x08006ab5
 8006a04:	08006ab5 	.word	0x08006ab5
 8006a08:	08006ab5 	.word	0x08006ab5
 8006a0c:	08006a91 	.word	0x08006a91
 8006a10:	08006ab5 	.word	0x08006ab5
 8006a14:	08006ab5 	.word	0x08006ab5
 8006a18:	08006ab5 	.word	0x08006ab5
 8006a1c:	08006ab5 	.word	0x08006ab5
 8006a20:	08006ab5 	.word	0x08006ab5
 8006a24:	08006ab5 	.word	0x08006ab5
 8006a28:	08006ab5 	.word	0x08006ab5
 8006a2c:	08006aa3 	.word	0x08006aa3
 8006a30:	08006ab5 	.word	0x08006ab5
 8006a34:	08006ab5 	.word	0x08006ab5
 8006a38:	08006ab5 	.word	0x08006ab5
 8006a3c:	08006ab5 	.word	0x08006ab5
 8006a40:	08006ab5 	.word	0x08006ab5
 8006a44:	08006ab5 	.word	0x08006ab5
 8006a48:	08006ab5 	.word	0x08006ab5
 8006a4c:	08006ac9 	.word	0x08006ac9
 8006a50:	08006ab5 	.word	0x08006ab5
 8006a54:	08006ab5 	.word	0x08006ab5
 8006a58:	08006ab5 	.word	0x08006ab5
 8006a5c:	08006ab5 	.word	0x08006ab5
 8006a60:	08006ab5 	.word	0x08006ab5
 8006a64:	08006ab5 	.word	0x08006ab5
 8006a68:	08006ab5 	.word	0x08006ab5
 8006a6c:	08006ac9 	.word	0x08006ac9
 8006a70:	08006ab5 	.word	0x08006ab5
 8006a74:	08006ab5 	.word	0x08006ab5
 8006a78:	08006ab5 	.word	0x08006ab5
 8006a7c:	08006ab5 	.word	0x08006ab5
 8006a80:	08006ab5 	.word	0x08006ab5
 8006a84:	08006ab5 	.word	0x08006ab5
 8006a88:	08006ab5 	.word	0x08006ab5
 8006a8c:	08006ac9 	.word	0x08006ac9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	3304      	adds	r3, #4
 8006a94:	2101      	movs	r1, #1
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 fdfa 	bl	8007690 <RCCEx_PLL2_Config>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006aa0:	e013      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3324      	adds	r3, #36	; 0x24
 8006aa6:	2101      	movs	r1, #1
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f000 fea3 	bl	80077f4 <RCCEx_PLL3_Config>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006ab2:	e00a      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ab8:	e007      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006aba:	bf00      	nop
 8006abc:	58024400 	.word	0x58024400
 8006ac0:	58024800 	.word	0x58024800
 8006ac4:	00ffffcf 	.word	0x00ffffcf
      break;
 8006ac8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006aca:	7dfb      	ldrb	r3, [r7, #23]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d109      	bne.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006ad0:	4b96      	ldr	r3, [pc, #600]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006adc:	4993      	ldr	r1, [pc, #588]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	654b      	str	r3, [r1, #84]	; 0x54
 8006ae2:	e001      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae4:	7dfb      	ldrb	r3, [r7, #23]
 8006ae6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0302 	and.w	r3, r3, #2
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d038      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006af8:	2b05      	cmp	r3, #5
 8006afa:	d821      	bhi.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006afc:	a201      	add	r2, pc, #4	; (adr r2, 8006b04 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8006afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b02:	bf00      	nop
 8006b04:	08006b47 	.word	0x08006b47
 8006b08:	08006b1d 	.word	0x08006b1d
 8006b0c:	08006b2f 	.word	0x08006b2f
 8006b10:	08006b47 	.word	0x08006b47
 8006b14:	08006b47 	.word	0x08006b47
 8006b18:	08006b47 	.word	0x08006b47
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	3304      	adds	r3, #4
 8006b20:	2101      	movs	r1, #1
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 fdb4 	bl	8007690 <RCCEx_PLL2_Config>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b2c:	e00c      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	3324      	adds	r3, #36	; 0x24
 8006b32:	2101      	movs	r1, #1
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 fe5d 	bl	80077f4 <RCCEx_PLL3_Config>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b3e:	e003      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	75fb      	strb	r3, [r7, #23]
      break;
 8006b44:	e000      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8006b46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b48:	7dfb      	ldrb	r3, [r7, #23]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d109      	bne.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b4e:	4b77      	ldr	r3, [pc, #476]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b52:	f023 0207 	bic.w	r2, r3, #7
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b5a:	4974      	ldr	r1, [pc, #464]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	654b      	str	r3, [r1, #84]	; 0x54
 8006b60:	e001      	b.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b62:	7dfb      	ldrb	r3, [r7, #23]
 8006b64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0304 	and.w	r3, r3, #4
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d03a      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b78:	2b05      	cmp	r3, #5
 8006b7a:	d821      	bhi.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006b7c:	a201      	add	r2, pc, #4	; (adr r2, 8006b84 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8006b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b82:	bf00      	nop
 8006b84:	08006bc7 	.word	0x08006bc7
 8006b88:	08006b9d 	.word	0x08006b9d
 8006b8c:	08006baf 	.word	0x08006baf
 8006b90:	08006bc7 	.word	0x08006bc7
 8006b94:	08006bc7 	.word	0x08006bc7
 8006b98:	08006bc7 	.word	0x08006bc7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fd74 	bl	8007690 <RCCEx_PLL2_Config>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006bac:	e00c      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	3324      	adds	r3, #36	; 0x24
 8006bb2:	2101      	movs	r1, #1
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 fe1d 	bl	80077f4 <RCCEx_PLL3_Config>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006bbe:	e003      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8006bc4:	e000      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8006bc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bc8:	7dfb      	ldrb	r3, [r7, #23]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10a      	bne.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bce:	4b57      	ldr	r3, [pc, #348]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd2:	f023 0207 	bic.w	r2, r3, #7
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bdc:	4953      	ldr	r1, [pc, #332]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	658b      	str	r3, [r1, #88]	; 0x58
 8006be2:	e001      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be4:	7dfb      	ldrb	r3, [r7, #23]
 8006be6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0320 	and.w	r3, r3, #32
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d04b      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bfe:	d02e      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c04:	d828      	bhi.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c0a:	d02a      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c10:	d822      	bhi.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006c12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c16:	d026      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006c18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c1c:	d81c      	bhi.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006c1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c22:	d010      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c28:	d816      	bhi.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d01d      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8006c2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c32:	d111      	bne.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	3304      	adds	r3, #4
 8006c38:	2100      	movs	r1, #0
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 fd28 	bl	8007690 <RCCEx_PLL2_Config>
 8006c40:	4603      	mov	r3, r0
 8006c42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c44:	e012      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	3324      	adds	r3, #36	; 0x24
 8006c4a:	2102      	movs	r1, #2
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f000 fdd1 	bl	80077f4 <RCCEx_PLL3_Config>
 8006c52:	4603      	mov	r3, r0
 8006c54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c56:	e009      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c5c:	e006      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006c5e:	bf00      	nop
 8006c60:	e004      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006c62:	bf00      	nop
 8006c64:	e002      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006c66:	bf00      	nop
 8006c68:	e000      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006c6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c6c:	7dfb      	ldrb	r3, [r7, #23]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10a      	bne.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c72:	4b2e      	ldr	r3, [pc, #184]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c76:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c80:	492a      	ldr	r1, [pc, #168]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	654b      	str	r3, [r1, #84]	; 0x54
 8006c86:	e001      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c88:	7dfb      	ldrb	r3, [r7, #23]
 8006c8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d04d      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c9e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006ca2:	d02e      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006ca4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006ca8:	d828      	bhi.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cae:	d02a      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cb4:	d822      	bhi.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006cb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cba:	d026      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006cbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cc0:	d81c      	bhi.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006cc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cc6:	d010      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8006cc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ccc:	d816      	bhi.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d01d      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8006cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cd6:	d111      	bne.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	3304      	adds	r3, #4
 8006cdc:	2100      	movs	r1, #0
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fcd6 	bl	8007690 <RCCEx_PLL2_Config>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006ce8:	e012      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	3324      	adds	r3, #36	; 0x24
 8006cee:	2102      	movs	r1, #2
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 fd7f 	bl	80077f4 <RCCEx_PLL3_Config>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006cfa:	e009      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8006d00:	e006      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006d02:	bf00      	nop
 8006d04:	e004      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006d06:	bf00      	nop
 8006d08:	e002      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006d0a:	bf00      	nop
 8006d0c:	e000      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006d0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d10:	7dfb      	ldrb	r3, [r7, #23]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10c      	bne.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d16:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d1a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d24:	4901      	ldr	r1, [pc, #4]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	658b      	str	r3, [r1, #88]	; 0x58
 8006d2a:	e003      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006d2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d30:	7dfb      	ldrb	r3, [r7, #23]
 8006d32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d04b      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d46:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d4a:	d02e      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006d4c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d50:	d828      	bhi.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d56:	d02a      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d5c:	d822      	bhi.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006d5e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d62:	d026      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006d64:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d68:	d81c      	bhi.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006d6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d6e:	d010      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006d70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d74:	d816      	bhi.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d01d      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d7e:	d111      	bne.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	3304      	adds	r3, #4
 8006d84:	2100      	movs	r1, #0
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 fc82 	bl	8007690 <RCCEx_PLL2_Config>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006d90:	e012      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	3324      	adds	r3, #36	; 0x24
 8006d96:	2102      	movs	r1, #2
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 fd2b 	bl	80077f4 <RCCEx_PLL3_Config>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006da2:	e009      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	75fb      	strb	r3, [r7, #23]
      break;
 8006da8:	e006      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006daa:	bf00      	nop
 8006dac:	e004      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006dae:	bf00      	nop
 8006db0:	e002      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006db2:	bf00      	nop
 8006db4:	e000      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006db6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006db8:	7dfb      	ldrb	r3, [r7, #23]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10a      	bne.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006dbe:	4b9d      	ldr	r3, [pc, #628]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006dcc:	4999      	ldr	r1, [pc, #612]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	658b      	str	r3, [r1, #88]	; 0x58
 8006dd2:	e001      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd4:	7dfb      	ldrb	r3, [r7, #23]
 8006dd6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0308 	and.w	r3, r3, #8
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d01a      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dee:	d10a      	bne.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3324      	adds	r3, #36	; 0x24
 8006df4:	2102      	movs	r1, #2
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 fcfc 	bl	80077f4 <RCCEx_PLL3_Config>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d001      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e06:	4b8b      	ldr	r3, [pc, #556]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e14:	4987      	ldr	r1, [pc, #540]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0310 	and.w	r3, r3, #16
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d01a      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e30:	d10a      	bne.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	3324      	adds	r3, #36	; 0x24
 8006e36:	2102      	movs	r1, #2
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f000 fcdb 	bl	80077f4 <RCCEx_PLL3_Config>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e48:	4b7a      	ldr	r3, [pc, #488]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e56:	4977      	ldr	r1, [pc, #476]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d034      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e72:	d01d      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006e74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e78:	d817      	bhi.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d003      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e82:	d009      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006e84:	e011      	b.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	3304      	adds	r3, #4
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 fbff 	bl	8007690 <RCCEx_PLL2_Config>
 8006e92:	4603      	mov	r3, r0
 8006e94:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e96:	e00c      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	3324      	adds	r3, #36	; 0x24
 8006e9c:	2102      	movs	r1, #2
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 fca8 	bl	80077f4 <RCCEx_PLL3_Config>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006ea8:	e003      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	75fb      	strb	r3, [r7, #23]
      break;
 8006eae:	e000      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006eb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eb2:	7dfb      	ldrb	r3, [r7, #23]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10a      	bne.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006eb8:	4b5e      	ldr	r3, [pc, #376]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ebc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ec6:	495b      	ldr	r1, [pc, #364]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	658b      	str	r3, [r1, #88]	; 0x58
 8006ecc:	e001      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ece:	7dfb      	ldrb	r3, [r7, #23]
 8006ed0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d033      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ee4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ee8:	d01c      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006eea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006eee:	d816      	bhi.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006ef0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ef4:	d003      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006ef6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006efa:	d007      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006efc:	e00f      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006efe:	4b4d      	ldr	r3, [pc, #308]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f02:	4a4c      	ldr	r2, [pc, #304]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f0a:	e00c      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	3324      	adds	r3, #36	; 0x24
 8006f10:	2101      	movs	r1, #1
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 fc6e 	bl	80077f4 <RCCEx_PLL3_Config>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f1c:	e003      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	75fb      	strb	r3, [r7, #23]
      break;
 8006f22:	e000      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006f24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f26:	7dfb      	ldrb	r3, [r7, #23]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10a      	bne.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f2c:	4b41      	ldr	r3, [pc, #260]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f3a:	493e      	ldr	r1, [pc, #248]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	654b      	str	r3, [r1, #84]	; 0x54
 8006f40:	e001      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f42:	7dfb      	ldrb	r3, [r7, #23]
 8006f44:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d029      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f5e:	d007      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006f60:	e00f      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f62:	4b34      	ldr	r3, [pc, #208]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f66:	4a33      	ldr	r2, [pc, #204]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f6e:	e00b      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	3304      	adds	r3, #4
 8006f74:	2102      	movs	r1, #2
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 fb8a 	bl	8007690 <RCCEx_PLL2_Config>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f80:	e002      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	75fb      	strb	r3, [r7, #23]
      break;
 8006f86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d109      	bne.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006f8e:	4b29      	ldr	r3, [pc, #164]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f9a:	4926      	ldr	r1, [pc, #152]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006fa0:	e001      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa2:	7dfb      	ldrb	r3, [r7, #23]
 8006fa4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00a      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	3324      	adds	r3, #36	; 0x24
 8006fb6:	2102      	movs	r1, #2
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f000 fc1b 	bl	80077f4 <RCCEx_PLL3_Config>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d001      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d033      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fdc:	d017      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006fde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fe2:	d811      	bhi.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fe8:	d013      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fee:	d80b      	bhi.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d010      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8006ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ff8:	d106      	bne.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ffa:	4b0e      	ldr	r3, [pc, #56]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffe:	4a0d      	ldr	r2, [pc, #52]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007004:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007006:	e007      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	75fb      	strb	r3, [r7, #23]
      break;
 800700c:	e004      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800700e:	bf00      	nop
 8007010:	e002      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007012:	bf00      	nop
 8007014:	e000      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007016:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007018:	7dfb      	ldrb	r3, [r7, #23]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10c      	bne.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800701e:	4b05      	ldr	r3, [pc, #20]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007022:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800702a:	4902      	ldr	r1, [pc, #8]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800702c:	4313      	orrs	r3, r2
 800702e:	654b      	str	r3, [r1, #84]	; 0x54
 8007030:	e004      	b.n	800703c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8007032:	bf00      	nop
 8007034:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007038:	7dfb      	ldrb	r3, [r7, #23]
 800703a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d008      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007048:	4b31      	ldr	r3, [pc, #196]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800704a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800704c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007054:	492e      	ldr	r1, [pc, #184]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007056:	4313      	orrs	r3, r2
 8007058:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d009      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007066:	4b2a      	ldr	r3, [pc, #168]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007074:	4926      	ldr	r1, [pc, #152]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007076:	4313      	orrs	r3, r2
 8007078:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d008      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007086:	4b22      	ldr	r3, [pc, #136]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800708a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007092:	491f      	ldr	r1, [pc, #124]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007094:	4313      	orrs	r3, r2
 8007096:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00d      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070a4:	4b1a      	ldr	r3, [pc, #104]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	4a19      	ldr	r2, [pc, #100]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070ae:	6113      	str	r3, [r2, #16]
 80070b0:	4b17      	ldr	r3, [pc, #92]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070b2:	691a      	ldr	r2, [r3, #16]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80070ba:	4915      	ldr	r1, [pc, #84]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	da08      	bge.n	80070da <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80070c8:	4b11      	ldr	r3, [pc, #68]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d4:	490e      	ldr	r1, [pc, #56]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d009      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80070e6:	4b0a      	ldr	r3, [pc, #40]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f4:	4906      	ldr	r1, [pc, #24]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80070fa:	7dbb      	ldrb	r3, [r7, #22]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	e000      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
}
 8007106:	4618      	mov	r0, r3
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	58024400 	.word	0x58024400

08007114 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007118:	f7ff f85a 	bl	80061d0 <HAL_RCC_GetHCLKFreq>
 800711c:	4602      	mov	r2, r0
 800711e:	4b06      	ldr	r3, [pc, #24]	; (8007138 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	091b      	lsrs	r3, r3, #4
 8007124:	f003 0307 	and.w	r3, r3, #7
 8007128:	4904      	ldr	r1, [pc, #16]	; (800713c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800712a:	5ccb      	ldrb	r3, [r1, r3]
 800712c:	f003 031f 	and.w	r3, r3, #31
 8007130:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007134:	4618      	mov	r0, r3
 8007136:	bd80      	pop	{r7, pc}
 8007138:	58024400 	.word	0x58024400
 800713c:	0800a1a0 	.word	0x0800a1a0

08007140 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007140:	b480      	push	{r7}
 8007142:	b089      	sub	sp, #36	; 0x24
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007148:	4ba1      	ldr	r3, [pc, #644]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800714a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714c:	f003 0303 	and.w	r3, r3, #3
 8007150:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007152:	4b9f      	ldr	r3, [pc, #636]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007156:	0b1b      	lsrs	r3, r3, #12
 8007158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800715c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800715e:	4b9c      	ldr	r3, [pc, #624]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007162:	091b      	lsrs	r3, r3, #4
 8007164:	f003 0301 	and.w	r3, r3, #1
 8007168:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800716a:	4b99      	ldr	r3, [pc, #612]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800716c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716e:	08db      	lsrs	r3, r3, #3
 8007170:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	fb02 f303 	mul.w	r3, r2, r3
 800717a:	ee07 3a90 	vmov	s15, r3
 800717e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007182:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	2b00      	cmp	r3, #0
 800718a:	f000 8111 	beq.w	80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	2b02      	cmp	r3, #2
 8007192:	f000 8083 	beq.w	800729c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	2b02      	cmp	r3, #2
 800719a:	f200 80a1 	bhi.w	80072e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d003      	beq.n	80071ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d056      	beq.n	8007258 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80071aa:	e099      	b.n	80072e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071ac:	4b88      	ldr	r3, [pc, #544]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0320 	and.w	r3, r3, #32
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d02d      	beq.n	8007214 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071b8:	4b85      	ldr	r3, [pc, #532]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	08db      	lsrs	r3, r3, #3
 80071be:	f003 0303 	and.w	r3, r3, #3
 80071c2:	4a84      	ldr	r2, [pc, #528]	; (80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80071c4:	fa22 f303 	lsr.w	r3, r2, r3
 80071c8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	ee07 3a90 	vmov	s15, r3
 80071d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e2:	4b7b      	ldr	r3, [pc, #492]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ea:	ee07 3a90 	vmov	s15, r3
 80071ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80073d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800720a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007212:	e087      	b.n	8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	ee07 3a90 	vmov	s15, r3
 800721a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80073dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007226:	4b6a      	ldr	r3, [pc, #424]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722e:	ee07 3a90 	vmov	s15, r3
 8007232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007236:	ed97 6a03 	vldr	s12, [r7, #12]
 800723a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80073d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800723e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800724a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800724e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007252:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007256:	e065      	b.n	8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	ee07 3a90 	vmov	s15, r3
 800725e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007262:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800726a:	4b59      	ldr	r3, [pc, #356]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800726c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007272:	ee07 3a90 	vmov	s15, r3
 8007276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800727a:	ed97 6a03 	vldr	s12, [r7, #12]
 800727e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80073d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800728a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800728e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007296:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800729a:	e043      	b.n	8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	ee07 3a90 	vmov	s15, r3
 80072a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80073e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80072aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ae:	4b48      	ldr	r3, [pc, #288]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b6:	ee07 3a90 	vmov	s15, r3
 80072ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072be:	ed97 6a03 	vldr	s12, [r7, #12]
 80072c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80073d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072de:	e021      	b.n	8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	ee07 3a90 	vmov	s15, r3
 80072e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072f2:	4b37      	ldr	r3, [pc, #220]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072fa:	ee07 3a90 	vmov	s15, r3
 80072fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007302:	ed97 6a03 	vldr	s12, [r7, #12]
 8007306:	eddf 5a34 	vldr	s11, [pc, #208]	; 80073d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800730a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800730e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800731a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800731e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007322:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007324:	4b2a      	ldr	r3, [pc, #168]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007328:	0a5b      	lsrs	r3, r3, #9
 800732a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007336:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800733a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800733e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800734a:	ee17 2a90 	vmov	r2, s15
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007352:	4b1f      	ldr	r3, [pc, #124]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007356:	0c1b      	lsrs	r3, r3, #16
 8007358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800735c:	ee07 3a90 	vmov	s15, r3
 8007360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007364:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007368:	ee37 7a87 	vadd.f32	s14, s15, s14
 800736c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007378:	ee17 2a90 	vmov	r2, s15
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007380:	4b13      	ldr	r3, [pc, #76]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007384:	0e1b      	lsrs	r3, r3, #24
 8007386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800738a:	ee07 3a90 	vmov	s15, r3
 800738e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007392:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007396:	ee37 7a87 	vadd.f32	s14, s15, s14
 800739a:	edd7 6a07 	vldr	s13, [r7, #28]
 800739e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073a6:	ee17 2a90 	vmov	r2, s15
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80073ae:	e008      	b.n	80073c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	609a      	str	r2, [r3, #8]
}
 80073c2:	bf00      	nop
 80073c4:	3724      	adds	r7, #36	; 0x24
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	58024400 	.word	0x58024400
 80073d4:	03d09000 	.word	0x03d09000
 80073d8:	46000000 	.word	0x46000000
 80073dc:	4c742400 	.word	0x4c742400
 80073e0:	4a742400 	.word	0x4a742400
 80073e4:	4bbebc20 	.word	0x4bbebc20

080073e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b089      	sub	sp, #36	; 0x24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073f0:	4ba1      	ldr	r3, [pc, #644]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f4:	f003 0303 	and.w	r3, r3, #3
 80073f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80073fa:	4b9f      	ldr	r3, [pc, #636]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fe:	0d1b      	lsrs	r3, r3, #20
 8007400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007404:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007406:	4b9c      	ldr	r3, [pc, #624]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740a:	0a1b      	lsrs	r3, r3, #8
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007412:	4b99      	ldr	r3, [pc, #612]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007416:	08db      	lsrs	r3, r3, #3
 8007418:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	fb02 f303 	mul.w	r3, r2, r3
 8007422:	ee07 3a90 	vmov	s15, r3
 8007426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 8111 	beq.w	8007658 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	2b02      	cmp	r3, #2
 800743a:	f000 8083 	beq.w	8007544 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	2b02      	cmp	r3, #2
 8007442:	f200 80a1 	bhi.w	8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d056      	beq.n	8007500 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007452:	e099      	b.n	8007588 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007454:	4b88      	ldr	r3, [pc, #544]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0320 	and.w	r3, r3, #32
 800745c:	2b00      	cmp	r3, #0
 800745e:	d02d      	beq.n	80074bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007460:	4b85      	ldr	r3, [pc, #532]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	08db      	lsrs	r3, r3, #3
 8007466:	f003 0303 	and.w	r3, r3, #3
 800746a:	4a84      	ldr	r2, [pc, #528]	; (800767c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800746c:	fa22 f303 	lsr.w	r3, r2, r3
 8007470:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	ee07 3a90 	vmov	s15, r3
 8007478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800748a:	4b7b      	ldr	r3, [pc, #492]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800748c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007492:	ee07 3a90 	vmov	s15, r3
 8007496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800749a:	ed97 6a03 	vldr	s12, [r7, #12]
 800749e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80074ba:	e087      	b.n	80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	ee07 3a90 	vmov	s15, r3
 80074c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007684 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80074ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ce:	4b6a      	ldr	r3, [pc, #424]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d6:	ee07 3a90 	vmov	s15, r3
 80074da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074de:	ed97 6a03 	vldr	s12, [r7, #12]
 80074e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074fe:	e065      	b.n	80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800750e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007512:	4b59      	ldr	r3, [pc, #356]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751a:	ee07 3a90 	vmov	s15, r3
 800751e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007522:	ed97 6a03 	vldr	s12, [r7, #12]
 8007526:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800752a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800752e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800753a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007542:	e043      	b.n	80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	ee07 3a90 	vmov	s15, r3
 800754a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800768c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007556:	4b48      	ldr	r3, [pc, #288]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800755e:	ee07 3a90 	vmov	s15, r3
 8007562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007566:	ed97 6a03 	vldr	s12, [r7, #12]
 800756a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800756e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800757a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800757e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007582:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007586:	e021      	b.n	80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	ee07 3a90 	vmov	s15, r3
 800758e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007592:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800759a:	4b37      	ldr	r3, [pc, #220]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800759c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a2:	ee07 3a90 	vmov	s15, r3
 80075a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075ca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80075cc:	4b2a      	ldr	r3, [pc, #168]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d0:	0a5b      	lsrs	r3, r3, #9
 80075d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075d6:	ee07 3a90 	vmov	s15, r3
 80075da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075f2:	ee17 2a90 	vmov	r2, s15
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80075fa:	4b1f      	ldr	r3, [pc, #124]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fe:	0c1b      	lsrs	r3, r3, #16
 8007600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007604:	ee07 3a90 	vmov	s15, r3
 8007608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007610:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007614:	edd7 6a07 	vldr	s13, [r7, #28]
 8007618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800761c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007620:	ee17 2a90 	vmov	r2, s15
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007628:	4b13      	ldr	r3, [pc, #76]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800762a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762c:	0e1b      	lsrs	r3, r3, #24
 800762e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007632:	ee07 3a90 	vmov	s15, r3
 8007636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800763e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007642:	edd7 6a07 	vldr	s13, [r7, #28]
 8007646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800764a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800764e:	ee17 2a90 	vmov	r2, s15
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007656:	e008      	b.n	800766a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	609a      	str	r2, [r3, #8]
}
 800766a:	bf00      	nop
 800766c:	3724      	adds	r7, #36	; 0x24
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	58024400 	.word	0x58024400
 800767c:	03d09000 	.word	0x03d09000
 8007680:	46000000 	.word	0x46000000
 8007684:	4c742400 	.word	0x4c742400
 8007688:	4a742400 	.word	0x4a742400
 800768c:	4bbebc20 	.word	0x4bbebc20

08007690 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800769e:	4b53      	ldr	r3, [pc, #332]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80076a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a2:	f003 0303 	and.w	r3, r3, #3
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	d101      	bne.n	80076ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e099      	b.n	80077e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80076ae:	4b4f      	ldr	r3, [pc, #316]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a4e      	ldr	r2, [pc, #312]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80076b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80076b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076ba:	f7f9 ff95 	bl	80015e8 <HAL_GetTick>
 80076be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076c0:	e008      	b.n	80076d4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80076c2:	f7f9 ff91 	bl	80015e8 <HAL_GetTick>
 80076c6:	4602      	mov	r2, r0
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d901      	bls.n	80076d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e086      	b.n	80077e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076d4:	4b45      	ldr	r3, [pc, #276]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1f0      	bne.n	80076c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80076e0:	4b42      	ldr	r3, [pc, #264]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80076e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	031b      	lsls	r3, r3, #12
 80076ee:	493f      	ldr	r1, [pc, #252]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80076f0:	4313      	orrs	r3, r2
 80076f2:	628b      	str	r3, [r1, #40]	; 0x28
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	3b01      	subs	r3, #1
 80076fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	3b01      	subs	r3, #1
 8007704:	025b      	lsls	r3, r3, #9
 8007706:	b29b      	uxth	r3, r3
 8007708:	431a      	orrs	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	3b01      	subs	r3, #1
 8007710:	041b      	lsls	r3, r3, #16
 8007712:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007716:	431a      	orrs	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	3b01      	subs	r3, #1
 800771e:	061b      	lsls	r3, r3, #24
 8007720:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007724:	4931      	ldr	r1, [pc, #196]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007726:	4313      	orrs	r3, r2
 8007728:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800772a:	4b30      	ldr	r3, [pc, #192]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 800772c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	492d      	ldr	r1, [pc, #180]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007738:	4313      	orrs	r3, r2
 800773a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800773c:	4b2b      	ldr	r3, [pc, #172]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 800773e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007740:	f023 0220 	bic.w	r2, r3, #32
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	4928      	ldr	r1, [pc, #160]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 800774a:	4313      	orrs	r3, r2
 800774c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800774e:	4b27      	ldr	r3, [pc, #156]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007752:	4a26      	ldr	r2, [pc, #152]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007754:	f023 0310 	bic.w	r3, r3, #16
 8007758:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800775a:	4b24      	ldr	r3, [pc, #144]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 800775c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800775e:	4b24      	ldr	r3, [pc, #144]	; (80077f0 <RCCEx_PLL2_Config+0x160>)
 8007760:	4013      	ands	r3, r2
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	69d2      	ldr	r2, [r2, #28]
 8007766:	00d2      	lsls	r2, r2, #3
 8007768:	4920      	ldr	r1, [pc, #128]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 800776a:	4313      	orrs	r3, r2
 800776c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800776e:	4b1f      	ldr	r3, [pc, #124]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007772:	4a1e      	ldr	r2, [pc, #120]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007774:	f043 0310 	orr.w	r3, r3, #16
 8007778:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d106      	bne.n	800778e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007780:	4b1a      	ldr	r3, [pc, #104]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007784:	4a19      	ldr	r2, [pc, #100]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007786:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800778a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800778c:	e00f      	b.n	80077ae <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d106      	bne.n	80077a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007794:	4b15      	ldr	r3, [pc, #84]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	4a14      	ldr	r2, [pc, #80]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 800779a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800779e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077a0:	e005      	b.n	80077ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80077a2:	4b12      	ldr	r3, [pc, #72]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80077a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a6:	4a11      	ldr	r2, [pc, #68]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80077a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80077ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80077ae:	4b0f      	ldr	r3, [pc, #60]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a0e      	ldr	r2, [pc, #56]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80077b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077ba:	f7f9 ff15 	bl	80015e8 <HAL_GetTick>
 80077be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077c0:	e008      	b.n	80077d4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80077c2:	f7f9 ff11 	bl	80015e8 <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d901      	bls.n	80077d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e006      	b.n	80077e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077d4:	4b05      	ldr	r3, [pc, #20]	; (80077ec <RCCEx_PLL2_Config+0x15c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d0f0      	beq.n	80077c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	58024400 	.word	0x58024400
 80077f0:	ffff0007 	.word	0xffff0007

080077f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007802:	4b53      	ldr	r3, [pc, #332]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007806:	f003 0303 	and.w	r3, r3, #3
 800780a:	2b03      	cmp	r3, #3
 800780c:	d101      	bne.n	8007812 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e099      	b.n	8007946 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007812:	4b4f      	ldr	r3, [pc, #316]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a4e      	ldr	r2, [pc, #312]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800781c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800781e:	f7f9 fee3 	bl	80015e8 <HAL_GetTick>
 8007822:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007824:	e008      	b.n	8007838 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007826:	f7f9 fedf 	bl	80015e8 <HAL_GetTick>
 800782a:	4602      	mov	r2, r0
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	2b02      	cmp	r3, #2
 8007832:	d901      	bls.n	8007838 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e086      	b.n	8007946 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007838:	4b45      	ldr	r3, [pc, #276]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1f0      	bne.n	8007826 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007844:	4b42      	ldr	r3, [pc, #264]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007848:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	051b      	lsls	r3, r3, #20
 8007852:	493f      	ldr	r1, [pc, #252]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007854:	4313      	orrs	r3, r2
 8007856:	628b      	str	r3, [r1, #40]	; 0x28
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	3b01      	subs	r3, #1
 800785e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	3b01      	subs	r3, #1
 8007868:	025b      	lsls	r3, r3, #9
 800786a:	b29b      	uxth	r3, r3
 800786c:	431a      	orrs	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	3b01      	subs	r3, #1
 8007874:	041b      	lsls	r3, r3, #16
 8007876:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800787a:	431a      	orrs	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	3b01      	subs	r3, #1
 8007882:	061b      	lsls	r3, r3, #24
 8007884:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007888:	4931      	ldr	r1, [pc, #196]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 800788a:	4313      	orrs	r3, r2
 800788c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800788e:	4b30      	ldr	r3, [pc, #192]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007892:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	492d      	ldr	r1, [pc, #180]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 800789c:	4313      	orrs	r3, r2
 800789e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80078a0:	4b2b      	ldr	r3, [pc, #172]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	4928      	ldr	r1, [pc, #160]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80078b2:	4b27      	ldr	r3, [pc, #156]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b6:	4a26      	ldr	r2, [pc, #152]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80078be:	4b24      	ldr	r3, [pc, #144]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078c2:	4b24      	ldr	r3, [pc, #144]	; (8007954 <RCCEx_PLL3_Config+0x160>)
 80078c4:	4013      	ands	r3, r2
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	69d2      	ldr	r2, [r2, #28]
 80078ca:	00d2      	lsls	r2, r2, #3
 80078cc:	4920      	ldr	r1, [pc, #128]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80078d2:	4b1f      	ldr	r3, [pc, #124]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d6:	4a1e      	ldr	r2, [pc, #120]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d106      	bne.n	80078f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80078e4:	4b1a      	ldr	r3, [pc, #104]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e8:	4a19      	ldr	r2, [pc, #100]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80078ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078f0:	e00f      	b.n	8007912 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d106      	bne.n	8007906 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80078f8:	4b15      	ldr	r3, [pc, #84]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fc:	4a14      	ldr	r2, [pc, #80]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 80078fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007902:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007904:	e005      	b.n	8007912 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007906:	4b12      	ldr	r3, [pc, #72]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790a:	4a11      	ldr	r2, [pc, #68]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 800790c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007910:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007912:	4b0f      	ldr	r3, [pc, #60]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a0e      	ldr	r2, [pc, #56]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 8007918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800791c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800791e:	f7f9 fe63 	bl	80015e8 <HAL_GetTick>
 8007922:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007924:	e008      	b.n	8007938 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007926:	f7f9 fe5f 	bl	80015e8 <HAL_GetTick>
 800792a:	4602      	mov	r2, r0
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	2b02      	cmp	r3, #2
 8007932:	d901      	bls.n	8007938 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e006      	b.n	8007946 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007938:	4b05      	ldr	r3, [pc, #20]	; (8007950 <RCCEx_PLL3_Config+0x15c>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007940:	2b00      	cmp	r3, #0
 8007942:	d0f0      	beq.n	8007926 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007944:	7bfb      	ldrb	r3, [r7, #15]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	58024400 	.word	0x58024400
 8007954:	ffff0007 	.word	0xffff0007

08007958 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d101      	bne.n	800796a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e042      	b.n	80079f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007970:	2b00      	cmp	r3, #0
 8007972:	d106      	bne.n	8007982 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7f9 fb55 	bl	800102c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2224      	movs	r2, #36	; 0x24
 8007986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f022 0201 	bic.w	r2, r2, #1
 8007998:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fbea 	bl	8008174 <UART_SetConfig>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d101      	bne.n	80079aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e022      	b.n	80079f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d002      	beq.n	80079b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f001 f946 	bl	8008c44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685a      	ldr	r2, [r3, #4]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689a      	ldr	r2, [r3, #8]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f042 0201 	orr.w	r2, r2, #1
 80079e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f001 f9cd 	bl	8008d88 <UART_CheckIdleState>
 80079ee:	4603      	mov	r3, r0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b0ba      	sub	sp, #232	; 0xe8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	69db      	ldr	r3, [r3, #28]
 8007a06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007a22:	f640 030f 	movw	r3, #2063	; 0x80f
 8007a26:	4013      	ands	r3, r2
 8007a28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007a2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d11b      	bne.n	8007a6c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a38:	f003 0320 	and.w	r3, r3, #32
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d015      	beq.n	8007a6c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a44:	f003 0320 	and.w	r3, r3, #32
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d105      	bne.n	8007a58 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d009      	beq.n	8007a6c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 835a 	beq.w	8008116 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	4798      	blx	r3
      }
      return;
 8007a6a:	e354      	b.n	8008116 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007a6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f000 811f 	beq.w	8007cb4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007a76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007a7a:	4b8b      	ldr	r3, [pc, #556]	; (8007ca8 <HAL_UART_IRQHandler+0x2b0>)
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d106      	bne.n	8007a90 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007a82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007a86:	4b89      	ldr	r3, [pc, #548]	; (8007cac <HAL_UART_IRQHandler+0x2b4>)
 8007a88:	4013      	ands	r3, r2
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f000 8112 	beq.w	8007cb4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a94:	f003 0301 	and.w	r3, r3, #1
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d011      	beq.n	8007ac0 <HAL_UART_IRQHandler+0xc8>
 8007a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00b      	beq.n	8007ac0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2201      	movs	r2, #1
 8007aae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ab6:	f043 0201 	orr.w	r2, r3, #1
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac4:	f003 0302 	and.w	r3, r3, #2
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d011      	beq.n	8007af0 <HAL_UART_IRQHandler+0xf8>
 8007acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ad0:	f003 0301 	and.w	r3, r3, #1
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00b      	beq.n	8007af0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2202      	movs	r2, #2
 8007ade:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ae6:	f043 0204 	orr.w	r2, r3, #4
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007af4:	f003 0304 	and.w	r3, r3, #4
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d011      	beq.n	8007b20 <HAL_UART_IRQHandler+0x128>
 8007afc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00b      	beq.n	8007b20 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2204      	movs	r2, #4
 8007b0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b16:	f043 0202 	orr.w	r2, r3, #2
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b24:	f003 0308 	and.w	r3, r3, #8
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d017      	beq.n	8007b5c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b30:	f003 0320 	and.w	r3, r3, #32
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d105      	bne.n	8007b44 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007b38:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007b3c:	4b5a      	ldr	r3, [pc, #360]	; (8007ca8 <HAL_UART_IRQHandler+0x2b0>)
 8007b3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00b      	beq.n	8007b5c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2208      	movs	r2, #8
 8007b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b52:	f043 0208 	orr.w	r2, r3, #8
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d012      	beq.n	8007b8e <HAL_UART_IRQHandler+0x196>
 8007b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00c      	beq.n	8007b8e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b84:	f043 0220 	orr.w	r2, r3, #32
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 82c0 	beq.w	800811a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b9e:	f003 0320 	and.w	r3, r3, #32
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d013      	beq.n	8007bce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007baa:	f003 0320 	and.w	r3, r3, #32
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d105      	bne.n	8007bbe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d007      	beq.n	8007bce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d003      	beq.n	8007bce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be2:	2b40      	cmp	r3, #64	; 0x40
 8007be4:	d005      	beq.n	8007bf2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007be6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d04f      	beq.n	8007c92 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f001 f9dc 	bl	8008fb0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c02:	2b40      	cmp	r3, #64	; 0x40
 8007c04:	d141      	bne.n	8007c8a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	3308      	adds	r3, #8
 8007c0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c14:	e853 3f00 	ldrex	r3, [r3]
 8007c18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3308      	adds	r3, #8
 8007c2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c42:	e841 2300 	strex	r3, r2, [r1]
 8007c46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1d9      	bne.n	8007c06 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d013      	beq.n	8007c82 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c5e:	4a14      	ldr	r2, [pc, #80]	; (8007cb0 <HAL_UART_IRQHandler+0x2b8>)
 8007c60:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fa fdfa 	bl	8002860 <HAL_DMA_Abort_IT>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d017      	beq.n	8007ca2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c80:	e00f      	b.n	8007ca2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fa60 	bl	8008148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c88:	e00b      	b.n	8007ca2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fa5c 	bl	8008148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c90:	e007      	b.n	8007ca2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fa58 	bl	8008148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007ca0:	e23b      	b.n	800811a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca2:	bf00      	nop
    return;
 8007ca4:	e239      	b.n	800811a <HAL_UART_IRQHandler+0x722>
 8007ca6:	bf00      	nop
 8007ca8:	10000001 	.word	0x10000001
 8007cac:	04000120 	.word	0x04000120
 8007cb0:	0800907d 	.word	0x0800907d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	f040 81ce 	bne.w	800805a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cc2:	f003 0310 	and.w	r3, r3, #16
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f000 81c7 	beq.w	800805a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cd0:	f003 0310 	and.w	r3, r3, #16
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f000 81c0 	beq.w	800805a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2210      	movs	r2, #16
 8007ce0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cec:	2b40      	cmp	r3, #64	; 0x40
 8007cee:	f040 813b 	bne.w	8007f68 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a8b      	ldr	r2, [pc, #556]	; (8007f28 <HAL_UART_IRQHandler+0x530>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d059      	beq.n	8007db2 <HAL_UART_IRQHandler+0x3ba>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a89      	ldr	r2, [pc, #548]	; (8007f2c <HAL_UART_IRQHandler+0x534>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d053      	beq.n	8007db2 <HAL_UART_IRQHandler+0x3ba>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a87      	ldr	r2, [pc, #540]	; (8007f30 <HAL_UART_IRQHandler+0x538>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d04d      	beq.n	8007db2 <HAL_UART_IRQHandler+0x3ba>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a85      	ldr	r2, [pc, #532]	; (8007f34 <HAL_UART_IRQHandler+0x53c>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d047      	beq.n	8007db2 <HAL_UART_IRQHandler+0x3ba>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a83      	ldr	r2, [pc, #524]	; (8007f38 <HAL_UART_IRQHandler+0x540>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d041      	beq.n	8007db2 <HAL_UART_IRQHandler+0x3ba>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a81      	ldr	r2, [pc, #516]	; (8007f3c <HAL_UART_IRQHandler+0x544>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d03b      	beq.n	8007db2 <HAL_UART_IRQHandler+0x3ba>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a7f      	ldr	r2, [pc, #508]	; (8007f40 <HAL_UART_IRQHandler+0x548>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d035      	beq.n	8007db2 <HAL_UART_IRQHandler+0x3ba>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a7d      	ldr	r2, [pc, #500]	; (8007f44 <HAL_UART_IRQHandler+0x54c>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d02f      	beq.n	8007db2 <HAL_UART_IRQHandler+0x3ba>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a7b      	ldr	r2, [pc, #492]	; (8007f48 <HAL_UART_IRQHandler+0x550>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d029      	beq.n	8007db2 <HAL_UART_IRQHandler+0x3ba>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a79      	ldr	r2, [pc, #484]	; (8007f4c <HAL_UART_IRQHandler+0x554>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d023      	beq.n	8007db2 <HAL_UART_IRQHandler+0x3ba>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a77      	ldr	r2, [pc, #476]	; (8007f50 <HAL_UART_IRQHandler+0x558>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d01d      	beq.n	8007db2 <HAL_UART_IRQHandler+0x3ba>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a75      	ldr	r2, [pc, #468]	; (8007f54 <HAL_UART_IRQHandler+0x55c>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d017      	beq.n	8007db2 <HAL_UART_IRQHandler+0x3ba>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a73      	ldr	r2, [pc, #460]	; (8007f58 <HAL_UART_IRQHandler+0x560>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d011      	beq.n	8007db2 <HAL_UART_IRQHandler+0x3ba>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a71      	ldr	r2, [pc, #452]	; (8007f5c <HAL_UART_IRQHandler+0x564>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d00b      	beq.n	8007db2 <HAL_UART_IRQHandler+0x3ba>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a6f      	ldr	r2, [pc, #444]	; (8007f60 <HAL_UART_IRQHandler+0x568>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d005      	beq.n	8007db2 <HAL_UART_IRQHandler+0x3ba>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a6d      	ldr	r2, [pc, #436]	; (8007f64 <HAL_UART_IRQHandler+0x56c>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d105      	bne.n	8007dbe <HAL_UART_IRQHandler+0x3c6>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	e004      	b.n	8007dc8 <HAL_UART_IRQHandler+0x3d0>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007dcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f000 81a4 	beq.w	800811e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ddc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007de0:	429a      	cmp	r2, r3
 8007de2:	f080 819c 	bcs.w	800811e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007dec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dfa:	f000 8086 	beq.w	8007f0a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e0a:	e853 3f00 	ldrex	r3, [r3]
 8007e0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007e12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	461a      	mov	r2, r3
 8007e24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007e2c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e30:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007e34:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e38:	e841 2300 	strex	r3, r2, [r1]
 8007e3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007e40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1da      	bne.n	8007dfe <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	3308      	adds	r3, #8
 8007e4e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e52:	e853 3f00 	ldrex	r3, [r3]
 8007e56:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e5a:	f023 0301 	bic.w	r3, r3, #1
 8007e5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	3308      	adds	r3, #8
 8007e68:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e6c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e70:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e72:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e74:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e78:	e841 2300 	strex	r3, r2, [r1]
 8007e7c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1e1      	bne.n	8007e48 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	3308      	adds	r3, #8
 8007e8a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e8e:	e853 3f00 	ldrex	r3, [r3]
 8007e92:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	3308      	adds	r3, #8
 8007ea4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ea8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007eaa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007eae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007eb0:	e841 2300 	strex	r3, r2, [r1]
 8007eb4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007eb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1e3      	bne.n	8007e84 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2220      	movs	r2, #32
 8007ec0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ed2:	e853 3f00 	ldrex	r3, [r3]
 8007ed6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eda:	f023 0310 	bic.w	r3, r3, #16
 8007ede:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007eec:	65bb      	str	r3, [r7, #88]	; 0x58
 8007eee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ef2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ef4:	e841 2300 	strex	r3, r2, [r1]
 8007ef8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1e4      	bne.n	8007eca <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fa f98d 	bl	8002224 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f91c 	bl	800815c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f24:	e0fb      	b.n	800811e <HAL_UART_IRQHandler+0x726>
 8007f26:	bf00      	nop
 8007f28:	40020010 	.word	0x40020010
 8007f2c:	40020028 	.word	0x40020028
 8007f30:	40020040 	.word	0x40020040
 8007f34:	40020058 	.word	0x40020058
 8007f38:	40020070 	.word	0x40020070
 8007f3c:	40020088 	.word	0x40020088
 8007f40:	400200a0 	.word	0x400200a0
 8007f44:	400200b8 	.word	0x400200b8
 8007f48:	40020410 	.word	0x40020410
 8007f4c:	40020428 	.word	0x40020428
 8007f50:	40020440 	.word	0x40020440
 8007f54:	40020458 	.word	0x40020458
 8007f58:	40020470 	.word	0x40020470
 8007f5c:	40020488 	.word	0x40020488
 8007f60:	400204a0 	.word	0x400204a0
 8007f64:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f000 80cc 	beq.w	8008122 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8007f8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f000 80c7 	beq.w	8008122 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9c:	e853 3f00 	ldrex	r3, [r3]
 8007fa0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fa8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007fb6:	647b      	str	r3, [r7, #68]	; 0x44
 8007fb8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fbe:	e841 2300 	strex	r3, r2, [r1]
 8007fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1e4      	bne.n	8007f94 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	3308      	adds	r3, #8
 8007fd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	e853 3f00 	ldrex	r3, [r3]
 8007fd8:	623b      	str	r3, [r7, #32]
   return(result);
 8007fda:	6a3a      	ldr	r2, [r7, #32]
 8007fdc:	4b54      	ldr	r3, [pc, #336]	; (8008130 <HAL_UART_IRQHandler+0x738>)
 8007fde:	4013      	ands	r3, r2
 8007fe0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	3308      	adds	r3, #8
 8007fea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007fee:	633a      	str	r2, [r7, #48]	; 0x30
 8007ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ff6:	e841 2300 	strex	r3, r2, [r1]
 8007ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1e3      	bne.n	8007fca <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2220      	movs	r2, #32
 8008006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	e853 3f00 	ldrex	r3, [r3]
 8008022:	60fb      	str	r3, [r7, #12]
   return(result);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f023 0310 	bic.w	r3, r3, #16
 800802a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	461a      	mov	r2, r3
 8008034:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008038:	61fb      	str	r3, [r7, #28]
 800803a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803c:	69b9      	ldr	r1, [r7, #24]
 800803e:	69fa      	ldr	r2, [r7, #28]
 8008040:	e841 2300 	strex	r3, r2, [r1]
 8008044:	617b      	str	r3, [r7, #20]
   return(result);
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1e4      	bne.n	8008016 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800804c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008050:	4619      	mov	r1, r3
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f882 	bl	800815c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008058:	e063      	b.n	8008122 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800805a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800805e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00e      	beq.n	8008084 <HAL_UART_IRQHandler+0x68c>
 8008066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800806a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d008      	beq.n	8008084 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800807a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f001 f83e 	bl	80090fe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008082:	e051      	b.n	8008128 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800808c:	2b00      	cmp	r3, #0
 800808e:	d014      	beq.n	80080ba <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008098:	2b00      	cmp	r3, #0
 800809a:	d105      	bne.n	80080a8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800809c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d008      	beq.n	80080ba <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d03a      	beq.n	8008126 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	4798      	blx	r3
    }
    return;
 80080b8:	e035      	b.n	8008126 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80080ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d009      	beq.n	80080da <HAL_UART_IRQHandler+0x6e2>
 80080c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d003      	beq.n	80080da <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 ffe8 	bl	80090a8 <UART_EndTransmit_IT>
    return;
 80080d8:	e026      	b.n	8008128 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80080da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d009      	beq.n	80080fa <HAL_UART_IRQHandler+0x702>
 80080e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d003      	beq.n	80080fa <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f001 f817 	bl	8009126 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080f8:	e016      	b.n	8008128 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80080fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d010      	beq.n	8008128 <HAL_UART_IRQHandler+0x730>
 8008106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800810a:	2b00      	cmp	r3, #0
 800810c:	da0c      	bge.n	8008128 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 ffff 	bl	8009112 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008114:	e008      	b.n	8008128 <HAL_UART_IRQHandler+0x730>
      return;
 8008116:	bf00      	nop
 8008118:	e006      	b.n	8008128 <HAL_UART_IRQHandler+0x730>
    return;
 800811a:	bf00      	nop
 800811c:	e004      	b.n	8008128 <HAL_UART_IRQHandler+0x730>
      return;
 800811e:	bf00      	nop
 8008120:	e002      	b.n	8008128 <HAL_UART_IRQHandler+0x730>
      return;
 8008122:	bf00      	nop
 8008124:	e000      	b.n	8008128 <HAL_UART_IRQHandler+0x730>
    return;
 8008126:	bf00      	nop
  }
}
 8008128:	37e8      	adds	r7, #232	; 0xe8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	effffffe 	.word	0xeffffffe

08008134 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800813c:	bf00      	nop
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	460b      	mov	r3, r1
 8008166:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008178:	b092      	sub	sp, #72	; 0x48
 800817a:	af00      	add	r7, sp, #0
 800817c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	689a      	ldr	r2, [r3, #8]
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	431a      	orrs	r2, r3
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	431a      	orrs	r2, r3
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	69db      	ldr	r3, [r3, #28]
 8008198:	4313      	orrs	r3, r2
 800819a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	4bbe      	ldr	r3, [pc, #760]	; (800849c <UART_SetConfig+0x328>)
 80081a4:	4013      	ands	r3, r2
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	6812      	ldr	r2, [r2, #0]
 80081aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081ac:	430b      	orrs	r3, r1
 80081ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	68da      	ldr	r2, [r3, #12]
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4ab3      	ldr	r2, [pc, #716]	; (80084a0 <UART_SetConfig+0x32c>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d004      	beq.n	80081e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081dc:	4313      	orrs	r3, r2
 80081de:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	689a      	ldr	r2, [r3, #8]
 80081e6:	4baf      	ldr	r3, [pc, #700]	; (80084a4 <UART_SetConfig+0x330>)
 80081e8:	4013      	ands	r3, r2
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	6812      	ldr	r2, [r2, #0]
 80081ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081f0:	430b      	orrs	r3, r1
 80081f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fa:	f023 010f 	bic.w	r1, r3, #15
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	430a      	orrs	r2, r1
 8008208:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4aa6      	ldr	r2, [pc, #664]	; (80084a8 <UART_SetConfig+0x334>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d177      	bne.n	8008304 <UART_SetConfig+0x190>
 8008214:	4ba5      	ldr	r3, [pc, #660]	; (80084ac <UART_SetConfig+0x338>)
 8008216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008218:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800821c:	2b28      	cmp	r3, #40	; 0x28
 800821e:	d86d      	bhi.n	80082fc <UART_SetConfig+0x188>
 8008220:	a201      	add	r2, pc, #4	; (adr r2, 8008228 <UART_SetConfig+0xb4>)
 8008222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008226:	bf00      	nop
 8008228:	080082cd 	.word	0x080082cd
 800822c:	080082fd 	.word	0x080082fd
 8008230:	080082fd 	.word	0x080082fd
 8008234:	080082fd 	.word	0x080082fd
 8008238:	080082fd 	.word	0x080082fd
 800823c:	080082fd 	.word	0x080082fd
 8008240:	080082fd 	.word	0x080082fd
 8008244:	080082fd 	.word	0x080082fd
 8008248:	080082d5 	.word	0x080082d5
 800824c:	080082fd 	.word	0x080082fd
 8008250:	080082fd 	.word	0x080082fd
 8008254:	080082fd 	.word	0x080082fd
 8008258:	080082fd 	.word	0x080082fd
 800825c:	080082fd 	.word	0x080082fd
 8008260:	080082fd 	.word	0x080082fd
 8008264:	080082fd 	.word	0x080082fd
 8008268:	080082dd 	.word	0x080082dd
 800826c:	080082fd 	.word	0x080082fd
 8008270:	080082fd 	.word	0x080082fd
 8008274:	080082fd 	.word	0x080082fd
 8008278:	080082fd 	.word	0x080082fd
 800827c:	080082fd 	.word	0x080082fd
 8008280:	080082fd 	.word	0x080082fd
 8008284:	080082fd 	.word	0x080082fd
 8008288:	080082e5 	.word	0x080082e5
 800828c:	080082fd 	.word	0x080082fd
 8008290:	080082fd 	.word	0x080082fd
 8008294:	080082fd 	.word	0x080082fd
 8008298:	080082fd 	.word	0x080082fd
 800829c:	080082fd 	.word	0x080082fd
 80082a0:	080082fd 	.word	0x080082fd
 80082a4:	080082fd 	.word	0x080082fd
 80082a8:	080082ed 	.word	0x080082ed
 80082ac:	080082fd 	.word	0x080082fd
 80082b0:	080082fd 	.word	0x080082fd
 80082b4:	080082fd 	.word	0x080082fd
 80082b8:	080082fd 	.word	0x080082fd
 80082bc:	080082fd 	.word	0x080082fd
 80082c0:	080082fd 	.word	0x080082fd
 80082c4:	080082fd 	.word	0x080082fd
 80082c8:	080082f5 	.word	0x080082f5
 80082cc:	2301      	movs	r3, #1
 80082ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082d2:	e222      	b.n	800871a <UART_SetConfig+0x5a6>
 80082d4:	2304      	movs	r3, #4
 80082d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082da:	e21e      	b.n	800871a <UART_SetConfig+0x5a6>
 80082dc:	2308      	movs	r3, #8
 80082de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082e2:	e21a      	b.n	800871a <UART_SetConfig+0x5a6>
 80082e4:	2310      	movs	r3, #16
 80082e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ea:	e216      	b.n	800871a <UART_SetConfig+0x5a6>
 80082ec:	2320      	movs	r3, #32
 80082ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082f2:	e212      	b.n	800871a <UART_SetConfig+0x5a6>
 80082f4:	2340      	movs	r3, #64	; 0x40
 80082f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082fa:	e20e      	b.n	800871a <UART_SetConfig+0x5a6>
 80082fc:	2380      	movs	r3, #128	; 0x80
 80082fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008302:	e20a      	b.n	800871a <UART_SetConfig+0x5a6>
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a69      	ldr	r2, [pc, #420]	; (80084b0 <UART_SetConfig+0x33c>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d130      	bne.n	8008370 <UART_SetConfig+0x1fc>
 800830e:	4b67      	ldr	r3, [pc, #412]	; (80084ac <UART_SetConfig+0x338>)
 8008310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008312:	f003 0307 	and.w	r3, r3, #7
 8008316:	2b05      	cmp	r3, #5
 8008318:	d826      	bhi.n	8008368 <UART_SetConfig+0x1f4>
 800831a:	a201      	add	r2, pc, #4	; (adr r2, 8008320 <UART_SetConfig+0x1ac>)
 800831c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008320:	08008339 	.word	0x08008339
 8008324:	08008341 	.word	0x08008341
 8008328:	08008349 	.word	0x08008349
 800832c:	08008351 	.word	0x08008351
 8008330:	08008359 	.word	0x08008359
 8008334:	08008361 	.word	0x08008361
 8008338:	2300      	movs	r3, #0
 800833a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800833e:	e1ec      	b.n	800871a <UART_SetConfig+0x5a6>
 8008340:	2304      	movs	r3, #4
 8008342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008346:	e1e8      	b.n	800871a <UART_SetConfig+0x5a6>
 8008348:	2308      	movs	r3, #8
 800834a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800834e:	e1e4      	b.n	800871a <UART_SetConfig+0x5a6>
 8008350:	2310      	movs	r3, #16
 8008352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008356:	e1e0      	b.n	800871a <UART_SetConfig+0x5a6>
 8008358:	2320      	movs	r3, #32
 800835a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800835e:	e1dc      	b.n	800871a <UART_SetConfig+0x5a6>
 8008360:	2340      	movs	r3, #64	; 0x40
 8008362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008366:	e1d8      	b.n	800871a <UART_SetConfig+0x5a6>
 8008368:	2380      	movs	r3, #128	; 0x80
 800836a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800836e:	e1d4      	b.n	800871a <UART_SetConfig+0x5a6>
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a4f      	ldr	r2, [pc, #316]	; (80084b4 <UART_SetConfig+0x340>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d130      	bne.n	80083dc <UART_SetConfig+0x268>
 800837a:	4b4c      	ldr	r3, [pc, #304]	; (80084ac <UART_SetConfig+0x338>)
 800837c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800837e:	f003 0307 	and.w	r3, r3, #7
 8008382:	2b05      	cmp	r3, #5
 8008384:	d826      	bhi.n	80083d4 <UART_SetConfig+0x260>
 8008386:	a201      	add	r2, pc, #4	; (adr r2, 800838c <UART_SetConfig+0x218>)
 8008388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838c:	080083a5 	.word	0x080083a5
 8008390:	080083ad 	.word	0x080083ad
 8008394:	080083b5 	.word	0x080083b5
 8008398:	080083bd 	.word	0x080083bd
 800839c:	080083c5 	.word	0x080083c5
 80083a0:	080083cd 	.word	0x080083cd
 80083a4:	2300      	movs	r3, #0
 80083a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083aa:	e1b6      	b.n	800871a <UART_SetConfig+0x5a6>
 80083ac:	2304      	movs	r3, #4
 80083ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083b2:	e1b2      	b.n	800871a <UART_SetConfig+0x5a6>
 80083b4:	2308      	movs	r3, #8
 80083b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ba:	e1ae      	b.n	800871a <UART_SetConfig+0x5a6>
 80083bc:	2310      	movs	r3, #16
 80083be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083c2:	e1aa      	b.n	800871a <UART_SetConfig+0x5a6>
 80083c4:	2320      	movs	r3, #32
 80083c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ca:	e1a6      	b.n	800871a <UART_SetConfig+0x5a6>
 80083cc:	2340      	movs	r3, #64	; 0x40
 80083ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083d2:	e1a2      	b.n	800871a <UART_SetConfig+0x5a6>
 80083d4:	2380      	movs	r3, #128	; 0x80
 80083d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083da:	e19e      	b.n	800871a <UART_SetConfig+0x5a6>
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a35      	ldr	r2, [pc, #212]	; (80084b8 <UART_SetConfig+0x344>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d130      	bne.n	8008448 <UART_SetConfig+0x2d4>
 80083e6:	4b31      	ldr	r3, [pc, #196]	; (80084ac <UART_SetConfig+0x338>)
 80083e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ea:	f003 0307 	and.w	r3, r3, #7
 80083ee:	2b05      	cmp	r3, #5
 80083f0:	d826      	bhi.n	8008440 <UART_SetConfig+0x2cc>
 80083f2:	a201      	add	r2, pc, #4	; (adr r2, 80083f8 <UART_SetConfig+0x284>)
 80083f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f8:	08008411 	.word	0x08008411
 80083fc:	08008419 	.word	0x08008419
 8008400:	08008421 	.word	0x08008421
 8008404:	08008429 	.word	0x08008429
 8008408:	08008431 	.word	0x08008431
 800840c:	08008439 	.word	0x08008439
 8008410:	2300      	movs	r3, #0
 8008412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008416:	e180      	b.n	800871a <UART_SetConfig+0x5a6>
 8008418:	2304      	movs	r3, #4
 800841a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800841e:	e17c      	b.n	800871a <UART_SetConfig+0x5a6>
 8008420:	2308      	movs	r3, #8
 8008422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008426:	e178      	b.n	800871a <UART_SetConfig+0x5a6>
 8008428:	2310      	movs	r3, #16
 800842a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800842e:	e174      	b.n	800871a <UART_SetConfig+0x5a6>
 8008430:	2320      	movs	r3, #32
 8008432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008436:	e170      	b.n	800871a <UART_SetConfig+0x5a6>
 8008438:	2340      	movs	r3, #64	; 0x40
 800843a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800843e:	e16c      	b.n	800871a <UART_SetConfig+0x5a6>
 8008440:	2380      	movs	r3, #128	; 0x80
 8008442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008446:	e168      	b.n	800871a <UART_SetConfig+0x5a6>
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a1b      	ldr	r2, [pc, #108]	; (80084bc <UART_SetConfig+0x348>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d142      	bne.n	80084d8 <UART_SetConfig+0x364>
 8008452:	4b16      	ldr	r3, [pc, #88]	; (80084ac <UART_SetConfig+0x338>)
 8008454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008456:	f003 0307 	and.w	r3, r3, #7
 800845a:	2b05      	cmp	r3, #5
 800845c:	d838      	bhi.n	80084d0 <UART_SetConfig+0x35c>
 800845e:	a201      	add	r2, pc, #4	; (adr r2, 8008464 <UART_SetConfig+0x2f0>)
 8008460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008464:	0800847d 	.word	0x0800847d
 8008468:	08008485 	.word	0x08008485
 800846c:	0800848d 	.word	0x0800848d
 8008470:	08008495 	.word	0x08008495
 8008474:	080084c1 	.word	0x080084c1
 8008478:	080084c9 	.word	0x080084c9
 800847c:	2300      	movs	r3, #0
 800847e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008482:	e14a      	b.n	800871a <UART_SetConfig+0x5a6>
 8008484:	2304      	movs	r3, #4
 8008486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800848a:	e146      	b.n	800871a <UART_SetConfig+0x5a6>
 800848c:	2308      	movs	r3, #8
 800848e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008492:	e142      	b.n	800871a <UART_SetConfig+0x5a6>
 8008494:	2310      	movs	r3, #16
 8008496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800849a:	e13e      	b.n	800871a <UART_SetConfig+0x5a6>
 800849c:	cfff69f3 	.word	0xcfff69f3
 80084a0:	58000c00 	.word	0x58000c00
 80084a4:	11fff4ff 	.word	0x11fff4ff
 80084a8:	40011000 	.word	0x40011000
 80084ac:	58024400 	.word	0x58024400
 80084b0:	40004400 	.word	0x40004400
 80084b4:	40004800 	.word	0x40004800
 80084b8:	40004c00 	.word	0x40004c00
 80084bc:	40005000 	.word	0x40005000
 80084c0:	2320      	movs	r3, #32
 80084c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084c6:	e128      	b.n	800871a <UART_SetConfig+0x5a6>
 80084c8:	2340      	movs	r3, #64	; 0x40
 80084ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ce:	e124      	b.n	800871a <UART_SetConfig+0x5a6>
 80084d0:	2380      	movs	r3, #128	; 0x80
 80084d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084d6:	e120      	b.n	800871a <UART_SetConfig+0x5a6>
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4acb      	ldr	r2, [pc, #812]	; (800880c <UART_SetConfig+0x698>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d176      	bne.n	80085d0 <UART_SetConfig+0x45c>
 80084e2:	4bcb      	ldr	r3, [pc, #812]	; (8008810 <UART_SetConfig+0x69c>)
 80084e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084ea:	2b28      	cmp	r3, #40	; 0x28
 80084ec:	d86c      	bhi.n	80085c8 <UART_SetConfig+0x454>
 80084ee:	a201      	add	r2, pc, #4	; (adr r2, 80084f4 <UART_SetConfig+0x380>)
 80084f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f4:	08008599 	.word	0x08008599
 80084f8:	080085c9 	.word	0x080085c9
 80084fc:	080085c9 	.word	0x080085c9
 8008500:	080085c9 	.word	0x080085c9
 8008504:	080085c9 	.word	0x080085c9
 8008508:	080085c9 	.word	0x080085c9
 800850c:	080085c9 	.word	0x080085c9
 8008510:	080085c9 	.word	0x080085c9
 8008514:	080085a1 	.word	0x080085a1
 8008518:	080085c9 	.word	0x080085c9
 800851c:	080085c9 	.word	0x080085c9
 8008520:	080085c9 	.word	0x080085c9
 8008524:	080085c9 	.word	0x080085c9
 8008528:	080085c9 	.word	0x080085c9
 800852c:	080085c9 	.word	0x080085c9
 8008530:	080085c9 	.word	0x080085c9
 8008534:	080085a9 	.word	0x080085a9
 8008538:	080085c9 	.word	0x080085c9
 800853c:	080085c9 	.word	0x080085c9
 8008540:	080085c9 	.word	0x080085c9
 8008544:	080085c9 	.word	0x080085c9
 8008548:	080085c9 	.word	0x080085c9
 800854c:	080085c9 	.word	0x080085c9
 8008550:	080085c9 	.word	0x080085c9
 8008554:	080085b1 	.word	0x080085b1
 8008558:	080085c9 	.word	0x080085c9
 800855c:	080085c9 	.word	0x080085c9
 8008560:	080085c9 	.word	0x080085c9
 8008564:	080085c9 	.word	0x080085c9
 8008568:	080085c9 	.word	0x080085c9
 800856c:	080085c9 	.word	0x080085c9
 8008570:	080085c9 	.word	0x080085c9
 8008574:	080085b9 	.word	0x080085b9
 8008578:	080085c9 	.word	0x080085c9
 800857c:	080085c9 	.word	0x080085c9
 8008580:	080085c9 	.word	0x080085c9
 8008584:	080085c9 	.word	0x080085c9
 8008588:	080085c9 	.word	0x080085c9
 800858c:	080085c9 	.word	0x080085c9
 8008590:	080085c9 	.word	0x080085c9
 8008594:	080085c1 	.word	0x080085c1
 8008598:	2301      	movs	r3, #1
 800859a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800859e:	e0bc      	b.n	800871a <UART_SetConfig+0x5a6>
 80085a0:	2304      	movs	r3, #4
 80085a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085a6:	e0b8      	b.n	800871a <UART_SetConfig+0x5a6>
 80085a8:	2308      	movs	r3, #8
 80085aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ae:	e0b4      	b.n	800871a <UART_SetConfig+0x5a6>
 80085b0:	2310      	movs	r3, #16
 80085b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085b6:	e0b0      	b.n	800871a <UART_SetConfig+0x5a6>
 80085b8:	2320      	movs	r3, #32
 80085ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085be:	e0ac      	b.n	800871a <UART_SetConfig+0x5a6>
 80085c0:	2340      	movs	r3, #64	; 0x40
 80085c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085c6:	e0a8      	b.n	800871a <UART_SetConfig+0x5a6>
 80085c8:	2380      	movs	r3, #128	; 0x80
 80085ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ce:	e0a4      	b.n	800871a <UART_SetConfig+0x5a6>
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a8f      	ldr	r2, [pc, #572]	; (8008814 <UART_SetConfig+0x6a0>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d130      	bne.n	800863c <UART_SetConfig+0x4c8>
 80085da:	4b8d      	ldr	r3, [pc, #564]	; (8008810 <UART_SetConfig+0x69c>)
 80085dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085de:	f003 0307 	and.w	r3, r3, #7
 80085e2:	2b05      	cmp	r3, #5
 80085e4:	d826      	bhi.n	8008634 <UART_SetConfig+0x4c0>
 80085e6:	a201      	add	r2, pc, #4	; (adr r2, 80085ec <UART_SetConfig+0x478>)
 80085e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ec:	08008605 	.word	0x08008605
 80085f0:	0800860d 	.word	0x0800860d
 80085f4:	08008615 	.word	0x08008615
 80085f8:	0800861d 	.word	0x0800861d
 80085fc:	08008625 	.word	0x08008625
 8008600:	0800862d 	.word	0x0800862d
 8008604:	2300      	movs	r3, #0
 8008606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800860a:	e086      	b.n	800871a <UART_SetConfig+0x5a6>
 800860c:	2304      	movs	r3, #4
 800860e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008612:	e082      	b.n	800871a <UART_SetConfig+0x5a6>
 8008614:	2308      	movs	r3, #8
 8008616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800861a:	e07e      	b.n	800871a <UART_SetConfig+0x5a6>
 800861c:	2310      	movs	r3, #16
 800861e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008622:	e07a      	b.n	800871a <UART_SetConfig+0x5a6>
 8008624:	2320      	movs	r3, #32
 8008626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800862a:	e076      	b.n	800871a <UART_SetConfig+0x5a6>
 800862c:	2340      	movs	r3, #64	; 0x40
 800862e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008632:	e072      	b.n	800871a <UART_SetConfig+0x5a6>
 8008634:	2380      	movs	r3, #128	; 0x80
 8008636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800863a:	e06e      	b.n	800871a <UART_SetConfig+0x5a6>
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a75      	ldr	r2, [pc, #468]	; (8008818 <UART_SetConfig+0x6a4>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d130      	bne.n	80086a8 <UART_SetConfig+0x534>
 8008646:	4b72      	ldr	r3, [pc, #456]	; (8008810 <UART_SetConfig+0x69c>)
 8008648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800864a:	f003 0307 	and.w	r3, r3, #7
 800864e:	2b05      	cmp	r3, #5
 8008650:	d826      	bhi.n	80086a0 <UART_SetConfig+0x52c>
 8008652:	a201      	add	r2, pc, #4	; (adr r2, 8008658 <UART_SetConfig+0x4e4>)
 8008654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008658:	08008671 	.word	0x08008671
 800865c:	08008679 	.word	0x08008679
 8008660:	08008681 	.word	0x08008681
 8008664:	08008689 	.word	0x08008689
 8008668:	08008691 	.word	0x08008691
 800866c:	08008699 	.word	0x08008699
 8008670:	2300      	movs	r3, #0
 8008672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008676:	e050      	b.n	800871a <UART_SetConfig+0x5a6>
 8008678:	2304      	movs	r3, #4
 800867a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800867e:	e04c      	b.n	800871a <UART_SetConfig+0x5a6>
 8008680:	2308      	movs	r3, #8
 8008682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008686:	e048      	b.n	800871a <UART_SetConfig+0x5a6>
 8008688:	2310      	movs	r3, #16
 800868a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800868e:	e044      	b.n	800871a <UART_SetConfig+0x5a6>
 8008690:	2320      	movs	r3, #32
 8008692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008696:	e040      	b.n	800871a <UART_SetConfig+0x5a6>
 8008698:	2340      	movs	r3, #64	; 0x40
 800869a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800869e:	e03c      	b.n	800871a <UART_SetConfig+0x5a6>
 80086a0:	2380      	movs	r3, #128	; 0x80
 80086a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086a6:	e038      	b.n	800871a <UART_SetConfig+0x5a6>
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a5b      	ldr	r2, [pc, #364]	; (800881c <UART_SetConfig+0x6a8>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d130      	bne.n	8008714 <UART_SetConfig+0x5a0>
 80086b2:	4b57      	ldr	r3, [pc, #348]	; (8008810 <UART_SetConfig+0x69c>)
 80086b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086b6:	f003 0307 	and.w	r3, r3, #7
 80086ba:	2b05      	cmp	r3, #5
 80086bc:	d826      	bhi.n	800870c <UART_SetConfig+0x598>
 80086be:	a201      	add	r2, pc, #4	; (adr r2, 80086c4 <UART_SetConfig+0x550>)
 80086c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c4:	080086dd 	.word	0x080086dd
 80086c8:	080086e5 	.word	0x080086e5
 80086cc:	080086ed 	.word	0x080086ed
 80086d0:	080086f5 	.word	0x080086f5
 80086d4:	080086fd 	.word	0x080086fd
 80086d8:	08008705 	.word	0x08008705
 80086dc:	2302      	movs	r3, #2
 80086de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086e2:	e01a      	b.n	800871a <UART_SetConfig+0x5a6>
 80086e4:	2304      	movs	r3, #4
 80086e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ea:	e016      	b.n	800871a <UART_SetConfig+0x5a6>
 80086ec:	2308      	movs	r3, #8
 80086ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086f2:	e012      	b.n	800871a <UART_SetConfig+0x5a6>
 80086f4:	2310      	movs	r3, #16
 80086f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086fa:	e00e      	b.n	800871a <UART_SetConfig+0x5a6>
 80086fc:	2320      	movs	r3, #32
 80086fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008702:	e00a      	b.n	800871a <UART_SetConfig+0x5a6>
 8008704:	2340      	movs	r3, #64	; 0x40
 8008706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800870a:	e006      	b.n	800871a <UART_SetConfig+0x5a6>
 800870c:	2380      	movs	r3, #128	; 0x80
 800870e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008712:	e002      	b.n	800871a <UART_SetConfig+0x5a6>
 8008714:	2380      	movs	r3, #128	; 0x80
 8008716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a3f      	ldr	r2, [pc, #252]	; (800881c <UART_SetConfig+0x6a8>)
 8008720:	4293      	cmp	r3, r2
 8008722:	f040 80f8 	bne.w	8008916 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008726:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800872a:	2b20      	cmp	r3, #32
 800872c:	dc46      	bgt.n	80087bc <UART_SetConfig+0x648>
 800872e:	2b02      	cmp	r3, #2
 8008730:	f2c0 8082 	blt.w	8008838 <UART_SetConfig+0x6c4>
 8008734:	3b02      	subs	r3, #2
 8008736:	2b1e      	cmp	r3, #30
 8008738:	d87e      	bhi.n	8008838 <UART_SetConfig+0x6c4>
 800873a:	a201      	add	r2, pc, #4	; (adr r2, 8008740 <UART_SetConfig+0x5cc>)
 800873c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008740:	080087c3 	.word	0x080087c3
 8008744:	08008839 	.word	0x08008839
 8008748:	080087cb 	.word	0x080087cb
 800874c:	08008839 	.word	0x08008839
 8008750:	08008839 	.word	0x08008839
 8008754:	08008839 	.word	0x08008839
 8008758:	080087db 	.word	0x080087db
 800875c:	08008839 	.word	0x08008839
 8008760:	08008839 	.word	0x08008839
 8008764:	08008839 	.word	0x08008839
 8008768:	08008839 	.word	0x08008839
 800876c:	08008839 	.word	0x08008839
 8008770:	08008839 	.word	0x08008839
 8008774:	08008839 	.word	0x08008839
 8008778:	080087eb 	.word	0x080087eb
 800877c:	08008839 	.word	0x08008839
 8008780:	08008839 	.word	0x08008839
 8008784:	08008839 	.word	0x08008839
 8008788:	08008839 	.word	0x08008839
 800878c:	08008839 	.word	0x08008839
 8008790:	08008839 	.word	0x08008839
 8008794:	08008839 	.word	0x08008839
 8008798:	08008839 	.word	0x08008839
 800879c:	08008839 	.word	0x08008839
 80087a0:	08008839 	.word	0x08008839
 80087a4:	08008839 	.word	0x08008839
 80087a8:	08008839 	.word	0x08008839
 80087ac:	08008839 	.word	0x08008839
 80087b0:	08008839 	.word	0x08008839
 80087b4:	08008839 	.word	0x08008839
 80087b8:	0800882b 	.word	0x0800882b
 80087bc:	2b40      	cmp	r3, #64	; 0x40
 80087be:	d037      	beq.n	8008830 <UART_SetConfig+0x6bc>
 80087c0:	e03a      	b.n	8008838 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80087c2:	f7fe fca7 	bl	8007114 <HAL_RCCEx_GetD3PCLK1Freq>
 80087c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80087c8:	e03c      	b.n	8008844 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fe fcb6 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80087d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087d8:	e034      	b.n	8008844 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087da:	f107 0318 	add.w	r3, r7, #24
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fe fe02 	bl	80073e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087e8:	e02c      	b.n	8008844 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087ea:	4b09      	ldr	r3, [pc, #36]	; (8008810 <UART_SetConfig+0x69c>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 0320 	and.w	r3, r3, #32
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d016      	beq.n	8008824 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80087f6:	4b06      	ldr	r3, [pc, #24]	; (8008810 <UART_SetConfig+0x69c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	08db      	lsrs	r3, r3, #3
 80087fc:	f003 0303 	and.w	r3, r3, #3
 8008800:	4a07      	ldr	r2, [pc, #28]	; (8008820 <UART_SetConfig+0x6ac>)
 8008802:	fa22 f303 	lsr.w	r3, r2, r3
 8008806:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008808:	e01c      	b.n	8008844 <UART_SetConfig+0x6d0>
 800880a:	bf00      	nop
 800880c:	40011400 	.word	0x40011400
 8008810:	58024400 	.word	0x58024400
 8008814:	40007800 	.word	0x40007800
 8008818:	40007c00 	.word	0x40007c00
 800881c:	58000c00 	.word	0x58000c00
 8008820:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008824:	4b9d      	ldr	r3, [pc, #628]	; (8008a9c <UART_SetConfig+0x928>)
 8008826:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008828:	e00c      	b.n	8008844 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800882a:	4b9d      	ldr	r3, [pc, #628]	; (8008aa0 <UART_SetConfig+0x92c>)
 800882c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800882e:	e009      	b.n	8008844 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008830:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008834:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008836:	e005      	b.n	8008844 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008838:	2300      	movs	r3, #0
 800883a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008842:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008846:	2b00      	cmp	r3, #0
 8008848:	f000 81de 	beq.w	8008c08 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008850:	4a94      	ldr	r2, [pc, #592]	; (8008aa4 <UART_SetConfig+0x930>)
 8008852:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008856:	461a      	mov	r2, r3
 8008858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800885a:	fbb3 f3f2 	udiv	r3, r3, r2
 800885e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	685a      	ldr	r2, [r3, #4]
 8008864:	4613      	mov	r3, r2
 8008866:	005b      	lsls	r3, r3, #1
 8008868:	4413      	add	r3, r2
 800886a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800886c:	429a      	cmp	r2, r3
 800886e:	d305      	bcc.n	800887c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008878:	429a      	cmp	r2, r3
 800887a:	d903      	bls.n	8008884 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008882:	e1c1      	b.n	8008c08 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008886:	2200      	movs	r2, #0
 8008888:	60bb      	str	r3, [r7, #8]
 800888a:	60fa      	str	r2, [r7, #12]
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008890:	4a84      	ldr	r2, [pc, #528]	; (8008aa4 <UART_SetConfig+0x930>)
 8008892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008896:	b29b      	uxth	r3, r3
 8008898:	2200      	movs	r2, #0
 800889a:	603b      	str	r3, [r7, #0]
 800889c:	607a      	str	r2, [r7, #4]
 800889e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80088a6:	f7f7 fd17 	bl	80002d8 <__aeabi_uldivmod>
 80088aa:	4602      	mov	r2, r0
 80088ac:	460b      	mov	r3, r1
 80088ae:	4610      	mov	r0, r2
 80088b0:	4619      	mov	r1, r3
 80088b2:	f04f 0200 	mov.w	r2, #0
 80088b6:	f04f 0300 	mov.w	r3, #0
 80088ba:	020b      	lsls	r3, r1, #8
 80088bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80088c0:	0202      	lsls	r2, r0, #8
 80088c2:	6979      	ldr	r1, [r7, #20]
 80088c4:	6849      	ldr	r1, [r1, #4]
 80088c6:	0849      	lsrs	r1, r1, #1
 80088c8:	2000      	movs	r0, #0
 80088ca:	460c      	mov	r4, r1
 80088cc:	4605      	mov	r5, r0
 80088ce:	eb12 0804 	adds.w	r8, r2, r4
 80088d2:	eb43 0905 	adc.w	r9, r3, r5
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	469a      	mov	sl, r3
 80088de:	4693      	mov	fp, r2
 80088e0:	4652      	mov	r2, sl
 80088e2:	465b      	mov	r3, fp
 80088e4:	4640      	mov	r0, r8
 80088e6:	4649      	mov	r1, r9
 80088e8:	f7f7 fcf6 	bl	80002d8 <__aeabi_uldivmod>
 80088ec:	4602      	mov	r2, r0
 80088ee:	460b      	mov	r3, r1
 80088f0:	4613      	mov	r3, r2
 80088f2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80088f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088fa:	d308      	bcc.n	800890e <UART_SetConfig+0x79a>
 80088fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008902:	d204      	bcs.n	800890e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800890a:	60da      	str	r2, [r3, #12]
 800890c:	e17c      	b.n	8008c08 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008914:	e178      	b.n	8008c08 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	69db      	ldr	r3, [r3, #28]
 800891a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800891e:	f040 80c5 	bne.w	8008aac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008922:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008926:	2b20      	cmp	r3, #32
 8008928:	dc48      	bgt.n	80089bc <UART_SetConfig+0x848>
 800892a:	2b00      	cmp	r3, #0
 800892c:	db7b      	blt.n	8008a26 <UART_SetConfig+0x8b2>
 800892e:	2b20      	cmp	r3, #32
 8008930:	d879      	bhi.n	8008a26 <UART_SetConfig+0x8b2>
 8008932:	a201      	add	r2, pc, #4	; (adr r2, 8008938 <UART_SetConfig+0x7c4>)
 8008934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008938:	080089c3 	.word	0x080089c3
 800893c:	080089cb 	.word	0x080089cb
 8008940:	08008a27 	.word	0x08008a27
 8008944:	08008a27 	.word	0x08008a27
 8008948:	080089d3 	.word	0x080089d3
 800894c:	08008a27 	.word	0x08008a27
 8008950:	08008a27 	.word	0x08008a27
 8008954:	08008a27 	.word	0x08008a27
 8008958:	080089e3 	.word	0x080089e3
 800895c:	08008a27 	.word	0x08008a27
 8008960:	08008a27 	.word	0x08008a27
 8008964:	08008a27 	.word	0x08008a27
 8008968:	08008a27 	.word	0x08008a27
 800896c:	08008a27 	.word	0x08008a27
 8008970:	08008a27 	.word	0x08008a27
 8008974:	08008a27 	.word	0x08008a27
 8008978:	080089f3 	.word	0x080089f3
 800897c:	08008a27 	.word	0x08008a27
 8008980:	08008a27 	.word	0x08008a27
 8008984:	08008a27 	.word	0x08008a27
 8008988:	08008a27 	.word	0x08008a27
 800898c:	08008a27 	.word	0x08008a27
 8008990:	08008a27 	.word	0x08008a27
 8008994:	08008a27 	.word	0x08008a27
 8008998:	08008a27 	.word	0x08008a27
 800899c:	08008a27 	.word	0x08008a27
 80089a0:	08008a27 	.word	0x08008a27
 80089a4:	08008a27 	.word	0x08008a27
 80089a8:	08008a27 	.word	0x08008a27
 80089ac:	08008a27 	.word	0x08008a27
 80089b0:	08008a27 	.word	0x08008a27
 80089b4:	08008a27 	.word	0x08008a27
 80089b8:	08008a19 	.word	0x08008a19
 80089bc:	2b40      	cmp	r3, #64	; 0x40
 80089be:	d02e      	beq.n	8008a1e <UART_SetConfig+0x8aa>
 80089c0:	e031      	b.n	8008a26 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089c2:	f7fd fc35 	bl	8006230 <HAL_RCC_GetPCLK1Freq>
 80089c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80089c8:	e033      	b.n	8008a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089ca:	f7fd fc47 	bl	800625c <HAL_RCC_GetPCLK2Freq>
 80089ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80089d0:	e02f      	b.n	8008a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fe fbb2 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80089dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089e0:	e027      	b.n	8008a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089e2:	f107 0318 	add.w	r3, r7, #24
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fe fcfe 	bl	80073e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089f0:	e01f      	b.n	8008a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089f2:	4b2d      	ldr	r3, [pc, #180]	; (8008aa8 <UART_SetConfig+0x934>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 0320 	and.w	r3, r3, #32
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d009      	beq.n	8008a12 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80089fe:	4b2a      	ldr	r3, [pc, #168]	; (8008aa8 <UART_SetConfig+0x934>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	08db      	lsrs	r3, r3, #3
 8008a04:	f003 0303 	and.w	r3, r3, #3
 8008a08:	4a24      	ldr	r2, [pc, #144]	; (8008a9c <UART_SetConfig+0x928>)
 8008a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a10:	e00f      	b.n	8008a32 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008a12:	4b22      	ldr	r3, [pc, #136]	; (8008a9c <UART_SetConfig+0x928>)
 8008a14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a16:	e00c      	b.n	8008a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a18:	4b21      	ldr	r3, [pc, #132]	; (8008aa0 <UART_SetConfig+0x92c>)
 8008a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a1c:	e009      	b.n	8008a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a24:	e005      	b.n	8008a32 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008a26:	2300      	movs	r3, #0
 8008a28:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008a30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f000 80e7 	beq.w	8008c08 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3e:	4a19      	ldr	r2, [pc, #100]	; (8008aa4 <UART_SetConfig+0x930>)
 8008a40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a44:	461a      	mov	r2, r3
 8008a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a48:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a4c:	005a      	lsls	r2, r3, #1
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	085b      	lsrs	r3, r3, #1
 8008a54:	441a      	add	r2, r3
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a5e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a62:	2b0f      	cmp	r3, #15
 8008a64:	d916      	bls.n	8008a94 <UART_SetConfig+0x920>
 8008a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a6c:	d212      	bcs.n	8008a94 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	f023 030f 	bic.w	r3, r3, #15
 8008a76:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7a:	085b      	lsrs	r3, r3, #1
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	f003 0307 	and.w	r3, r3, #7
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008a86:	4313      	orrs	r3, r2
 8008a88:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008a90:	60da      	str	r2, [r3, #12]
 8008a92:	e0b9      	b.n	8008c08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008a9a:	e0b5      	b.n	8008c08 <UART_SetConfig+0xa94>
 8008a9c:	03d09000 	.word	0x03d09000
 8008aa0:	003d0900 	.word	0x003d0900
 8008aa4:	0800a1b8 	.word	0x0800a1b8
 8008aa8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008aac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008ab0:	2b20      	cmp	r3, #32
 8008ab2:	dc49      	bgt.n	8008b48 <UART_SetConfig+0x9d4>
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	db7c      	blt.n	8008bb2 <UART_SetConfig+0xa3e>
 8008ab8:	2b20      	cmp	r3, #32
 8008aba:	d87a      	bhi.n	8008bb2 <UART_SetConfig+0xa3e>
 8008abc:	a201      	add	r2, pc, #4	; (adr r2, 8008ac4 <UART_SetConfig+0x950>)
 8008abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac2:	bf00      	nop
 8008ac4:	08008b4f 	.word	0x08008b4f
 8008ac8:	08008b57 	.word	0x08008b57
 8008acc:	08008bb3 	.word	0x08008bb3
 8008ad0:	08008bb3 	.word	0x08008bb3
 8008ad4:	08008b5f 	.word	0x08008b5f
 8008ad8:	08008bb3 	.word	0x08008bb3
 8008adc:	08008bb3 	.word	0x08008bb3
 8008ae0:	08008bb3 	.word	0x08008bb3
 8008ae4:	08008b6f 	.word	0x08008b6f
 8008ae8:	08008bb3 	.word	0x08008bb3
 8008aec:	08008bb3 	.word	0x08008bb3
 8008af0:	08008bb3 	.word	0x08008bb3
 8008af4:	08008bb3 	.word	0x08008bb3
 8008af8:	08008bb3 	.word	0x08008bb3
 8008afc:	08008bb3 	.word	0x08008bb3
 8008b00:	08008bb3 	.word	0x08008bb3
 8008b04:	08008b7f 	.word	0x08008b7f
 8008b08:	08008bb3 	.word	0x08008bb3
 8008b0c:	08008bb3 	.word	0x08008bb3
 8008b10:	08008bb3 	.word	0x08008bb3
 8008b14:	08008bb3 	.word	0x08008bb3
 8008b18:	08008bb3 	.word	0x08008bb3
 8008b1c:	08008bb3 	.word	0x08008bb3
 8008b20:	08008bb3 	.word	0x08008bb3
 8008b24:	08008bb3 	.word	0x08008bb3
 8008b28:	08008bb3 	.word	0x08008bb3
 8008b2c:	08008bb3 	.word	0x08008bb3
 8008b30:	08008bb3 	.word	0x08008bb3
 8008b34:	08008bb3 	.word	0x08008bb3
 8008b38:	08008bb3 	.word	0x08008bb3
 8008b3c:	08008bb3 	.word	0x08008bb3
 8008b40:	08008bb3 	.word	0x08008bb3
 8008b44:	08008ba5 	.word	0x08008ba5
 8008b48:	2b40      	cmp	r3, #64	; 0x40
 8008b4a:	d02e      	beq.n	8008baa <UART_SetConfig+0xa36>
 8008b4c:	e031      	b.n	8008bb2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b4e:	f7fd fb6f 	bl	8006230 <HAL_RCC_GetPCLK1Freq>
 8008b52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b54:	e033      	b.n	8008bbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b56:	f7fd fb81 	bl	800625c <HAL_RCC_GetPCLK2Freq>
 8008b5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b5c:	e02f      	b.n	8008bbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fe faec 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b6c:	e027      	b.n	8008bbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b6e:	f107 0318 	add.w	r3, r7, #24
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7fe fc38 	bl	80073e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b7c:	e01f      	b.n	8008bbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b7e:	4b2d      	ldr	r3, [pc, #180]	; (8008c34 <UART_SetConfig+0xac0>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 0320 	and.w	r3, r3, #32
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d009      	beq.n	8008b9e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b8a:	4b2a      	ldr	r3, [pc, #168]	; (8008c34 <UART_SetConfig+0xac0>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	08db      	lsrs	r3, r3, #3
 8008b90:	f003 0303 	and.w	r3, r3, #3
 8008b94:	4a28      	ldr	r2, [pc, #160]	; (8008c38 <UART_SetConfig+0xac4>)
 8008b96:	fa22 f303 	lsr.w	r3, r2, r3
 8008b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b9c:	e00f      	b.n	8008bbe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008b9e:	4b26      	ldr	r3, [pc, #152]	; (8008c38 <UART_SetConfig+0xac4>)
 8008ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ba2:	e00c      	b.n	8008bbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ba4:	4b25      	ldr	r3, [pc, #148]	; (8008c3c <UART_SetConfig+0xac8>)
 8008ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ba8:	e009      	b.n	8008bbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bb0:	e005      	b.n	8008bbe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008bbc:	bf00      	nop
    }

    if (pclk != 0U)
 8008bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d021      	beq.n	8008c08 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc8:	4a1d      	ldr	r2, [pc, #116]	; (8008c40 <UART_SetConfig+0xacc>)
 8008bca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bce:	461a      	mov	r2, r3
 8008bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	085b      	lsrs	r3, r3, #1
 8008bdc:	441a      	add	r2, r3
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008be6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bea:	2b0f      	cmp	r3, #15
 8008bec:	d909      	bls.n	8008c02 <UART_SetConfig+0xa8e>
 8008bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bf4:	d205      	bcs.n	8008c02 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	60da      	str	r2, [r3, #12]
 8008c00:	e002      	b.n	8008c08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	2200      	movs	r2, #0
 8008c22:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008c24:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3748      	adds	r7, #72	; 0x48
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c32:	bf00      	nop
 8008c34:	58024400 	.word	0x58024400
 8008c38:	03d09000 	.word	0x03d09000
 8008c3c:	003d0900 	.word	0x003d0900
 8008c40:	0800a1b8 	.word	0x0800a1b8

08008c44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c50:	f003 0301 	and.w	r3, r3, #1
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d00a      	beq.n	8008c6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	430a      	orrs	r2, r1
 8008c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c72:	f003 0302 	and.w	r3, r3, #2
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00a      	beq.n	8008c90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	430a      	orrs	r2, r1
 8008c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c94:	f003 0304 	and.w	r3, r3, #4
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00a      	beq.n	8008cb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	430a      	orrs	r2, r1
 8008cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb6:	f003 0308 	and.w	r3, r3, #8
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00a      	beq.n	8008cd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	430a      	orrs	r2, r1
 8008cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd8:	f003 0310 	and.w	r3, r3, #16
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00a      	beq.n	8008cf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	430a      	orrs	r2, r1
 8008cf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfa:	f003 0320 	and.w	r3, r3, #32
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00a      	beq.n	8008d18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	430a      	orrs	r2, r1
 8008d16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d01a      	beq.n	8008d5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	430a      	orrs	r2, r1
 8008d38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d42:	d10a      	bne.n	8008d5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	430a      	orrs	r2, r1
 8008d58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00a      	beq.n	8008d7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	430a      	orrs	r2, r1
 8008d7a:	605a      	str	r2, [r3, #4]
  }
}
 8008d7c:	bf00      	nop
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b086      	sub	sp, #24
 8008d8c:	af02      	add	r7, sp, #8
 8008d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d98:	f7f8 fc26 	bl	80015e8 <HAL_GetTick>
 8008d9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 0308 	and.w	r3, r3, #8
 8008da8:	2b08      	cmp	r3, #8
 8008daa:	d10e      	bne.n	8008dca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008db0:	9300      	str	r3, [sp, #0]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f82f 	bl	8008e1e <UART_WaitOnFlagUntilTimeout>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d001      	beq.n	8008dca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	e025      	b.n	8008e16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 0304 	and.w	r3, r3, #4
 8008dd4:	2b04      	cmp	r3, #4
 8008dd6:	d10e      	bne.n	8008df6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f819 	bl	8008e1e <UART_WaitOnFlagUntilTimeout>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d001      	beq.n	8008df6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008df2:	2303      	movs	r3, #3
 8008df4:	e00f      	b.n	8008e16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2220      	movs	r2, #32
 8008dfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2220      	movs	r2, #32
 8008e02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b09c      	sub	sp, #112	; 0x70
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	60f8      	str	r0, [r7, #12]
 8008e26:	60b9      	str	r1, [r7, #8]
 8008e28:	603b      	str	r3, [r7, #0]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e2e:	e0a9      	b.n	8008f84 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e36:	f000 80a5 	beq.w	8008f84 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e3a:	f7f8 fbd5 	bl	80015e8 <HAL_GetTick>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d302      	bcc.n	8008e50 <UART_WaitOnFlagUntilTimeout+0x32>
 8008e4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d140      	bne.n	8008ed2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e58:	e853 3f00 	ldrex	r3, [r3]
 8008e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e64:	667b      	str	r3, [r7, #100]	; 0x64
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e70:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e76:	e841 2300 	strex	r3, r2, [r1]
 8008e7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1e6      	bne.n	8008e50 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	3308      	adds	r3, #8
 8008e88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e8c:	e853 3f00 	ldrex	r3, [r3]
 8008e90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e94:	f023 0301 	bic.w	r3, r3, #1
 8008e98:	663b      	str	r3, [r7, #96]	; 0x60
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	3308      	adds	r3, #8
 8008ea0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ea2:	64ba      	str	r2, [r7, #72]	; 0x48
 8008ea4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008eaa:	e841 2300 	strex	r3, r2, [r1]
 8008eae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1e5      	bne.n	8008e82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2220      	movs	r2, #32
 8008eba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2220      	movs	r2, #32
 8008ec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	e069      	b.n	8008fa6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f003 0304 	and.w	r3, r3, #4
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d051      	beq.n	8008f84 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	69db      	ldr	r3, [r3, #28]
 8008ee6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008eee:	d149      	bne.n	8008f84 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ef8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f02:	e853 3f00 	ldrex	r3, [r3]
 8008f06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	461a      	mov	r2, r3
 8008f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f18:	637b      	str	r3, [r7, #52]	; 0x34
 8008f1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f20:	e841 2300 	strex	r3, r2, [r1]
 8008f24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1e6      	bne.n	8008efa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	3308      	adds	r3, #8
 8008f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	e853 3f00 	ldrex	r3, [r3]
 8008f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	f023 0301 	bic.w	r3, r3, #1
 8008f42:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	3308      	adds	r3, #8
 8008f4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f4c:	623a      	str	r2, [r7, #32]
 8008f4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f50:	69f9      	ldr	r1, [r7, #28]
 8008f52:	6a3a      	ldr	r2, [r7, #32]
 8008f54:	e841 2300 	strex	r3, r2, [r1]
 8008f58:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d1e5      	bne.n	8008f2c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2220      	movs	r2, #32
 8008f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2220      	movs	r2, #32
 8008f6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2220      	movs	r2, #32
 8008f74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008f80:	2303      	movs	r3, #3
 8008f82:	e010      	b.n	8008fa6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	69da      	ldr	r2, [r3, #28]
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	bf0c      	ite	eq
 8008f94:	2301      	moveq	r3, #1
 8008f96:	2300      	movne	r3, #0
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	79fb      	ldrb	r3, [r7, #7]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	f43f af46 	beq.w	8008e30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3770      	adds	r7, #112	; 0x70
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
	...

08008fb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b095      	sub	sp, #84	; 0x54
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc0:	e853 3f00 	ldrex	r3, [r3]
 8008fc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fd6:	643b      	str	r3, [r7, #64]	; 0x40
 8008fd8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fde:	e841 2300 	strex	r3, r2, [r1]
 8008fe2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1e6      	bne.n	8008fb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3308      	adds	r3, #8
 8008ff0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff2:	6a3b      	ldr	r3, [r7, #32]
 8008ff4:	e853 3f00 	ldrex	r3, [r3]
 8008ff8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ffa:	69fa      	ldr	r2, [r7, #28]
 8008ffc:	4b1e      	ldr	r3, [pc, #120]	; (8009078 <UART_EndRxTransfer+0xc8>)
 8008ffe:	4013      	ands	r3, r2
 8009000:	64bb      	str	r3, [r7, #72]	; 0x48
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	3308      	adds	r3, #8
 8009008:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800900a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800900c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009012:	e841 2300 	strex	r3, r2, [r1]
 8009016:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1e5      	bne.n	8008fea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009022:	2b01      	cmp	r3, #1
 8009024:	d118      	bne.n	8009058 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	e853 3f00 	ldrex	r3, [r3]
 8009032:	60bb      	str	r3, [r7, #8]
   return(result);
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	f023 0310 	bic.w	r3, r3, #16
 800903a:	647b      	str	r3, [r7, #68]	; 0x44
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	461a      	mov	r2, r3
 8009042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009044:	61bb      	str	r3, [r7, #24]
 8009046:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009048:	6979      	ldr	r1, [r7, #20]
 800904a:	69ba      	ldr	r2, [r7, #24]
 800904c:	e841 2300 	strex	r3, r2, [r1]
 8009050:	613b      	str	r3, [r7, #16]
   return(result);
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1e6      	bne.n	8009026 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2220      	movs	r2, #32
 800905c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800906c:	bf00      	nop
 800906e:	3754      	adds	r7, #84	; 0x54
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	effffffe 	.word	0xeffffffe

0800907c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009088:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2200      	movs	r2, #0
 8009096:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	f7ff f854 	bl	8008148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090a0:	bf00      	nop
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b088      	sub	sp, #32
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	e853 3f00 	ldrex	r3, [r3]
 80090bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090c4:	61fb      	str	r3, [r7, #28]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	461a      	mov	r2, r3
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	61bb      	str	r3, [r7, #24]
 80090d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d2:	6979      	ldr	r1, [r7, #20]
 80090d4:	69ba      	ldr	r2, [r7, #24]
 80090d6:	e841 2300 	strex	r3, r2, [r1]
 80090da:	613b      	str	r3, [r7, #16]
   return(result);
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1e6      	bne.n	80090b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2220      	movs	r2, #32
 80090e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f7ff f81f 	bl	8008134 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090f6:	bf00      	nop
 80090f8:	3720      	adds	r7, #32
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80090fe:	b480      	push	{r7}
 8009100:	b083      	sub	sp, #12
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009106:	bf00      	nop
 8009108:	370c      	adds	r7, #12
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr

08009112 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009112:	b480      	push	{r7}
 8009114:	b083      	sub	sp, #12
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800911a:	bf00      	nop
 800911c:	370c      	adds	r7, #12
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009126:	b480      	push	{r7}
 8009128:	b083      	sub	sp, #12
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800912e:	bf00      	nop
 8009130:	370c      	adds	r7, #12
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr

0800913a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800913a:	b480      	push	{r7}
 800913c:	b085      	sub	sp, #20
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009148:	2b01      	cmp	r3, #1
 800914a:	d101      	bne.n	8009150 <HAL_UARTEx_DisableFifoMode+0x16>
 800914c:	2302      	movs	r3, #2
 800914e:	e027      	b.n	80091a0 <HAL_UARTEx_DisableFifoMode+0x66>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2224      	movs	r2, #36	; 0x24
 800915c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f022 0201 	bic.w	r2, r2, #1
 8009176:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800917e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2220      	movs	r2, #32
 8009192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3714      	adds	r7, #20
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d101      	bne.n	80091c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80091c0:	2302      	movs	r3, #2
 80091c2:	e02d      	b.n	8009220 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2224      	movs	r2, #36	; 0x24
 80091d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f022 0201 	bic.w	r2, r2, #1
 80091ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	683a      	ldr	r2, [r7, #0]
 80091fc:	430a      	orrs	r2, r1
 80091fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 f84f 	bl	80092a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2220      	movs	r2, #32
 8009212:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	3710      	adds	r7, #16
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009238:	2b01      	cmp	r3, #1
 800923a:	d101      	bne.n	8009240 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800923c:	2302      	movs	r3, #2
 800923e:	e02d      	b.n	800929c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2224      	movs	r2, #36	; 0x24
 800924c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f022 0201 	bic.w	r2, r2, #1
 8009266:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	430a      	orrs	r2, r1
 800927a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 f811 	bl	80092a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2220      	movs	r2, #32
 800928e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800929a:	2300      	movs	r3, #0
}
 800929c:	4618      	mov	r0, r3
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d108      	bne.n	80092c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80092c4:	e031      	b.n	800932a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80092c6:	2310      	movs	r3, #16
 80092c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80092ca:	2310      	movs	r3, #16
 80092cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	0e5b      	lsrs	r3, r3, #25
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	f003 0307 	and.w	r3, r3, #7
 80092dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	0f5b      	lsrs	r3, r3, #29
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	f003 0307 	and.w	r3, r3, #7
 80092ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092ee:	7bbb      	ldrb	r3, [r7, #14]
 80092f0:	7b3a      	ldrb	r2, [r7, #12]
 80092f2:	4911      	ldr	r1, [pc, #68]	; (8009338 <UARTEx_SetNbDataToProcess+0x94>)
 80092f4:	5c8a      	ldrb	r2, [r1, r2]
 80092f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80092fa:	7b3a      	ldrb	r2, [r7, #12]
 80092fc:	490f      	ldr	r1, [pc, #60]	; (800933c <UARTEx_SetNbDataToProcess+0x98>)
 80092fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009300:	fb93 f3f2 	sdiv	r3, r3, r2
 8009304:	b29a      	uxth	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800930c:	7bfb      	ldrb	r3, [r7, #15]
 800930e:	7b7a      	ldrb	r2, [r7, #13]
 8009310:	4909      	ldr	r1, [pc, #36]	; (8009338 <UARTEx_SetNbDataToProcess+0x94>)
 8009312:	5c8a      	ldrb	r2, [r1, r2]
 8009314:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009318:	7b7a      	ldrb	r2, [r7, #13]
 800931a:	4908      	ldr	r1, [pc, #32]	; (800933c <UARTEx_SetNbDataToProcess+0x98>)
 800931c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800931e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009322:	b29a      	uxth	r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800932a:	bf00      	nop
 800932c:	3714      	adds	r7, #20
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop
 8009338:	0800a1d0 	.word	0x0800a1d0
 800933c:	0800a1d8 	.word	0x0800a1d8

08009340 <__errno>:
 8009340:	4b01      	ldr	r3, [pc, #4]	; (8009348 <__errno+0x8>)
 8009342:	6818      	ldr	r0, [r3, #0]
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	24000010 	.word	0x24000010

0800934c <_fclose_r>:
 800934c:	b570      	push	{r4, r5, r6, lr}
 800934e:	4605      	mov	r5, r0
 8009350:	460c      	mov	r4, r1
 8009352:	b911      	cbnz	r1, 800935a <_fclose_r+0xe>
 8009354:	2600      	movs	r6, #0
 8009356:	4630      	mov	r0, r6
 8009358:	bd70      	pop	{r4, r5, r6, pc}
 800935a:	b118      	cbz	r0, 8009364 <_fclose_r+0x18>
 800935c:	6983      	ldr	r3, [r0, #24]
 800935e:	b90b      	cbnz	r3, 8009364 <_fclose_r+0x18>
 8009360:	f000 f982 	bl	8009668 <__sinit>
 8009364:	4b2c      	ldr	r3, [pc, #176]	; (8009418 <_fclose_r+0xcc>)
 8009366:	429c      	cmp	r4, r3
 8009368:	d114      	bne.n	8009394 <_fclose_r+0x48>
 800936a:	686c      	ldr	r4, [r5, #4]
 800936c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800936e:	07d8      	lsls	r0, r3, #31
 8009370:	d405      	bmi.n	800937e <_fclose_r+0x32>
 8009372:	89a3      	ldrh	r3, [r4, #12]
 8009374:	0599      	lsls	r1, r3, #22
 8009376:	d402      	bmi.n	800937e <_fclose_r+0x32>
 8009378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800937a:	f000 fbb9 	bl	8009af0 <__retarget_lock_acquire_recursive>
 800937e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009382:	b98b      	cbnz	r3, 80093a8 <_fclose_r+0x5c>
 8009384:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8009386:	f016 0601 	ands.w	r6, r6, #1
 800938a:	d1e3      	bne.n	8009354 <_fclose_r+0x8>
 800938c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800938e:	f000 fbb0 	bl	8009af2 <__retarget_lock_release_recursive>
 8009392:	e7e0      	b.n	8009356 <_fclose_r+0xa>
 8009394:	4b21      	ldr	r3, [pc, #132]	; (800941c <_fclose_r+0xd0>)
 8009396:	429c      	cmp	r4, r3
 8009398:	d101      	bne.n	800939e <_fclose_r+0x52>
 800939a:	68ac      	ldr	r4, [r5, #8]
 800939c:	e7e6      	b.n	800936c <_fclose_r+0x20>
 800939e:	4b20      	ldr	r3, [pc, #128]	; (8009420 <_fclose_r+0xd4>)
 80093a0:	429c      	cmp	r4, r3
 80093a2:	bf08      	it	eq
 80093a4:	68ec      	ldreq	r4, [r5, #12]
 80093a6:	e7e1      	b.n	800936c <_fclose_r+0x20>
 80093a8:	4621      	mov	r1, r4
 80093aa:	4628      	mov	r0, r5
 80093ac:	f000 f842 	bl	8009434 <__sflush_r>
 80093b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80093b2:	4606      	mov	r6, r0
 80093b4:	b133      	cbz	r3, 80093c4 <_fclose_r+0x78>
 80093b6:	6a21      	ldr	r1, [r4, #32]
 80093b8:	4628      	mov	r0, r5
 80093ba:	4798      	blx	r3
 80093bc:	2800      	cmp	r0, #0
 80093be:	bfb8      	it	lt
 80093c0:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 80093c4:	89a3      	ldrh	r3, [r4, #12]
 80093c6:	061a      	lsls	r2, r3, #24
 80093c8:	d503      	bpl.n	80093d2 <_fclose_r+0x86>
 80093ca:	6921      	ldr	r1, [r4, #16]
 80093cc:	4628      	mov	r0, r5
 80093ce:	f000 fbff 	bl	8009bd0 <_free_r>
 80093d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093d4:	b141      	cbz	r1, 80093e8 <_fclose_r+0x9c>
 80093d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093da:	4299      	cmp	r1, r3
 80093dc:	d002      	beq.n	80093e4 <_fclose_r+0x98>
 80093de:	4628      	mov	r0, r5
 80093e0:	f000 fbf6 	bl	8009bd0 <_free_r>
 80093e4:	2300      	movs	r3, #0
 80093e6:	6363      	str	r3, [r4, #52]	; 0x34
 80093e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80093ea:	b121      	cbz	r1, 80093f6 <_fclose_r+0xaa>
 80093ec:	4628      	mov	r0, r5
 80093ee:	f000 fbef 	bl	8009bd0 <_free_r>
 80093f2:	2300      	movs	r3, #0
 80093f4:	64a3      	str	r3, [r4, #72]	; 0x48
 80093f6:	f000 f91f 	bl	8009638 <__sfp_lock_acquire>
 80093fa:	2300      	movs	r3, #0
 80093fc:	81a3      	strh	r3, [r4, #12]
 80093fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009400:	07db      	lsls	r3, r3, #31
 8009402:	d402      	bmi.n	800940a <_fclose_r+0xbe>
 8009404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009406:	f000 fb74 	bl	8009af2 <__retarget_lock_release_recursive>
 800940a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800940c:	f000 fb6f 	bl	8009aee <__retarget_lock_close_recursive>
 8009410:	f000 f918 	bl	8009644 <__sfp_lock_release>
 8009414:	e79f      	b.n	8009356 <_fclose_r+0xa>
 8009416:	bf00      	nop
 8009418:	0800a200 	.word	0x0800a200
 800941c:	0800a220 	.word	0x0800a220
 8009420:	0800a1e0 	.word	0x0800a1e0

08009424 <fclose>:
 8009424:	4b02      	ldr	r3, [pc, #8]	; (8009430 <fclose+0xc>)
 8009426:	4601      	mov	r1, r0
 8009428:	6818      	ldr	r0, [r3, #0]
 800942a:	f7ff bf8f 	b.w	800934c <_fclose_r>
 800942e:	bf00      	nop
 8009430:	24000010 	.word	0x24000010

08009434 <__sflush_r>:
 8009434:	898a      	ldrh	r2, [r1, #12]
 8009436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800943a:	4605      	mov	r5, r0
 800943c:	0710      	lsls	r0, r2, #28
 800943e:	460c      	mov	r4, r1
 8009440:	d458      	bmi.n	80094f4 <__sflush_r+0xc0>
 8009442:	684b      	ldr	r3, [r1, #4]
 8009444:	2b00      	cmp	r3, #0
 8009446:	dc05      	bgt.n	8009454 <__sflush_r+0x20>
 8009448:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800944a:	2b00      	cmp	r3, #0
 800944c:	dc02      	bgt.n	8009454 <__sflush_r+0x20>
 800944e:	2000      	movs	r0, #0
 8009450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009454:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009456:	2e00      	cmp	r6, #0
 8009458:	d0f9      	beq.n	800944e <__sflush_r+0x1a>
 800945a:	2300      	movs	r3, #0
 800945c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009460:	682f      	ldr	r7, [r5, #0]
 8009462:	602b      	str	r3, [r5, #0]
 8009464:	d032      	beq.n	80094cc <__sflush_r+0x98>
 8009466:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009468:	89a3      	ldrh	r3, [r4, #12]
 800946a:	075a      	lsls	r2, r3, #29
 800946c:	d505      	bpl.n	800947a <__sflush_r+0x46>
 800946e:	6863      	ldr	r3, [r4, #4]
 8009470:	1ac0      	subs	r0, r0, r3
 8009472:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009474:	b10b      	cbz	r3, 800947a <__sflush_r+0x46>
 8009476:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009478:	1ac0      	subs	r0, r0, r3
 800947a:	2300      	movs	r3, #0
 800947c:	4602      	mov	r2, r0
 800947e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009480:	6a21      	ldr	r1, [r4, #32]
 8009482:	4628      	mov	r0, r5
 8009484:	47b0      	blx	r6
 8009486:	1c43      	adds	r3, r0, #1
 8009488:	89a3      	ldrh	r3, [r4, #12]
 800948a:	d106      	bne.n	800949a <__sflush_r+0x66>
 800948c:	6829      	ldr	r1, [r5, #0]
 800948e:	291d      	cmp	r1, #29
 8009490:	d82c      	bhi.n	80094ec <__sflush_r+0xb8>
 8009492:	4a2a      	ldr	r2, [pc, #168]	; (800953c <__sflush_r+0x108>)
 8009494:	40ca      	lsrs	r2, r1
 8009496:	07d6      	lsls	r6, r2, #31
 8009498:	d528      	bpl.n	80094ec <__sflush_r+0xb8>
 800949a:	2200      	movs	r2, #0
 800949c:	6062      	str	r2, [r4, #4]
 800949e:	04d9      	lsls	r1, r3, #19
 80094a0:	6922      	ldr	r2, [r4, #16]
 80094a2:	6022      	str	r2, [r4, #0]
 80094a4:	d504      	bpl.n	80094b0 <__sflush_r+0x7c>
 80094a6:	1c42      	adds	r2, r0, #1
 80094a8:	d101      	bne.n	80094ae <__sflush_r+0x7a>
 80094aa:	682b      	ldr	r3, [r5, #0]
 80094ac:	b903      	cbnz	r3, 80094b0 <__sflush_r+0x7c>
 80094ae:	6560      	str	r0, [r4, #84]	; 0x54
 80094b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094b2:	602f      	str	r7, [r5, #0]
 80094b4:	2900      	cmp	r1, #0
 80094b6:	d0ca      	beq.n	800944e <__sflush_r+0x1a>
 80094b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094bc:	4299      	cmp	r1, r3
 80094be:	d002      	beq.n	80094c6 <__sflush_r+0x92>
 80094c0:	4628      	mov	r0, r5
 80094c2:	f000 fb85 	bl	8009bd0 <_free_r>
 80094c6:	2000      	movs	r0, #0
 80094c8:	6360      	str	r0, [r4, #52]	; 0x34
 80094ca:	e7c1      	b.n	8009450 <__sflush_r+0x1c>
 80094cc:	6a21      	ldr	r1, [r4, #32]
 80094ce:	2301      	movs	r3, #1
 80094d0:	4628      	mov	r0, r5
 80094d2:	47b0      	blx	r6
 80094d4:	1c41      	adds	r1, r0, #1
 80094d6:	d1c7      	bne.n	8009468 <__sflush_r+0x34>
 80094d8:	682b      	ldr	r3, [r5, #0]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d0c4      	beq.n	8009468 <__sflush_r+0x34>
 80094de:	2b1d      	cmp	r3, #29
 80094e0:	d001      	beq.n	80094e6 <__sflush_r+0xb2>
 80094e2:	2b16      	cmp	r3, #22
 80094e4:	d101      	bne.n	80094ea <__sflush_r+0xb6>
 80094e6:	602f      	str	r7, [r5, #0]
 80094e8:	e7b1      	b.n	800944e <__sflush_r+0x1a>
 80094ea:	89a3      	ldrh	r3, [r4, #12]
 80094ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094f0:	81a3      	strh	r3, [r4, #12]
 80094f2:	e7ad      	b.n	8009450 <__sflush_r+0x1c>
 80094f4:	690f      	ldr	r7, [r1, #16]
 80094f6:	2f00      	cmp	r7, #0
 80094f8:	d0a9      	beq.n	800944e <__sflush_r+0x1a>
 80094fa:	0793      	lsls	r3, r2, #30
 80094fc:	680e      	ldr	r6, [r1, #0]
 80094fe:	bf08      	it	eq
 8009500:	694b      	ldreq	r3, [r1, #20]
 8009502:	600f      	str	r7, [r1, #0]
 8009504:	bf18      	it	ne
 8009506:	2300      	movne	r3, #0
 8009508:	eba6 0807 	sub.w	r8, r6, r7
 800950c:	608b      	str	r3, [r1, #8]
 800950e:	f1b8 0f00 	cmp.w	r8, #0
 8009512:	dd9c      	ble.n	800944e <__sflush_r+0x1a>
 8009514:	6a21      	ldr	r1, [r4, #32]
 8009516:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009518:	4643      	mov	r3, r8
 800951a:	463a      	mov	r2, r7
 800951c:	4628      	mov	r0, r5
 800951e:	47b0      	blx	r6
 8009520:	2800      	cmp	r0, #0
 8009522:	dc06      	bgt.n	8009532 <__sflush_r+0xfe>
 8009524:	89a3      	ldrh	r3, [r4, #12]
 8009526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800952a:	81a3      	strh	r3, [r4, #12]
 800952c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009530:	e78e      	b.n	8009450 <__sflush_r+0x1c>
 8009532:	4407      	add	r7, r0
 8009534:	eba8 0800 	sub.w	r8, r8, r0
 8009538:	e7e9      	b.n	800950e <__sflush_r+0xda>
 800953a:	bf00      	nop
 800953c:	20400001 	.word	0x20400001

08009540 <_fflush_r>:
 8009540:	b538      	push	{r3, r4, r5, lr}
 8009542:	690b      	ldr	r3, [r1, #16]
 8009544:	4605      	mov	r5, r0
 8009546:	460c      	mov	r4, r1
 8009548:	b913      	cbnz	r3, 8009550 <_fflush_r+0x10>
 800954a:	2500      	movs	r5, #0
 800954c:	4628      	mov	r0, r5
 800954e:	bd38      	pop	{r3, r4, r5, pc}
 8009550:	b118      	cbz	r0, 800955a <_fflush_r+0x1a>
 8009552:	6983      	ldr	r3, [r0, #24]
 8009554:	b90b      	cbnz	r3, 800955a <_fflush_r+0x1a>
 8009556:	f000 f887 	bl	8009668 <__sinit>
 800955a:	4b14      	ldr	r3, [pc, #80]	; (80095ac <_fflush_r+0x6c>)
 800955c:	429c      	cmp	r4, r3
 800955e:	d11b      	bne.n	8009598 <_fflush_r+0x58>
 8009560:	686c      	ldr	r4, [r5, #4]
 8009562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d0ef      	beq.n	800954a <_fflush_r+0xa>
 800956a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800956c:	07d0      	lsls	r0, r2, #31
 800956e:	d404      	bmi.n	800957a <_fflush_r+0x3a>
 8009570:	0599      	lsls	r1, r3, #22
 8009572:	d402      	bmi.n	800957a <_fflush_r+0x3a>
 8009574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009576:	f000 fabb 	bl	8009af0 <__retarget_lock_acquire_recursive>
 800957a:	4628      	mov	r0, r5
 800957c:	4621      	mov	r1, r4
 800957e:	f7ff ff59 	bl	8009434 <__sflush_r>
 8009582:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009584:	07da      	lsls	r2, r3, #31
 8009586:	4605      	mov	r5, r0
 8009588:	d4e0      	bmi.n	800954c <_fflush_r+0xc>
 800958a:	89a3      	ldrh	r3, [r4, #12]
 800958c:	059b      	lsls	r3, r3, #22
 800958e:	d4dd      	bmi.n	800954c <_fflush_r+0xc>
 8009590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009592:	f000 faae 	bl	8009af2 <__retarget_lock_release_recursive>
 8009596:	e7d9      	b.n	800954c <_fflush_r+0xc>
 8009598:	4b05      	ldr	r3, [pc, #20]	; (80095b0 <_fflush_r+0x70>)
 800959a:	429c      	cmp	r4, r3
 800959c:	d101      	bne.n	80095a2 <_fflush_r+0x62>
 800959e:	68ac      	ldr	r4, [r5, #8]
 80095a0:	e7df      	b.n	8009562 <_fflush_r+0x22>
 80095a2:	4b04      	ldr	r3, [pc, #16]	; (80095b4 <_fflush_r+0x74>)
 80095a4:	429c      	cmp	r4, r3
 80095a6:	bf08      	it	eq
 80095a8:	68ec      	ldreq	r4, [r5, #12]
 80095aa:	e7da      	b.n	8009562 <_fflush_r+0x22>
 80095ac:	0800a200 	.word	0x0800a200
 80095b0:	0800a220 	.word	0x0800a220
 80095b4:	0800a1e0 	.word	0x0800a1e0

080095b8 <std>:
 80095b8:	2300      	movs	r3, #0
 80095ba:	b510      	push	{r4, lr}
 80095bc:	4604      	mov	r4, r0
 80095be:	e9c0 3300 	strd	r3, r3, [r0]
 80095c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095c6:	6083      	str	r3, [r0, #8]
 80095c8:	8181      	strh	r1, [r0, #12]
 80095ca:	6643      	str	r3, [r0, #100]	; 0x64
 80095cc:	81c2      	strh	r2, [r0, #14]
 80095ce:	6183      	str	r3, [r0, #24]
 80095d0:	4619      	mov	r1, r3
 80095d2:	2208      	movs	r2, #8
 80095d4:	305c      	adds	r0, #92	; 0x5c
 80095d6:	f000 faf3 	bl	8009bc0 <memset>
 80095da:	4b05      	ldr	r3, [pc, #20]	; (80095f0 <std+0x38>)
 80095dc:	6263      	str	r3, [r4, #36]	; 0x24
 80095de:	4b05      	ldr	r3, [pc, #20]	; (80095f4 <std+0x3c>)
 80095e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80095e2:	4b05      	ldr	r3, [pc, #20]	; (80095f8 <std+0x40>)
 80095e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095e6:	4b05      	ldr	r3, [pc, #20]	; (80095fc <std+0x44>)
 80095e8:	6224      	str	r4, [r4, #32]
 80095ea:	6323      	str	r3, [r4, #48]	; 0x30
 80095ec:	bd10      	pop	{r4, pc}
 80095ee:	bf00      	nop
 80095f0:	08009dd5 	.word	0x08009dd5
 80095f4:	08009df7 	.word	0x08009df7
 80095f8:	08009e2f 	.word	0x08009e2f
 80095fc:	08009e53 	.word	0x08009e53

08009600 <_cleanup_r>:
 8009600:	4901      	ldr	r1, [pc, #4]	; (8009608 <_cleanup_r+0x8>)
 8009602:	f000 b9c1 	b.w	8009988 <_fwalk_reent>
 8009606:	bf00      	nop
 8009608:	08009541 	.word	0x08009541

0800960c <__sfmoreglue>:
 800960c:	b570      	push	{r4, r5, r6, lr}
 800960e:	2268      	movs	r2, #104	; 0x68
 8009610:	1e4d      	subs	r5, r1, #1
 8009612:	4355      	muls	r5, r2
 8009614:	460e      	mov	r6, r1
 8009616:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800961a:	f000 fb45 	bl	8009ca8 <_malloc_r>
 800961e:	4604      	mov	r4, r0
 8009620:	b140      	cbz	r0, 8009634 <__sfmoreglue+0x28>
 8009622:	2100      	movs	r1, #0
 8009624:	e9c0 1600 	strd	r1, r6, [r0]
 8009628:	300c      	adds	r0, #12
 800962a:	60a0      	str	r0, [r4, #8]
 800962c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009630:	f000 fac6 	bl	8009bc0 <memset>
 8009634:	4620      	mov	r0, r4
 8009636:	bd70      	pop	{r4, r5, r6, pc}

08009638 <__sfp_lock_acquire>:
 8009638:	4801      	ldr	r0, [pc, #4]	; (8009640 <__sfp_lock_acquire+0x8>)
 800963a:	f000 ba59 	b.w	8009af0 <__retarget_lock_acquire_recursive>
 800963e:	bf00      	nop
 8009640:	2404b335 	.word	0x2404b335

08009644 <__sfp_lock_release>:
 8009644:	4801      	ldr	r0, [pc, #4]	; (800964c <__sfp_lock_release+0x8>)
 8009646:	f000 ba54 	b.w	8009af2 <__retarget_lock_release_recursive>
 800964a:	bf00      	nop
 800964c:	2404b335 	.word	0x2404b335

08009650 <__sinit_lock_acquire>:
 8009650:	4801      	ldr	r0, [pc, #4]	; (8009658 <__sinit_lock_acquire+0x8>)
 8009652:	f000 ba4d 	b.w	8009af0 <__retarget_lock_acquire_recursive>
 8009656:	bf00      	nop
 8009658:	2404b336 	.word	0x2404b336

0800965c <__sinit_lock_release>:
 800965c:	4801      	ldr	r0, [pc, #4]	; (8009664 <__sinit_lock_release+0x8>)
 800965e:	f000 ba48 	b.w	8009af2 <__retarget_lock_release_recursive>
 8009662:	bf00      	nop
 8009664:	2404b336 	.word	0x2404b336

08009668 <__sinit>:
 8009668:	b510      	push	{r4, lr}
 800966a:	4604      	mov	r4, r0
 800966c:	f7ff fff0 	bl	8009650 <__sinit_lock_acquire>
 8009670:	69a3      	ldr	r3, [r4, #24]
 8009672:	b11b      	cbz	r3, 800967c <__sinit+0x14>
 8009674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009678:	f7ff bff0 	b.w	800965c <__sinit_lock_release>
 800967c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009680:	6523      	str	r3, [r4, #80]	; 0x50
 8009682:	4b13      	ldr	r3, [pc, #76]	; (80096d0 <__sinit+0x68>)
 8009684:	4a13      	ldr	r2, [pc, #76]	; (80096d4 <__sinit+0x6c>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	62a2      	str	r2, [r4, #40]	; 0x28
 800968a:	42a3      	cmp	r3, r4
 800968c:	bf04      	itt	eq
 800968e:	2301      	moveq	r3, #1
 8009690:	61a3      	streq	r3, [r4, #24]
 8009692:	4620      	mov	r0, r4
 8009694:	f000 f820 	bl	80096d8 <__sfp>
 8009698:	6060      	str	r0, [r4, #4]
 800969a:	4620      	mov	r0, r4
 800969c:	f000 f81c 	bl	80096d8 <__sfp>
 80096a0:	60a0      	str	r0, [r4, #8]
 80096a2:	4620      	mov	r0, r4
 80096a4:	f000 f818 	bl	80096d8 <__sfp>
 80096a8:	2200      	movs	r2, #0
 80096aa:	60e0      	str	r0, [r4, #12]
 80096ac:	2104      	movs	r1, #4
 80096ae:	6860      	ldr	r0, [r4, #4]
 80096b0:	f7ff ff82 	bl	80095b8 <std>
 80096b4:	68a0      	ldr	r0, [r4, #8]
 80096b6:	2201      	movs	r2, #1
 80096b8:	2109      	movs	r1, #9
 80096ba:	f7ff ff7d 	bl	80095b8 <std>
 80096be:	68e0      	ldr	r0, [r4, #12]
 80096c0:	2202      	movs	r2, #2
 80096c2:	2112      	movs	r1, #18
 80096c4:	f7ff ff78 	bl	80095b8 <std>
 80096c8:	2301      	movs	r3, #1
 80096ca:	61a3      	str	r3, [r4, #24]
 80096cc:	e7d2      	b.n	8009674 <__sinit+0xc>
 80096ce:	bf00      	nop
 80096d0:	0800a240 	.word	0x0800a240
 80096d4:	08009601 	.word	0x08009601

080096d8 <__sfp>:
 80096d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096da:	4607      	mov	r7, r0
 80096dc:	f7ff ffac 	bl	8009638 <__sfp_lock_acquire>
 80096e0:	4b1e      	ldr	r3, [pc, #120]	; (800975c <__sfp+0x84>)
 80096e2:	681e      	ldr	r6, [r3, #0]
 80096e4:	69b3      	ldr	r3, [r6, #24]
 80096e6:	b913      	cbnz	r3, 80096ee <__sfp+0x16>
 80096e8:	4630      	mov	r0, r6
 80096ea:	f7ff ffbd 	bl	8009668 <__sinit>
 80096ee:	3648      	adds	r6, #72	; 0x48
 80096f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80096f4:	3b01      	subs	r3, #1
 80096f6:	d503      	bpl.n	8009700 <__sfp+0x28>
 80096f8:	6833      	ldr	r3, [r6, #0]
 80096fa:	b30b      	cbz	r3, 8009740 <__sfp+0x68>
 80096fc:	6836      	ldr	r6, [r6, #0]
 80096fe:	e7f7      	b.n	80096f0 <__sfp+0x18>
 8009700:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009704:	b9d5      	cbnz	r5, 800973c <__sfp+0x64>
 8009706:	4b16      	ldr	r3, [pc, #88]	; (8009760 <__sfp+0x88>)
 8009708:	60e3      	str	r3, [r4, #12]
 800970a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800970e:	6665      	str	r5, [r4, #100]	; 0x64
 8009710:	f000 f9ec 	bl	8009aec <__retarget_lock_init_recursive>
 8009714:	f7ff ff96 	bl	8009644 <__sfp_lock_release>
 8009718:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800971c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009720:	6025      	str	r5, [r4, #0]
 8009722:	61a5      	str	r5, [r4, #24]
 8009724:	2208      	movs	r2, #8
 8009726:	4629      	mov	r1, r5
 8009728:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800972c:	f000 fa48 	bl	8009bc0 <memset>
 8009730:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009734:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009738:	4620      	mov	r0, r4
 800973a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800973c:	3468      	adds	r4, #104	; 0x68
 800973e:	e7d9      	b.n	80096f4 <__sfp+0x1c>
 8009740:	2104      	movs	r1, #4
 8009742:	4638      	mov	r0, r7
 8009744:	f7ff ff62 	bl	800960c <__sfmoreglue>
 8009748:	4604      	mov	r4, r0
 800974a:	6030      	str	r0, [r6, #0]
 800974c:	2800      	cmp	r0, #0
 800974e:	d1d5      	bne.n	80096fc <__sfp+0x24>
 8009750:	f7ff ff78 	bl	8009644 <__sfp_lock_release>
 8009754:	230c      	movs	r3, #12
 8009756:	603b      	str	r3, [r7, #0]
 8009758:	e7ee      	b.n	8009738 <__sfp+0x60>
 800975a:	bf00      	nop
 800975c:	0800a240 	.word	0x0800a240
 8009760:	ffff0001 	.word	0xffff0001

08009764 <_fopen_r>:
 8009764:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009766:	460f      	mov	r7, r1
 8009768:	4611      	mov	r1, r2
 800976a:	aa01      	add	r2, sp, #4
 800976c:	4605      	mov	r5, r0
 800976e:	f000 fc57 	bl	800a020 <__sflags>
 8009772:	4606      	mov	r6, r0
 8009774:	b918      	cbnz	r0, 800977e <_fopen_r+0x1a>
 8009776:	2400      	movs	r4, #0
 8009778:	4620      	mov	r0, r4
 800977a:	b003      	add	sp, #12
 800977c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800977e:	4628      	mov	r0, r5
 8009780:	f7ff ffaa 	bl	80096d8 <__sfp>
 8009784:	4604      	mov	r4, r0
 8009786:	2800      	cmp	r0, #0
 8009788:	d0f5      	beq.n	8009776 <_fopen_r+0x12>
 800978a:	4639      	mov	r1, r7
 800978c:	9a01      	ldr	r2, [sp, #4]
 800978e:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8009792:	4628      	mov	r0, r5
 8009794:	f000 fafc 	bl	8009d90 <_open_r>
 8009798:	1e07      	subs	r7, r0, #0
 800979a:	da09      	bge.n	80097b0 <_fopen_r+0x4c>
 800979c:	2500      	movs	r5, #0
 800979e:	f7ff ff4b 	bl	8009638 <__sfp_lock_acquire>
 80097a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097a4:	81a5      	strh	r5, [r4, #12]
 80097a6:	f000 f9a2 	bl	8009aee <__retarget_lock_close_recursive>
 80097aa:	f7ff ff4b 	bl	8009644 <__sfp_lock_release>
 80097ae:	e7e2      	b.n	8009776 <_fopen_r+0x12>
 80097b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097b2:	07db      	lsls	r3, r3, #31
 80097b4:	d405      	bmi.n	80097c2 <_fopen_r+0x5e>
 80097b6:	89a3      	ldrh	r3, [r4, #12]
 80097b8:	0598      	lsls	r0, r3, #22
 80097ba:	d402      	bmi.n	80097c2 <_fopen_r+0x5e>
 80097bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097be:	f000 f997 	bl	8009af0 <__retarget_lock_acquire_recursive>
 80097c2:	4b0e      	ldr	r3, [pc, #56]	; (80097fc <_fopen_r+0x98>)
 80097c4:	6263      	str	r3, [r4, #36]	; 0x24
 80097c6:	4b0e      	ldr	r3, [pc, #56]	; (8009800 <_fopen_r+0x9c>)
 80097c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80097ca:	4b0e      	ldr	r3, [pc, #56]	; (8009804 <_fopen_r+0xa0>)
 80097cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097ce:	05f1      	lsls	r1, r6, #23
 80097d0:	4b0d      	ldr	r3, [pc, #52]	; (8009808 <_fopen_r+0xa4>)
 80097d2:	81e7      	strh	r7, [r4, #14]
 80097d4:	81a6      	strh	r6, [r4, #12]
 80097d6:	6224      	str	r4, [r4, #32]
 80097d8:	6323      	str	r3, [r4, #48]	; 0x30
 80097da:	d505      	bpl.n	80097e8 <_fopen_r+0x84>
 80097dc:	2302      	movs	r3, #2
 80097de:	2200      	movs	r2, #0
 80097e0:	4621      	mov	r1, r4
 80097e2:	4628      	mov	r0, r5
 80097e4:	f000 f81a 	bl	800981c <_fseek_r>
 80097e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097ea:	07da      	lsls	r2, r3, #31
 80097ec:	d4c4      	bmi.n	8009778 <_fopen_r+0x14>
 80097ee:	89a3      	ldrh	r3, [r4, #12]
 80097f0:	059b      	lsls	r3, r3, #22
 80097f2:	d4c1      	bmi.n	8009778 <_fopen_r+0x14>
 80097f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097f6:	f000 f97c 	bl	8009af2 <__retarget_lock_release_recursive>
 80097fa:	e7bd      	b.n	8009778 <_fopen_r+0x14>
 80097fc:	08009dd5 	.word	0x08009dd5
 8009800:	08009df7 	.word	0x08009df7
 8009804:	08009e2f 	.word	0x08009e2f
 8009808:	08009e53 	.word	0x08009e53

0800980c <fopen>:
 800980c:	4b02      	ldr	r3, [pc, #8]	; (8009818 <fopen+0xc>)
 800980e:	460a      	mov	r2, r1
 8009810:	4601      	mov	r1, r0
 8009812:	6818      	ldr	r0, [r3, #0]
 8009814:	f7ff bfa6 	b.w	8009764 <_fopen_r>
 8009818:	24000010 	.word	0x24000010

0800981c <_fseek_r>:
 800981c:	f000 b800 	b.w	8009820 <_fseeko_r>

08009820 <_fseeko_r>:
 8009820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009824:	460c      	mov	r4, r1
 8009826:	4617      	mov	r7, r2
 8009828:	461d      	mov	r5, r3
 800982a:	4606      	mov	r6, r0
 800982c:	b118      	cbz	r0, 8009836 <_fseeko_r+0x16>
 800982e:	6983      	ldr	r3, [r0, #24]
 8009830:	b90b      	cbnz	r3, 8009836 <_fseeko_r+0x16>
 8009832:	f7ff ff19 	bl	8009668 <__sinit>
 8009836:	4b51      	ldr	r3, [pc, #324]	; (800997c <_fseeko_r+0x15c>)
 8009838:	429c      	cmp	r4, r3
 800983a:	d122      	bne.n	8009882 <_fseeko_r+0x62>
 800983c:	6874      	ldr	r4, [r6, #4]
 800983e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009840:	07d9      	lsls	r1, r3, #31
 8009842:	d405      	bmi.n	8009850 <_fseeko_r+0x30>
 8009844:	89a3      	ldrh	r3, [r4, #12]
 8009846:	059a      	lsls	r2, r3, #22
 8009848:	d402      	bmi.n	8009850 <_fseeko_r+0x30>
 800984a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800984c:	f000 f950 	bl	8009af0 <__retarget_lock_acquire_recursive>
 8009850:	89a3      	ldrh	r3, [r4, #12]
 8009852:	f403 7384 	and.w	r3, r3, #264	; 0x108
 8009856:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 800985a:	d103      	bne.n	8009864 <_fseeko_r+0x44>
 800985c:	4621      	mov	r1, r4
 800985e:	4630      	mov	r0, r6
 8009860:	f7ff fe6e 	bl	8009540 <_fflush_r>
 8009864:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8009868:	f1b8 0f00 	cmp.w	r8, #0
 800986c:	d113      	bne.n	8009896 <_fseeko_r+0x76>
 800986e:	231d      	movs	r3, #29
 8009870:	6033      	str	r3, [r6, #0]
 8009872:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009874:	07d9      	lsls	r1, r3, #31
 8009876:	d578      	bpl.n	800996a <_fseeko_r+0x14a>
 8009878:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800987c:	4628      	mov	r0, r5
 800987e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009882:	4b3f      	ldr	r3, [pc, #252]	; (8009980 <_fseeko_r+0x160>)
 8009884:	429c      	cmp	r4, r3
 8009886:	d101      	bne.n	800988c <_fseeko_r+0x6c>
 8009888:	68b4      	ldr	r4, [r6, #8]
 800988a:	e7d8      	b.n	800983e <_fseeko_r+0x1e>
 800988c:	4b3d      	ldr	r3, [pc, #244]	; (8009984 <_fseeko_r+0x164>)
 800988e:	429c      	cmp	r4, r3
 8009890:	bf08      	it	eq
 8009892:	68f4      	ldreq	r4, [r6, #12]
 8009894:	e7d3      	b.n	800983e <_fseeko_r+0x1e>
 8009896:	2d01      	cmp	r5, #1
 8009898:	d036      	beq.n	8009908 <_fseeko_r+0xe8>
 800989a:	f035 0302 	bics.w	r3, r5, #2
 800989e:	d162      	bne.n	8009966 <_fseeko_r+0x146>
 80098a0:	6923      	ldr	r3, [r4, #16]
 80098a2:	b91b      	cbnz	r3, 80098ac <_fseeko_r+0x8c>
 80098a4:	4621      	mov	r1, r4
 80098a6:	4630      	mov	r0, r6
 80098a8:	f000 f94a 	bl	8009b40 <__smakebuf_r>
 80098ac:	4621      	mov	r1, r4
 80098ae:	4630      	mov	r0, r6
 80098b0:	f7ff fe46 	bl	8009540 <_fflush_r>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d1dc      	bne.n	8009872 <_fseeko_r+0x52>
 80098b8:	6a21      	ldr	r1, [r4, #32]
 80098ba:	462b      	mov	r3, r5
 80098bc:	463a      	mov	r2, r7
 80098be:	4630      	mov	r0, r6
 80098c0:	47c0      	blx	r8
 80098c2:	3001      	adds	r0, #1
 80098c4:	d0d5      	beq.n	8009872 <_fseeko_r+0x52>
 80098c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098c8:	b141      	cbz	r1, 80098dc <_fseeko_r+0xbc>
 80098ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098ce:	4299      	cmp	r1, r3
 80098d0:	d002      	beq.n	80098d8 <_fseeko_r+0xb8>
 80098d2:	4630      	mov	r0, r6
 80098d4:	f000 f97c 	bl	8009bd0 <_free_r>
 80098d8:	2300      	movs	r3, #0
 80098da:	6363      	str	r3, [r4, #52]	; 0x34
 80098dc:	6923      	ldr	r3, [r4, #16]
 80098de:	6023      	str	r3, [r4, #0]
 80098e0:	89a3      	ldrh	r3, [r4, #12]
 80098e2:	2600      	movs	r6, #0
 80098e4:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 80098e8:	6066      	str	r6, [r4, #4]
 80098ea:	81a3      	strh	r3, [r4, #12]
 80098ec:	2208      	movs	r2, #8
 80098ee:	4631      	mov	r1, r6
 80098f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80098f4:	f000 f964 	bl	8009bc0 <memset>
 80098f8:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80098fa:	f015 0501 	ands.w	r5, r5, #1
 80098fe:	d13b      	bne.n	8009978 <_fseeko_r+0x158>
 8009900:	89a3      	ldrh	r3, [r4, #12]
 8009902:	059b      	lsls	r3, r3, #22
 8009904:	d4ba      	bmi.n	800987c <_fseeko_r+0x5c>
 8009906:	e021      	b.n	800994c <_fseeko_r+0x12c>
 8009908:	4621      	mov	r1, r4
 800990a:	4630      	mov	r0, r6
 800990c:	f7ff fe18 	bl	8009540 <_fflush_r>
 8009910:	89a2      	ldrh	r2, [r4, #12]
 8009912:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009916:	d00c      	beq.n	8009932 <_fseeko_r+0x112>
 8009918:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800991a:	89a3      	ldrh	r3, [r4, #12]
 800991c:	075a      	lsls	r2, r3, #29
 800991e:	d519      	bpl.n	8009954 <_fseeko_r+0x134>
 8009920:	6863      	ldr	r3, [r4, #4]
 8009922:	1aed      	subs	r5, r5, r3
 8009924:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009926:	b10b      	cbz	r3, 800992c <_fseeko_r+0x10c>
 8009928:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800992a:	1aed      	subs	r5, r5, r3
 800992c:	442f      	add	r7, r5
 800992e:	2500      	movs	r5, #0
 8009930:	e7b6      	b.n	80098a0 <_fseeko_r+0x80>
 8009932:	462b      	mov	r3, r5
 8009934:	6a21      	ldr	r1, [r4, #32]
 8009936:	4630      	mov	r0, r6
 8009938:	47c0      	blx	r8
 800993a:	1c43      	adds	r3, r0, #1
 800993c:	4605      	mov	r5, r0
 800993e:	d1ec      	bne.n	800991a <_fseeko_r+0xfa>
 8009940:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009942:	07d8      	lsls	r0, r3, #31
 8009944:	d498      	bmi.n	8009878 <_fseeko_r+0x58>
 8009946:	89a3      	ldrh	r3, [r4, #12]
 8009948:	0599      	lsls	r1, r3, #22
 800994a:	d495      	bmi.n	8009878 <_fseeko_r+0x58>
 800994c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800994e:	f000 f8d0 	bl	8009af2 <__retarget_lock_release_recursive>
 8009952:	e793      	b.n	800987c <_fseeko_r+0x5c>
 8009954:	0718      	lsls	r0, r3, #28
 8009956:	d5e9      	bpl.n	800992c <_fseeko_r+0x10c>
 8009958:	6823      	ldr	r3, [r4, #0]
 800995a:	6922      	ldr	r2, [r4, #16]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d0e5      	beq.n	800992c <_fseeko_r+0x10c>
 8009960:	1a9b      	subs	r3, r3, r2
 8009962:	441d      	add	r5, r3
 8009964:	e7e2      	b.n	800992c <_fseeko_r+0x10c>
 8009966:	2316      	movs	r3, #22
 8009968:	e782      	b.n	8009870 <_fseeko_r+0x50>
 800996a:	89a3      	ldrh	r3, [r4, #12]
 800996c:	059a      	lsls	r2, r3, #22
 800996e:	d483      	bmi.n	8009878 <_fseeko_r+0x58>
 8009970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009972:	f000 f8be 	bl	8009af2 <__retarget_lock_release_recursive>
 8009976:	e77f      	b.n	8009878 <_fseeko_r+0x58>
 8009978:	4635      	mov	r5, r6
 800997a:	e77f      	b.n	800987c <_fseeko_r+0x5c>
 800997c:	0800a200 	.word	0x0800a200
 8009980:	0800a220 	.word	0x0800a220
 8009984:	0800a1e0 	.word	0x0800a1e0

08009988 <_fwalk_reent>:
 8009988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800998c:	4606      	mov	r6, r0
 800998e:	4688      	mov	r8, r1
 8009990:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009994:	2700      	movs	r7, #0
 8009996:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800999a:	f1b9 0901 	subs.w	r9, r9, #1
 800999e:	d505      	bpl.n	80099ac <_fwalk_reent+0x24>
 80099a0:	6824      	ldr	r4, [r4, #0]
 80099a2:	2c00      	cmp	r4, #0
 80099a4:	d1f7      	bne.n	8009996 <_fwalk_reent+0xe>
 80099a6:	4638      	mov	r0, r7
 80099a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099ac:	89ab      	ldrh	r3, [r5, #12]
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d907      	bls.n	80099c2 <_fwalk_reent+0x3a>
 80099b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099b6:	3301      	adds	r3, #1
 80099b8:	d003      	beq.n	80099c2 <_fwalk_reent+0x3a>
 80099ba:	4629      	mov	r1, r5
 80099bc:	4630      	mov	r0, r6
 80099be:	47c0      	blx	r8
 80099c0:	4307      	orrs	r7, r0
 80099c2:	3568      	adds	r5, #104	; 0x68
 80099c4:	e7e9      	b.n	800999a <_fwalk_reent+0x12>
	...

080099c8 <_fwrite_r>:
 80099c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099cc:	9c08      	ldr	r4, [sp, #32]
 80099ce:	468a      	mov	sl, r1
 80099d0:	4690      	mov	r8, r2
 80099d2:	fb02 f903 	mul.w	r9, r2, r3
 80099d6:	4605      	mov	r5, r0
 80099d8:	b118      	cbz	r0, 80099e2 <_fwrite_r+0x1a>
 80099da:	6983      	ldr	r3, [r0, #24]
 80099dc:	b90b      	cbnz	r3, 80099e2 <_fwrite_r+0x1a>
 80099de:	f7ff fe43 	bl	8009668 <__sinit>
 80099e2:	4b26      	ldr	r3, [pc, #152]	; (8009a7c <_fwrite_r+0xb4>)
 80099e4:	429c      	cmp	r4, r3
 80099e6:	d123      	bne.n	8009a30 <_fwrite_r+0x68>
 80099e8:	686c      	ldr	r4, [r5, #4]
 80099ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099ec:	07de      	lsls	r6, r3, #31
 80099ee:	d405      	bmi.n	80099fc <_fwrite_r+0x34>
 80099f0:	89a3      	ldrh	r3, [r4, #12]
 80099f2:	0598      	lsls	r0, r3, #22
 80099f4:	d402      	bmi.n	80099fc <_fwrite_r+0x34>
 80099f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099f8:	f000 f87a 	bl	8009af0 <__retarget_lock_acquire_recursive>
 80099fc:	89a3      	ldrh	r3, [r4, #12]
 80099fe:	0719      	lsls	r1, r3, #28
 8009a00:	d520      	bpl.n	8009a44 <_fwrite_r+0x7c>
 8009a02:	6923      	ldr	r3, [r4, #16]
 8009a04:	b1f3      	cbz	r3, 8009a44 <_fwrite_r+0x7c>
 8009a06:	2600      	movs	r6, #0
 8009a08:	454e      	cmp	r6, r9
 8009a0a:	d029      	beq.n	8009a60 <_fwrite_r+0x98>
 8009a0c:	68a7      	ldr	r7, [r4, #8]
 8009a0e:	f81a 1006 	ldrb.w	r1, [sl, r6]
 8009a12:	3f01      	subs	r7, #1
 8009a14:	2f00      	cmp	r7, #0
 8009a16:	60a7      	str	r7, [r4, #8]
 8009a18:	da04      	bge.n	8009a24 <_fwrite_r+0x5c>
 8009a1a:	69a3      	ldr	r3, [r4, #24]
 8009a1c:	429f      	cmp	r7, r3
 8009a1e:	db19      	blt.n	8009a54 <_fwrite_r+0x8c>
 8009a20:	290a      	cmp	r1, #10
 8009a22:	d017      	beq.n	8009a54 <_fwrite_r+0x8c>
 8009a24:	6823      	ldr	r3, [r4, #0]
 8009a26:	1c5a      	adds	r2, r3, #1
 8009a28:	6022      	str	r2, [r4, #0]
 8009a2a:	7019      	strb	r1, [r3, #0]
 8009a2c:	3601      	adds	r6, #1
 8009a2e:	e7eb      	b.n	8009a08 <_fwrite_r+0x40>
 8009a30:	4b13      	ldr	r3, [pc, #76]	; (8009a80 <_fwrite_r+0xb8>)
 8009a32:	429c      	cmp	r4, r3
 8009a34:	d101      	bne.n	8009a3a <_fwrite_r+0x72>
 8009a36:	68ac      	ldr	r4, [r5, #8]
 8009a38:	e7d7      	b.n	80099ea <_fwrite_r+0x22>
 8009a3a:	4b12      	ldr	r3, [pc, #72]	; (8009a84 <_fwrite_r+0xbc>)
 8009a3c:	429c      	cmp	r4, r3
 8009a3e:	bf08      	it	eq
 8009a40:	68ec      	ldreq	r4, [r5, #12]
 8009a42:	e7d2      	b.n	80099ea <_fwrite_r+0x22>
 8009a44:	4621      	mov	r1, r4
 8009a46:	4628      	mov	r0, r5
 8009a48:	f000 fa6c 	bl	8009f24 <__swsetup_r>
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	d0da      	beq.n	8009a06 <_fwrite_r+0x3e>
 8009a50:	2600      	movs	r6, #0
 8009a52:	e005      	b.n	8009a60 <_fwrite_r+0x98>
 8009a54:	4622      	mov	r2, r4
 8009a56:	4628      	mov	r0, r5
 8009a58:	f000 fa00 	bl	8009e5c <__swbuf_r>
 8009a5c:	3001      	adds	r0, #1
 8009a5e:	d1e5      	bne.n	8009a2c <_fwrite_r+0x64>
 8009a60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a62:	07da      	lsls	r2, r3, #31
 8009a64:	d405      	bmi.n	8009a72 <_fwrite_r+0xaa>
 8009a66:	89a3      	ldrh	r3, [r4, #12]
 8009a68:	059b      	lsls	r3, r3, #22
 8009a6a:	d402      	bmi.n	8009a72 <_fwrite_r+0xaa>
 8009a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a6e:	f000 f840 	bl	8009af2 <__retarget_lock_release_recursive>
 8009a72:	fbb6 f0f8 	udiv	r0, r6, r8
 8009a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a7a:	bf00      	nop
 8009a7c:	0800a200 	.word	0x0800a200
 8009a80:	0800a220 	.word	0x0800a220
 8009a84:	0800a1e0 	.word	0x0800a1e0

08009a88 <fwrite>:
 8009a88:	b507      	push	{r0, r1, r2, lr}
 8009a8a:	9300      	str	r3, [sp, #0]
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	460a      	mov	r2, r1
 8009a90:	4601      	mov	r1, r0
 8009a92:	4803      	ldr	r0, [pc, #12]	; (8009aa0 <fwrite+0x18>)
 8009a94:	6800      	ldr	r0, [r0, #0]
 8009a96:	f7ff ff97 	bl	80099c8 <_fwrite_r>
 8009a9a:	b003      	add	sp, #12
 8009a9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009aa0:	24000010 	.word	0x24000010

08009aa4 <__libc_init_array>:
 8009aa4:	b570      	push	{r4, r5, r6, lr}
 8009aa6:	4d0d      	ldr	r5, [pc, #52]	; (8009adc <__libc_init_array+0x38>)
 8009aa8:	4c0d      	ldr	r4, [pc, #52]	; (8009ae0 <__libc_init_array+0x3c>)
 8009aaa:	1b64      	subs	r4, r4, r5
 8009aac:	10a4      	asrs	r4, r4, #2
 8009aae:	2600      	movs	r6, #0
 8009ab0:	42a6      	cmp	r6, r4
 8009ab2:	d109      	bne.n	8009ac8 <__libc_init_array+0x24>
 8009ab4:	4d0b      	ldr	r5, [pc, #44]	; (8009ae4 <__libc_init_array+0x40>)
 8009ab6:	4c0c      	ldr	r4, [pc, #48]	; (8009ae8 <__libc_init_array+0x44>)
 8009ab8:	f000 fb5e 	bl	800a178 <_init>
 8009abc:	1b64      	subs	r4, r4, r5
 8009abe:	10a4      	asrs	r4, r4, #2
 8009ac0:	2600      	movs	r6, #0
 8009ac2:	42a6      	cmp	r6, r4
 8009ac4:	d105      	bne.n	8009ad2 <__libc_init_array+0x2e>
 8009ac6:	bd70      	pop	{r4, r5, r6, pc}
 8009ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009acc:	4798      	blx	r3
 8009ace:	3601      	adds	r6, #1
 8009ad0:	e7ee      	b.n	8009ab0 <__libc_init_array+0xc>
 8009ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ad6:	4798      	blx	r3
 8009ad8:	3601      	adds	r6, #1
 8009ada:	e7f2      	b.n	8009ac2 <__libc_init_array+0x1e>
 8009adc:	0800a24c 	.word	0x0800a24c
 8009ae0:	0800a24c 	.word	0x0800a24c
 8009ae4:	0800a24c 	.word	0x0800a24c
 8009ae8:	0800a250 	.word	0x0800a250

08009aec <__retarget_lock_init_recursive>:
 8009aec:	4770      	bx	lr

08009aee <__retarget_lock_close_recursive>:
 8009aee:	4770      	bx	lr

08009af0 <__retarget_lock_acquire_recursive>:
 8009af0:	4770      	bx	lr

08009af2 <__retarget_lock_release_recursive>:
 8009af2:	4770      	bx	lr

08009af4 <__swhatbuf_r>:
 8009af4:	b570      	push	{r4, r5, r6, lr}
 8009af6:	460e      	mov	r6, r1
 8009af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009afc:	2900      	cmp	r1, #0
 8009afe:	b096      	sub	sp, #88	; 0x58
 8009b00:	4614      	mov	r4, r2
 8009b02:	461d      	mov	r5, r3
 8009b04:	da08      	bge.n	8009b18 <__swhatbuf_r+0x24>
 8009b06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	602a      	str	r2, [r5, #0]
 8009b0e:	061a      	lsls	r2, r3, #24
 8009b10:	d410      	bmi.n	8009b34 <__swhatbuf_r+0x40>
 8009b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b16:	e00e      	b.n	8009b36 <__swhatbuf_r+0x42>
 8009b18:	466a      	mov	r2, sp
 8009b1a:	f000 fab7 	bl	800a08c <_fstat_r>
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	dbf1      	blt.n	8009b06 <__swhatbuf_r+0x12>
 8009b22:	9a01      	ldr	r2, [sp, #4]
 8009b24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b2c:	425a      	negs	r2, r3
 8009b2e:	415a      	adcs	r2, r3
 8009b30:	602a      	str	r2, [r5, #0]
 8009b32:	e7ee      	b.n	8009b12 <__swhatbuf_r+0x1e>
 8009b34:	2340      	movs	r3, #64	; 0x40
 8009b36:	2000      	movs	r0, #0
 8009b38:	6023      	str	r3, [r4, #0]
 8009b3a:	b016      	add	sp, #88	; 0x58
 8009b3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009b40 <__smakebuf_r>:
 8009b40:	898b      	ldrh	r3, [r1, #12]
 8009b42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b44:	079d      	lsls	r5, r3, #30
 8009b46:	4606      	mov	r6, r0
 8009b48:	460c      	mov	r4, r1
 8009b4a:	d507      	bpl.n	8009b5c <__smakebuf_r+0x1c>
 8009b4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b50:	6023      	str	r3, [r4, #0]
 8009b52:	6123      	str	r3, [r4, #16]
 8009b54:	2301      	movs	r3, #1
 8009b56:	6163      	str	r3, [r4, #20]
 8009b58:	b002      	add	sp, #8
 8009b5a:	bd70      	pop	{r4, r5, r6, pc}
 8009b5c:	ab01      	add	r3, sp, #4
 8009b5e:	466a      	mov	r2, sp
 8009b60:	f7ff ffc8 	bl	8009af4 <__swhatbuf_r>
 8009b64:	9900      	ldr	r1, [sp, #0]
 8009b66:	4605      	mov	r5, r0
 8009b68:	4630      	mov	r0, r6
 8009b6a:	f000 f89d 	bl	8009ca8 <_malloc_r>
 8009b6e:	b948      	cbnz	r0, 8009b84 <__smakebuf_r+0x44>
 8009b70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b74:	059a      	lsls	r2, r3, #22
 8009b76:	d4ef      	bmi.n	8009b58 <__smakebuf_r+0x18>
 8009b78:	f023 0303 	bic.w	r3, r3, #3
 8009b7c:	f043 0302 	orr.w	r3, r3, #2
 8009b80:	81a3      	strh	r3, [r4, #12]
 8009b82:	e7e3      	b.n	8009b4c <__smakebuf_r+0xc>
 8009b84:	4b0d      	ldr	r3, [pc, #52]	; (8009bbc <__smakebuf_r+0x7c>)
 8009b86:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b88:	89a3      	ldrh	r3, [r4, #12]
 8009b8a:	6020      	str	r0, [r4, #0]
 8009b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b90:	81a3      	strh	r3, [r4, #12]
 8009b92:	9b00      	ldr	r3, [sp, #0]
 8009b94:	6163      	str	r3, [r4, #20]
 8009b96:	9b01      	ldr	r3, [sp, #4]
 8009b98:	6120      	str	r0, [r4, #16]
 8009b9a:	b15b      	cbz	r3, 8009bb4 <__smakebuf_r+0x74>
 8009b9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	f000 fa85 	bl	800a0b0 <_isatty_r>
 8009ba6:	b128      	cbz	r0, 8009bb4 <__smakebuf_r+0x74>
 8009ba8:	89a3      	ldrh	r3, [r4, #12]
 8009baa:	f023 0303 	bic.w	r3, r3, #3
 8009bae:	f043 0301 	orr.w	r3, r3, #1
 8009bb2:	81a3      	strh	r3, [r4, #12]
 8009bb4:	89a0      	ldrh	r0, [r4, #12]
 8009bb6:	4305      	orrs	r5, r0
 8009bb8:	81a5      	strh	r5, [r4, #12]
 8009bba:	e7cd      	b.n	8009b58 <__smakebuf_r+0x18>
 8009bbc:	08009601 	.word	0x08009601

08009bc0 <memset>:
 8009bc0:	4402      	add	r2, r0
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d100      	bne.n	8009bca <memset+0xa>
 8009bc8:	4770      	bx	lr
 8009bca:	f803 1b01 	strb.w	r1, [r3], #1
 8009bce:	e7f9      	b.n	8009bc4 <memset+0x4>

08009bd0 <_free_r>:
 8009bd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bd2:	2900      	cmp	r1, #0
 8009bd4:	d044      	beq.n	8009c60 <_free_r+0x90>
 8009bd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bda:	9001      	str	r0, [sp, #4]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f1a1 0404 	sub.w	r4, r1, #4
 8009be2:	bfb8      	it	lt
 8009be4:	18e4      	addlt	r4, r4, r3
 8009be6:	f000 fa85 	bl	800a0f4 <__malloc_lock>
 8009bea:	4a1e      	ldr	r2, [pc, #120]	; (8009c64 <_free_r+0x94>)
 8009bec:	9801      	ldr	r0, [sp, #4]
 8009bee:	6813      	ldr	r3, [r2, #0]
 8009bf0:	b933      	cbnz	r3, 8009c00 <_free_r+0x30>
 8009bf2:	6063      	str	r3, [r4, #4]
 8009bf4:	6014      	str	r4, [r2, #0]
 8009bf6:	b003      	add	sp, #12
 8009bf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bfc:	f000 ba80 	b.w	800a100 <__malloc_unlock>
 8009c00:	42a3      	cmp	r3, r4
 8009c02:	d908      	bls.n	8009c16 <_free_r+0x46>
 8009c04:	6825      	ldr	r5, [r4, #0]
 8009c06:	1961      	adds	r1, r4, r5
 8009c08:	428b      	cmp	r3, r1
 8009c0a:	bf01      	itttt	eq
 8009c0c:	6819      	ldreq	r1, [r3, #0]
 8009c0e:	685b      	ldreq	r3, [r3, #4]
 8009c10:	1949      	addeq	r1, r1, r5
 8009c12:	6021      	streq	r1, [r4, #0]
 8009c14:	e7ed      	b.n	8009bf2 <_free_r+0x22>
 8009c16:	461a      	mov	r2, r3
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	b10b      	cbz	r3, 8009c20 <_free_r+0x50>
 8009c1c:	42a3      	cmp	r3, r4
 8009c1e:	d9fa      	bls.n	8009c16 <_free_r+0x46>
 8009c20:	6811      	ldr	r1, [r2, #0]
 8009c22:	1855      	adds	r5, r2, r1
 8009c24:	42a5      	cmp	r5, r4
 8009c26:	d10b      	bne.n	8009c40 <_free_r+0x70>
 8009c28:	6824      	ldr	r4, [r4, #0]
 8009c2a:	4421      	add	r1, r4
 8009c2c:	1854      	adds	r4, r2, r1
 8009c2e:	42a3      	cmp	r3, r4
 8009c30:	6011      	str	r1, [r2, #0]
 8009c32:	d1e0      	bne.n	8009bf6 <_free_r+0x26>
 8009c34:	681c      	ldr	r4, [r3, #0]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	6053      	str	r3, [r2, #4]
 8009c3a:	4421      	add	r1, r4
 8009c3c:	6011      	str	r1, [r2, #0]
 8009c3e:	e7da      	b.n	8009bf6 <_free_r+0x26>
 8009c40:	d902      	bls.n	8009c48 <_free_r+0x78>
 8009c42:	230c      	movs	r3, #12
 8009c44:	6003      	str	r3, [r0, #0]
 8009c46:	e7d6      	b.n	8009bf6 <_free_r+0x26>
 8009c48:	6825      	ldr	r5, [r4, #0]
 8009c4a:	1961      	adds	r1, r4, r5
 8009c4c:	428b      	cmp	r3, r1
 8009c4e:	bf04      	itt	eq
 8009c50:	6819      	ldreq	r1, [r3, #0]
 8009c52:	685b      	ldreq	r3, [r3, #4]
 8009c54:	6063      	str	r3, [r4, #4]
 8009c56:	bf04      	itt	eq
 8009c58:	1949      	addeq	r1, r1, r5
 8009c5a:	6021      	streq	r1, [r4, #0]
 8009c5c:	6054      	str	r4, [r2, #4]
 8009c5e:	e7ca      	b.n	8009bf6 <_free_r+0x26>
 8009c60:	b003      	add	sp, #12
 8009c62:	bd30      	pop	{r4, r5, pc}
 8009c64:	2404b338 	.word	0x2404b338

08009c68 <sbrk_aligned>:
 8009c68:	b570      	push	{r4, r5, r6, lr}
 8009c6a:	4e0e      	ldr	r6, [pc, #56]	; (8009ca4 <sbrk_aligned+0x3c>)
 8009c6c:	460c      	mov	r4, r1
 8009c6e:	6831      	ldr	r1, [r6, #0]
 8009c70:	4605      	mov	r5, r0
 8009c72:	b911      	cbnz	r1, 8009c7a <sbrk_aligned+0x12>
 8009c74:	f000 f89e 	bl	8009db4 <_sbrk_r>
 8009c78:	6030      	str	r0, [r6, #0]
 8009c7a:	4621      	mov	r1, r4
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	f000 f899 	bl	8009db4 <_sbrk_r>
 8009c82:	1c43      	adds	r3, r0, #1
 8009c84:	d00a      	beq.n	8009c9c <sbrk_aligned+0x34>
 8009c86:	1cc4      	adds	r4, r0, #3
 8009c88:	f024 0403 	bic.w	r4, r4, #3
 8009c8c:	42a0      	cmp	r0, r4
 8009c8e:	d007      	beq.n	8009ca0 <sbrk_aligned+0x38>
 8009c90:	1a21      	subs	r1, r4, r0
 8009c92:	4628      	mov	r0, r5
 8009c94:	f000 f88e 	bl	8009db4 <_sbrk_r>
 8009c98:	3001      	adds	r0, #1
 8009c9a:	d101      	bne.n	8009ca0 <sbrk_aligned+0x38>
 8009c9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	bd70      	pop	{r4, r5, r6, pc}
 8009ca4:	2404b33c 	.word	0x2404b33c

08009ca8 <_malloc_r>:
 8009ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cac:	1ccd      	adds	r5, r1, #3
 8009cae:	f025 0503 	bic.w	r5, r5, #3
 8009cb2:	3508      	adds	r5, #8
 8009cb4:	2d0c      	cmp	r5, #12
 8009cb6:	bf38      	it	cc
 8009cb8:	250c      	movcc	r5, #12
 8009cba:	2d00      	cmp	r5, #0
 8009cbc:	4607      	mov	r7, r0
 8009cbe:	db01      	blt.n	8009cc4 <_malloc_r+0x1c>
 8009cc0:	42a9      	cmp	r1, r5
 8009cc2:	d905      	bls.n	8009cd0 <_malloc_r+0x28>
 8009cc4:	230c      	movs	r3, #12
 8009cc6:	603b      	str	r3, [r7, #0]
 8009cc8:	2600      	movs	r6, #0
 8009cca:	4630      	mov	r0, r6
 8009ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cd0:	4e2e      	ldr	r6, [pc, #184]	; (8009d8c <_malloc_r+0xe4>)
 8009cd2:	f000 fa0f 	bl	800a0f4 <__malloc_lock>
 8009cd6:	6833      	ldr	r3, [r6, #0]
 8009cd8:	461c      	mov	r4, r3
 8009cda:	bb34      	cbnz	r4, 8009d2a <_malloc_r+0x82>
 8009cdc:	4629      	mov	r1, r5
 8009cde:	4638      	mov	r0, r7
 8009ce0:	f7ff ffc2 	bl	8009c68 <sbrk_aligned>
 8009ce4:	1c43      	adds	r3, r0, #1
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	d14d      	bne.n	8009d86 <_malloc_r+0xde>
 8009cea:	6834      	ldr	r4, [r6, #0]
 8009cec:	4626      	mov	r6, r4
 8009cee:	2e00      	cmp	r6, #0
 8009cf0:	d140      	bne.n	8009d74 <_malloc_r+0xcc>
 8009cf2:	6823      	ldr	r3, [r4, #0]
 8009cf4:	4631      	mov	r1, r6
 8009cf6:	4638      	mov	r0, r7
 8009cf8:	eb04 0803 	add.w	r8, r4, r3
 8009cfc:	f000 f85a 	bl	8009db4 <_sbrk_r>
 8009d00:	4580      	cmp	r8, r0
 8009d02:	d13a      	bne.n	8009d7a <_malloc_r+0xd2>
 8009d04:	6821      	ldr	r1, [r4, #0]
 8009d06:	3503      	adds	r5, #3
 8009d08:	1a6d      	subs	r5, r5, r1
 8009d0a:	f025 0503 	bic.w	r5, r5, #3
 8009d0e:	3508      	adds	r5, #8
 8009d10:	2d0c      	cmp	r5, #12
 8009d12:	bf38      	it	cc
 8009d14:	250c      	movcc	r5, #12
 8009d16:	4629      	mov	r1, r5
 8009d18:	4638      	mov	r0, r7
 8009d1a:	f7ff ffa5 	bl	8009c68 <sbrk_aligned>
 8009d1e:	3001      	adds	r0, #1
 8009d20:	d02b      	beq.n	8009d7a <_malloc_r+0xd2>
 8009d22:	6823      	ldr	r3, [r4, #0]
 8009d24:	442b      	add	r3, r5
 8009d26:	6023      	str	r3, [r4, #0]
 8009d28:	e00e      	b.n	8009d48 <_malloc_r+0xa0>
 8009d2a:	6822      	ldr	r2, [r4, #0]
 8009d2c:	1b52      	subs	r2, r2, r5
 8009d2e:	d41e      	bmi.n	8009d6e <_malloc_r+0xc6>
 8009d30:	2a0b      	cmp	r2, #11
 8009d32:	d916      	bls.n	8009d62 <_malloc_r+0xba>
 8009d34:	1961      	adds	r1, r4, r5
 8009d36:	42a3      	cmp	r3, r4
 8009d38:	6025      	str	r5, [r4, #0]
 8009d3a:	bf18      	it	ne
 8009d3c:	6059      	strne	r1, [r3, #4]
 8009d3e:	6863      	ldr	r3, [r4, #4]
 8009d40:	bf08      	it	eq
 8009d42:	6031      	streq	r1, [r6, #0]
 8009d44:	5162      	str	r2, [r4, r5]
 8009d46:	604b      	str	r3, [r1, #4]
 8009d48:	4638      	mov	r0, r7
 8009d4a:	f104 060b 	add.w	r6, r4, #11
 8009d4e:	f000 f9d7 	bl	800a100 <__malloc_unlock>
 8009d52:	f026 0607 	bic.w	r6, r6, #7
 8009d56:	1d23      	adds	r3, r4, #4
 8009d58:	1af2      	subs	r2, r6, r3
 8009d5a:	d0b6      	beq.n	8009cca <_malloc_r+0x22>
 8009d5c:	1b9b      	subs	r3, r3, r6
 8009d5e:	50a3      	str	r3, [r4, r2]
 8009d60:	e7b3      	b.n	8009cca <_malloc_r+0x22>
 8009d62:	6862      	ldr	r2, [r4, #4]
 8009d64:	42a3      	cmp	r3, r4
 8009d66:	bf0c      	ite	eq
 8009d68:	6032      	streq	r2, [r6, #0]
 8009d6a:	605a      	strne	r2, [r3, #4]
 8009d6c:	e7ec      	b.n	8009d48 <_malloc_r+0xa0>
 8009d6e:	4623      	mov	r3, r4
 8009d70:	6864      	ldr	r4, [r4, #4]
 8009d72:	e7b2      	b.n	8009cda <_malloc_r+0x32>
 8009d74:	4634      	mov	r4, r6
 8009d76:	6876      	ldr	r6, [r6, #4]
 8009d78:	e7b9      	b.n	8009cee <_malloc_r+0x46>
 8009d7a:	230c      	movs	r3, #12
 8009d7c:	603b      	str	r3, [r7, #0]
 8009d7e:	4638      	mov	r0, r7
 8009d80:	f000 f9be 	bl	800a100 <__malloc_unlock>
 8009d84:	e7a1      	b.n	8009cca <_malloc_r+0x22>
 8009d86:	6025      	str	r5, [r4, #0]
 8009d88:	e7de      	b.n	8009d48 <_malloc_r+0xa0>
 8009d8a:	bf00      	nop
 8009d8c:	2404b338 	.word	0x2404b338

08009d90 <_open_r>:
 8009d90:	b538      	push	{r3, r4, r5, lr}
 8009d92:	4d07      	ldr	r5, [pc, #28]	; (8009db0 <_open_r+0x20>)
 8009d94:	4604      	mov	r4, r0
 8009d96:	4608      	mov	r0, r1
 8009d98:	4611      	mov	r1, r2
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	602a      	str	r2, [r5, #0]
 8009d9e:	461a      	mov	r2, r3
 8009da0:	f7f7 faa5 	bl	80012ee <_open>
 8009da4:	1c43      	adds	r3, r0, #1
 8009da6:	d102      	bne.n	8009dae <_open_r+0x1e>
 8009da8:	682b      	ldr	r3, [r5, #0]
 8009daa:	b103      	cbz	r3, 8009dae <_open_r+0x1e>
 8009dac:	6023      	str	r3, [r4, #0]
 8009dae:	bd38      	pop	{r3, r4, r5, pc}
 8009db0:	2404b340 	.word	0x2404b340

08009db4 <_sbrk_r>:
 8009db4:	b538      	push	{r3, r4, r5, lr}
 8009db6:	4d06      	ldr	r5, [pc, #24]	; (8009dd0 <_sbrk_r+0x1c>)
 8009db8:	2300      	movs	r3, #0
 8009dba:	4604      	mov	r4, r0
 8009dbc:	4608      	mov	r0, r1
 8009dbe:	602b      	str	r3, [r5, #0]
 8009dc0:	f7f7 faa4 	bl	800130c <_sbrk>
 8009dc4:	1c43      	adds	r3, r0, #1
 8009dc6:	d102      	bne.n	8009dce <_sbrk_r+0x1a>
 8009dc8:	682b      	ldr	r3, [r5, #0]
 8009dca:	b103      	cbz	r3, 8009dce <_sbrk_r+0x1a>
 8009dcc:	6023      	str	r3, [r4, #0]
 8009dce:	bd38      	pop	{r3, r4, r5, pc}
 8009dd0:	2404b340 	.word	0x2404b340

08009dd4 <__sread>:
 8009dd4:	b510      	push	{r4, lr}
 8009dd6:	460c      	mov	r4, r1
 8009dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ddc:	f000 f996 	bl	800a10c <_read_r>
 8009de0:	2800      	cmp	r0, #0
 8009de2:	bfab      	itete	ge
 8009de4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009de6:	89a3      	ldrhlt	r3, [r4, #12]
 8009de8:	181b      	addge	r3, r3, r0
 8009dea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009dee:	bfac      	ite	ge
 8009df0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009df2:	81a3      	strhlt	r3, [r4, #12]
 8009df4:	bd10      	pop	{r4, pc}

08009df6 <__swrite>:
 8009df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dfa:	461f      	mov	r7, r3
 8009dfc:	898b      	ldrh	r3, [r1, #12]
 8009dfe:	05db      	lsls	r3, r3, #23
 8009e00:	4605      	mov	r5, r0
 8009e02:	460c      	mov	r4, r1
 8009e04:	4616      	mov	r6, r2
 8009e06:	d505      	bpl.n	8009e14 <__swrite+0x1e>
 8009e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e0c:	2302      	movs	r3, #2
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f000 f95e 	bl	800a0d0 <_lseek_r>
 8009e14:	89a3      	ldrh	r3, [r4, #12]
 8009e16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e1e:	81a3      	strh	r3, [r4, #12]
 8009e20:	4632      	mov	r2, r6
 8009e22:	463b      	mov	r3, r7
 8009e24:	4628      	mov	r0, r5
 8009e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e2a:	f000 b869 	b.w	8009f00 <_write_r>

08009e2e <__sseek>:
 8009e2e:	b510      	push	{r4, lr}
 8009e30:	460c      	mov	r4, r1
 8009e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e36:	f000 f94b 	bl	800a0d0 <_lseek_r>
 8009e3a:	1c43      	adds	r3, r0, #1
 8009e3c:	89a3      	ldrh	r3, [r4, #12]
 8009e3e:	bf15      	itete	ne
 8009e40:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e4a:	81a3      	strheq	r3, [r4, #12]
 8009e4c:	bf18      	it	ne
 8009e4e:	81a3      	strhne	r3, [r4, #12]
 8009e50:	bd10      	pop	{r4, pc}

08009e52 <__sclose>:
 8009e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e56:	f000 b8d3 	b.w	800a000 <_close_r>
	...

08009e5c <__swbuf_r>:
 8009e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e5e:	460e      	mov	r6, r1
 8009e60:	4614      	mov	r4, r2
 8009e62:	4605      	mov	r5, r0
 8009e64:	b118      	cbz	r0, 8009e6e <__swbuf_r+0x12>
 8009e66:	6983      	ldr	r3, [r0, #24]
 8009e68:	b90b      	cbnz	r3, 8009e6e <__swbuf_r+0x12>
 8009e6a:	f7ff fbfd 	bl	8009668 <__sinit>
 8009e6e:	4b21      	ldr	r3, [pc, #132]	; (8009ef4 <__swbuf_r+0x98>)
 8009e70:	429c      	cmp	r4, r3
 8009e72:	d12b      	bne.n	8009ecc <__swbuf_r+0x70>
 8009e74:	686c      	ldr	r4, [r5, #4]
 8009e76:	69a3      	ldr	r3, [r4, #24]
 8009e78:	60a3      	str	r3, [r4, #8]
 8009e7a:	89a3      	ldrh	r3, [r4, #12]
 8009e7c:	071a      	lsls	r2, r3, #28
 8009e7e:	d52f      	bpl.n	8009ee0 <__swbuf_r+0x84>
 8009e80:	6923      	ldr	r3, [r4, #16]
 8009e82:	b36b      	cbz	r3, 8009ee0 <__swbuf_r+0x84>
 8009e84:	6923      	ldr	r3, [r4, #16]
 8009e86:	6820      	ldr	r0, [r4, #0]
 8009e88:	1ac0      	subs	r0, r0, r3
 8009e8a:	6963      	ldr	r3, [r4, #20]
 8009e8c:	b2f6      	uxtb	r6, r6
 8009e8e:	4283      	cmp	r3, r0
 8009e90:	4637      	mov	r7, r6
 8009e92:	dc04      	bgt.n	8009e9e <__swbuf_r+0x42>
 8009e94:	4621      	mov	r1, r4
 8009e96:	4628      	mov	r0, r5
 8009e98:	f7ff fb52 	bl	8009540 <_fflush_r>
 8009e9c:	bb30      	cbnz	r0, 8009eec <__swbuf_r+0x90>
 8009e9e:	68a3      	ldr	r3, [r4, #8]
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	60a3      	str	r3, [r4, #8]
 8009ea4:	6823      	ldr	r3, [r4, #0]
 8009ea6:	1c5a      	adds	r2, r3, #1
 8009ea8:	6022      	str	r2, [r4, #0]
 8009eaa:	701e      	strb	r6, [r3, #0]
 8009eac:	6963      	ldr	r3, [r4, #20]
 8009eae:	3001      	adds	r0, #1
 8009eb0:	4283      	cmp	r3, r0
 8009eb2:	d004      	beq.n	8009ebe <__swbuf_r+0x62>
 8009eb4:	89a3      	ldrh	r3, [r4, #12]
 8009eb6:	07db      	lsls	r3, r3, #31
 8009eb8:	d506      	bpl.n	8009ec8 <__swbuf_r+0x6c>
 8009eba:	2e0a      	cmp	r6, #10
 8009ebc:	d104      	bne.n	8009ec8 <__swbuf_r+0x6c>
 8009ebe:	4621      	mov	r1, r4
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	f7ff fb3d 	bl	8009540 <_fflush_r>
 8009ec6:	b988      	cbnz	r0, 8009eec <__swbuf_r+0x90>
 8009ec8:	4638      	mov	r0, r7
 8009eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ecc:	4b0a      	ldr	r3, [pc, #40]	; (8009ef8 <__swbuf_r+0x9c>)
 8009ece:	429c      	cmp	r4, r3
 8009ed0:	d101      	bne.n	8009ed6 <__swbuf_r+0x7a>
 8009ed2:	68ac      	ldr	r4, [r5, #8]
 8009ed4:	e7cf      	b.n	8009e76 <__swbuf_r+0x1a>
 8009ed6:	4b09      	ldr	r3, [pc, #36]	; (8009efc <__swbuf_r+0xa0>)
 8009ed8:	429c      	cmp	r4, r3
 8009eda:	bf08      	it	eq
 8009edc:	68ec      	ldreq	r4, [r5, #12]
 8009ede:	e7ca      	b.n	8009e76 <__swbuf_r+0x1a>
 8009ee0:	4621      	mov	r1, r4
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	f000 f81e 	bl	8009f24 <__swsetup_r>
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	d0cb      	beq.n	8009e84 <__swbuf_r+0x28>
 8009eec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009ef0:	e7ea      	b.n	8009ec8 <__swbuf_r+0x6c>
 8009ef2:	bf00      	nop
 8009ef4:	0800a200 	.word	0x0800a200
 8009ef8:	0800a220 	.word	0x0800a220
 8009efc:	0800a1e0 	.word	0x0800a1e0

08009f00 <_write_r>:
 8009f00:	b538      	push	{r3, r4, r5, lr}
 8009f02:	4d07      	ldr	r5, [pc, #28]	; (8009f20 <_write_r+0x20>)
 8009f04:	4604      	mov	r4, r0
 8009f06:	4608      	mov	r0, r1
 8009f08:	4611      	mov	r1, r2
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	602a      	str	r2, [r5, #0]
 8009f0e:	461a      	mov	r2, r3
 8009f10:	f7f7 f99d 	bl	800124e <_write>
 8009f14:	1c43      	adds	r3, r0, #1
 8009f16:	d102      	bne.n	8009f1e <_write_r+0x1e>
 8009f18:	682b      	ldr	r3, [r5, #0]
 8009f1a:	b103      	cbz	r3, 8009f1e <_write_r+0x1e>
 8009f1c:	6023      	str	r3, [r4, #0]
 8009f1e:	bd38      	pop	{r3, r4, r5, pc}
 8009f20:	2404b340 	.word	0x2404b340

08009f24 <__swsetup_r>:
 8009f24:	4b32      	ldr	r3, [pc, #200]	; (8009ff0 <__swsetup_r+0xcc>)
 8009f26:	b570      	push	{r4, r5, r6, lr}
 8009f28:	681d      	ldr	r5, [r3, #0]
 8009f2a:	4606      	mov	r6, r0
 8009f2c:	460c      	mov	r4, r1
 8009f2e:	b125      	cbz	r5, 8009f3a <__swsetup_r+0x16>
 8009f30:	69ab      	ldr	r3, [r5, #24]
 8009f32:	b913      	cbnz	r3, 8009f3a <__swsetup_r+0x16>
 8009f34:	4628      	mov	r0, r5
 8009f36:	f7ff fb97 	bl	8009668 <__sinit>
 8009f3a:	4b2e      	ldr	r3, [pc, #184]	; (8009ff4 <__swsetup_r+0xd0>)
 8009f3c:	429c      	cmp	r4, r3
 8009f3e:	d10f      	bne.n	8009f60 <__swsetup_r+0x3c>
 8009f40:	686c      	ldr	r4, [r5, #4]
 8009f42:	89a3      	ldrh	r3, [r4, #12]
 8009f44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f48:	0719      	lsls	r1, r3, #28
 8009f4a:	d42c      	bmi.n	8009fa6 <__swsetup_r+0x82>
 8009f4c:	06dd      	lsls	r5, r3, #27
 8009f4e:	d411      	bmi.n	8009f74 <__swsetup_r+0x50>
 8009f50:	2309      	movs	r3, #9
 8009f52:	6033      	str	r3, [r6, #0]
 8009f54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f58:	81a3      	strh	r3, [r4, #12]
 8009f5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f5e:	e03e      	b.n	8009fde <__swsetup_r+0xba>
 8009f60:	4b25      	ldr	r3, [pc, #148]	; (8009ff8 <__swsetup_r+0xd4>)
 8009f62:	429c      	cmp	r4, r3
 8009f64:	d101      	bne.n	8009f6a <__swsetup_r+0x46>
 8009f66:	68ac      	ldr	r4, [r5, #8]
 8009f68:	e7eb      	b.n	8009f42 <__swsetup_r+0x1e>
 8009f6a:	4b24      	ldr	r3, [pc, #144]	; (8009ffc <__swsetup_r+0xd8>)
 8009f6c:	429c      	cmp	r4, r3
 8009f6e:	bf08      	it	eq
 8009f70:	68ec      	ldreq	r4, [r5, #12]
 8009f72:	e7e6      	b.n	8009f42 <__swsetup_r+0x1e>
 8009f74:	0758      	lsls	r0, r3, #29
 8009f76:	d512      	bpl.n	8009f9e <__swsetup_r+0x7a>
 8009f78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f7a:	b141      	cbz	r1, 8009f8e <__swsetup_r+0x6a>
 8009f7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f80:	4299      	cmp	r1, r3
 8009f82:	d002      	beq.n	8009f8a <__swsetup_r+0x66>
 8009f84:	4630      	mov	r0, r6
 8009f86:	f7ff fe23 	bl	8009bd0 <_free_r>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	6363      	str	r3, [r4, #52]	; 0x34
 8009f8e:	89a3      	ldrh	r3, [r4, #12]
 8009f90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f94:	81a3      	strh	r3, [r4, #12]
 8009f96:	2300      	movs	r3, #0
 8009f98:	6063      	str	r3, [r4, #4]
 8009f9a:	6923      	ldr	r3, [r4, #16]
 8009f9c:	6023      	str	r3, [r4, #0]
 8009f9e:	89a3      	ldrh	r3, [r4, #12]
 8009fa0:	f043 0308 	orr.w	r3, r3, #8
 8009fa4:	81a3      	strh	r3, [r4, #12]
 8009fa6:	6923      	ldr	r3, [r4, #16]
 8009fa8:	b94b      	cbnz	r3, 8009fbe <__swsetup_r+0x9a>
 8009faa:	89a3      	ldrh	r3, [r4, #12]
 8009fac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fb4:	d003      	beq.n	8009fbe <__swsetup_r+0x9a>
 8009fb6:	4621      	mov	r1, r4
 8009fb8:	4630      	mov	r0, r6
 8009fba:	f7ff fdc1 	bl	8009b40 <__smakebuf_r>
 8009fbe:	89a0      	ldrh	r0, [r4, #12]
 8009fc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fc4:	f010 0301 	ands.w	r3, r0, #1
 8009fc8:	d00a      	beq.n	8009fe0 <__swsetup_r+0xbc>
 8009fca:	2300      	movs	r3, #0
 8009fcc:	60a3      	str	r3, [r4, #8]
 8009fce:	6963      	ldr	r3, [r4, #20]
 8009fd0:	425b      	negs	r3, r3
 8009fd2:	61a3      	str	r3, [r4, #24]
 8009fd4:	6923      	ldr	r3, [r4, #16]
 8009fd6:	b943      	cbnz	r3, 8009fea <__swsetup_r+0xc6>
 8009fd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009fdc:	d1ba      	bne.n	8009f54 <__swsetup_r+0x30>
 8009fde:	bd70      	pop	{r4, r5, r6, pc}
 8009fe0:	0781      	lsls	r1, r0, #30
 8009fe2:	bf58      	it	pl
 8009fe4:	6963      	ldrpl	r3, [r4, #20]
 8009fe6:	60a3      	str	r3, [r4, #8]
 8009fe8:	e7f4      	b.n	8009fd4 <__swsetup_r+0xb0>
 8009fea:	2000      	movs	r0, #0
 8009fec:	e7f7      	b.n	8009fde <__swsetup_r+0xba>
 8009fee:	bf00      	nop
 8009ff0:	24000010 	.word	0x24000010
 8009ff4:	0800a200 	.word	0x0800a200
 8009ff8:	0800a220 	.word	0x0800a220
 8009ffc:	0800a1e0 	.word	0x0800a1e0

0800a000 <_close_r>:
 800a000:	b538      	push	{r3, r4, r5, lr}
 800a002:	4d06      	ldr	r5, [pc, #24]	; (800a01c <_close_r+0x1c>)
 800a004:	2300      	movs	r3, #0
 800a006:	4604      	mov	r4, r0
 800a008:	4608      	mov	r0, r1
 800a00a:	602b      	str	r3, [r5, #0]
 800a00c:	f7f7 f93b 	bl	8001286 <_close>
 800a010:	1c43      	adds	r3, r0, #1
 800a012:	d102      	bne.n	800a01a <_close_r+0x1a>
 800a014:	682b      	ldr	r3, [r5, #0]
 800a016:	b103      	cbz	r3, 800a01a <_close_r+0x1a>
 800a018:	6023      	str	r3, [r4, #0]
 800a01a:	bd38      	pop	{r3, r4, r5, pc}
 800a01c:	2404b340 	.word	0x2404b340

0800a020 <__sflags>:
 800a020:	780b      	ldrb	r3, [r1, #0]
 800a022:	2b72      	cmp	r3, #114	; 0x72
 800a024:	b530      	push	{r4, r5, lr}
 800a026:	d022      	beq.n	800a06e <__sflags+0x4e>
 800a028:	2b77      	cmp	r3, #119	; 0x77
 800a02a:	d024      	beq.n	800a076 <__sflags+0x56>
 800a02c:	2b61      	cmp	r3, #97	; 0x61
 800a02e:	d027      	beq.n	800a080 <__sflags+0x60>
 800a030:	2316      	movs	r3, #22
 800a032:	6003      	str	r3, [r0, #0]
 800a034:	2000      	movs	r0, #0
 800a036:	bd30      	pop	{r4, r5, pc}
 800a038:	2d62      	cmp	r5, #98	; 0x62
 800a03a:	d012      	beq.n	800a062 <__sflags+0x42>
 800a03c:	2d78      	cmp	r5, #120	; 0x78
 800a03e:	d013      	beq.n	800a068 <__sflags+0x48>
 800a040:	2d2b      	cmp	r5, #43	; 0x2b
 800a042:	d107      	bne.n	800a054 <__sflags+0x34>
 800a044:	f020 001c 	bic.w	r0, r0, #28
 800a048:	f023 0303 	bic.w	r3, r3, #3
 800a04c:	f040 0010 	orr.w	r0, r0, #16
 800a050:	f043 0302 	orr.w	r3, r3, #2
 800a054:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800a058:	2d00      	cmp	r5, #0
 800a05a:	d1ed      	bne.n	800a038 <__sflags+0x18>
 800a05c:	4323      	orrs	r3, r4
 800a05e:	6013      	str	r3, [r2, #0]
 800a060:	e7e9      	b.n	800a036 <__sflags+0x16>
 800a062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a066:	e7f5      	b.n	800a054 <__sflags+0x34>
 800a068:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a06c:	e7f2      	b.n	800a054 <__sflags+0x34>
 800a06e:	2400      	movs	r4, #0
 800a070:	4623      	mov	r3, r4
 800a072:	2004      	movs	r0, #4
 800a074:	e7ee      	b.n	800a054 <__sflags+0x34>
 800a076:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 800a07a:	2301      	movs	r3, #1
 800a07c:	2008      	movs	r0, #8
 800a07e:	e7e9      	b.n	800a054 <__sflags+0x34>
 800a080:	f44f 7402 	mov.w	r4, #520	; 0x208
 800a084:	2301      	movs	r3, #1
 800a086:	f44f 7084 	mov.w	r0, #264	; 0x108
 800a08a:	e7e3      	b.n	800a054 <__sflags+0x34>

0800a08c <_fstat_r>:
 800a08c:	b538      	push	{r3, r4, r5, lr}
 800a08e:	4d07      	ldr	r5, [pc, #28]	; (800a0ac <_fstat_r+0x20>)
 800a090:	2300      	movs	r3, #0
 800a092:	4604      	mov	r4, r0
 800a094:	4608      	mov	r0, r1
 800a096:	4611      	mov	r1, r2
 800a098:	602b      	str	r3, [r5, #0]
 800a09a:	f7f7 f900 	bl	800129e <_fstat>
 800a09e:	1c43      	adds	r3, r0, #1
 800a0a0:	d102      	bne.n	800a0a8 <_fstat_r+0x1c>
 800a0a2:	682b      	ldr	r3, [r5, #0]
 800a0a4:	b103      	cbz	r3, 800a0a8 <_fstat_r+0x1c>
 800a0a6:	6023      	str	r3, [r4, #0]
 800a0a8:	bd38      	pop	{r3, r4, r5, pc}
 800a0aa:	bf00      	nop
 800a0ac:	2404b340 	.word	0x2404b340

0800a0b0 <_isatty_r>:
 800a0b0:	b538      	push	{r3, r4, r5, lr}
 800a0b2:	4d06      	ldr	r5, [pc, #24]	; (800a0cc <_isatty_r+0x1c>)
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	4608      	mov	r0, r1
 800a0ba:	602b      	str	r3, [r5, #0]
 800a0bc:	f7f7 f8ff 	bl	80012be <_isatty>
 800a0c0:	1c43      	adds	r3, r0, #1
 800a0c2:	d102      	bne.n	800a0ca <_isatty_r+0x1a>
 800a0c4:	682b      	ldr	r3, [r5, #0]
 800a0c6:	b103      	cbz	r3, 800a0ca <_isatty_r+0x1a>
 800a0c8:	6023      	str	r3, [r4, #0]
 800a0ca:	bd38      	pop	{r3, r4, r5, pc}
 800a0cc:	2404b340 	.word	0x2404b340

0800a0d0 <_lseek_r>:
 800a0d0:	b538      	push	{r3, r4, r5, lr}
 800a0d2:	4d07      	ldr	r5, [pc, #28]	; (800a0f0 <_lseek_r+0x20>)
 800a0d4:	4604      	mov	r4, r0
 800a0d6:	4608      	mov	r0, r1
 800a0d8:	4611      	mov	r1, r2
 800a0da:	2200      	movs	r2, #0
 800a0dc:	602a      	str	r2, [r5, #0]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	f7f7 f8f8 	bl	80012d4 <_lseek>
 800a0e4:	1c43      	adds	r3, r0, #1
 800a0e6:	d102      	bne.n	800a0ee <_lseek_r+0x1e>
 800a0e8:	682b      	ldr	r3, [r5, #0]
 800a0ea:	b103      	cbz	r3, 800a0ee <_lseek_r+0x1e>
 800a0ec:	6023      	str	r3, [r4, #0]
 800a0ee:	bd38      	pop	{r3, r4, r5, pc}
 800a0f0:	2404b340 	.word	0x2404b340

0800a0f4 <__malloc_lock>:
 800a0f4:	4801      	ldr	r0, [pc, #4]	; (800a0fc <__malloc_lock+0x8>)
 800a0f6:	f7ff bcfb 	b.w	8009af0 <__retarget_lock_acquire_recursive>
 800a0fa:	bf00      	nop
 800a0fc:	2404b334 	.word	0x2404b334

0800a100 <__malloc_unlock>:
 800a100:	4801      	ldr	r0, [pc, #4]	; (800a108 <__malloc_unlock+0x8>)
 800a102:	f7ff bcf6 	b.w	8009af2 <__retarget_lock_release_recursive>
 800a106:	bf00      	nop
 800a108:	2404b334 	.word	0x2404b334

0800a10c <_read_r>:
 800a10c:	b538      	push	{r3, r4, r5, lr}
 800a10e:	4d07      	ldr	r5, [pc, #28]	; (800a12c <_read_r+0x20>)
 800a110:	4604      	mov	r4, r0
 800a112:	4608      	mov	r0, r1
 800a114:	4611      	mov	r1, r2
 800a116:	2200      	movs	r2, #0
 800a118:	602a      	str	r2, [r5, #0]
 800a11a:	461a      	mov	r2, r3
 800a11c:	f7f7 f87a 	bl	8001214 <_read>
 800a120:	1c43      	adds	r3, r0, #1
 800a122:	d102      	bne.n	800a12a <_read_r+0x1e>
 800a124:	682b      	ldr	r3, [r5, #0]
 800a126:	b103      	cbz	r3, 800a12a <_read_r+0x1e>
 800a128:	6023      	str	r3, [r4, #0]
 800a12a:	bd38      	pop	{r3, r4, r5, pc}
 800a12c:	2404b340 	.word	0x2404b340

0800a130 <sqrt>:
 800a130:	b508      	push	{r3, lr}
 800a132:	ed2d 8b04 	vpush	{d8-d9}
 800a136:	eeb0 8b40 	vmov.f64	d8, d0
 800a13a:	f000 f819 	bl	800a170 <__ieee754_sqrt>
 800a13e:	eeb4 8b48 	vcmp.f64	d8, d8
 800a142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a146:	d60c      	bvs.n	800a162 <sqrt+0x32>
 800a148:	ed9f 9b07 	vldr	d9, [pc, #28]	; 800a168 <sqrt+0x38>
 800a14c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800a150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a154:	d505      	bpl.n	800a162 <sqrt+0x32>
 800a156:	f7ff f8f3 	bl	8009340 <__errno>
 800a15a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800a15e:	2321      	movs	r3, #33	; 0x21
 800a160:	6003      	str	r3, [r0, #0]
 800a162:	ecbd 8b04 	vpop	{d8-d9}
 800a166:	bd08      	pop	{r3, pc}
	...

0800a170 <__ieee754_sqrt>:
 800a170:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800a174:	4770      	bx	lr
	...

0800a178 <_init>:
 800a178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17a:	bf00      	nop
 800a17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a17e:	bc08      	pop	{r3}
 800a180:	469e      	mov	lr, r3
 800a182:	4770      	bx	lr

0800a184 <_fini>:
 800a184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a186:	bf00      	nop
 800a188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a18a:	bc08      	pop	{r3}
 800a18c:	469e      	mov	lr, r3
 800a18e:	4770      	bx	lr
